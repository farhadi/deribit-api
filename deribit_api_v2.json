{
  "components": {
    "parameters": {
      "add_positions": {
        "description": "If `true`, adds simulated positions to current positions, otherwise uses only simulated positions. By default `true`",
        "in": "query",
        "name": "add_positions",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "address": {
        "description": "Geographical address of the originator",
        "in": "query",
        "name": "address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "address_book_type": {
        "description": "Address book type",
        "in": "query",
        "name": "type",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/address_book_type"
        }
      },
      "address_book_type_without_deposit_source": {
        "description": "Address book type",
        "in": "query",
        "name": "type",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/address_book_type_without_deposit_source"
        }
      },
      "address_label": {
        "description": "Label of the address book entry",
        "in": "query",
        "name": "label",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/address_label"
        }
      },
      "address_tag": {
        "description": "Tag for XRP addresses",
        "in": "query",
        "name": "tag",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "advanced_order_type": {
        "description": "Advanced option order type. (Only for options. Advanced USD orders are not supported for linear options.)",
        "in": "query",
        "name": "advanced",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/advanced"
        }
      },
      "agree_to_share_with_3rd_party": {
        "description": "Indicates that the user agreed to shared provided information with 3rd parties",
        "in": "query",
        "name": "agreed",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/agree_to_share_with_3rd_party"
        }
      },
      "balance": {
        "description": "Current custody balance of the user",
        "in": "query",
        "name": "balance",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "beneficiary_address": {
        "description": "Geographical address of the beneficiary",
        "in": "query",
        "name": "beneficiary_address",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_address"
        }
      },
      "beneficiary_company_name": {
        "description": "Beneficiary company name (if beneficiary is a company)",
        "in": "query",
        "name": "beneficiary_company_name",
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_company_name"
        }
      },
      "beneficiary_first_name": {
        "description": "First name of beneficiary (if beneficiary is a person)",
        "in": "query",
        "name": "beneficiary_first_name",
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_first_name"
        }
      },
      "beneficiary_last_name": {
        "description": "First name of beneficiary (if beneficiary is a person)",
        "in": "query",
        "name": "beneficiary_last_name",
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_last_name"
        }
      },
      "beneficiary_vasp_did": {
        "description": "DID of beneficiary VASP",
        "in": "query",
        "name": "beneficiary_vasp_did",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_vasp_did"
        }
      },
      "beneficiary_vasp_did_optional": {
        "description": "Filter by beneficiary VASP DID",
        "in": "query",
        "name": "beneficiary_vasp_did",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_vasp_did"
        }
      },
      "beneficiary_vasp_name": {
        "description": "Name of beneficiary VASP",
        "in": "query",
        "name": "beneficiary_vasp_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_vasp_name"
        }
      },
      "beneficiary_vasp_name_optional": {
        "description": "Filter by beneficiary VASP name",
        "in": "query",
        "name": "beneficiary_vasp_name",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_vasp_name"
        }
      },
      "beneficiary_vasp_website": {
        "description": "Website of the beneficiary VASP. Required if the address book entry is associated with a VASP that is not included in the list of known VASPs",
        "in": "query",
        "name": "beneficiary_vasp_website",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/beneficiary_vasp_website"
        }
      },
      "block_rfq_aggregated_price": {
        "description": "Aggregated price used for quoting future spreads.",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "block_rfq_amount": {
        "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/amount"
        }
      },
      "block_rfq_continuation": {
        "description": "The continuation parameter specifies the starting point for fetching historical Block RFQs. When provided, the endpoint returns Block RFQs, starting from the specified ID and continuing backward (e.g., if `continuation` is 50, results will include Block RFQs of ID 49, 48, etc.)",
        "in": "query",
        "name": "continuation",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_count": {
        "description": "Count of Block RFQs returned",
        "in": "query",
        "name": "count",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_hedge_leg": {
        "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
        "in": "query",
        "name": "hedge",
        "required": false,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/instrument_name"
            },
            {
              "$ref": "#/components/parameters/leg_direction"
            },
            {
              "$ref": "#/components/parameters/hedge_leg_price"
            },
            {
              "$ref": "#/components/parameters/trade_amount_required"
            }
          ],
          "type": "object"
        }
      },
      "block_rfq_hedge_leg_quote": {
        "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
        "in": "query",
        "name": "hedge",
        "required": false,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/instrument_name"
            },
            {
              "$ref": "#/components/parameters/block_rfq_leg_direction"
            },
            {
              "$ref": "#/components/parameters/hedge_leg_price"
            },
            {
              "$ref": "#/components/parameters/trade_amount_required"
            }
          ],
          "type": "object"
        }
      },
      "block_rfq_hedge_leg_trade": {
        "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
        "in": "query",
        "name": "hedge",
        "required": false,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/instrument_name"
            },
            {
              "$ref": "#/components/parameters/block_rfq_leg_direction"
            },
            {
              "$ref": "#/components/parameters/hedge_leg_price"
            },
            {
              "$ref": "#/components/parameters/trade_amount_required"
            }
          ],
          "type": "object"
        }
      },
      "block_rfq_id": {
        "description": "ID of the Block RFQ",
        "in": "query",
        "name": "block_rfq_id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_label": {
        "description": "User defined label for the Block RFQ (maximum 64 characters)",
        "in": "query",
        "name": "label",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "block_rfq_leg_direction": {
        "description": "Direction of selected leg. Must match the direction of the corresponding leg in the Block RFQ",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/direction"
        }
      },
      "block_rfq_legs": {
        "description": "List of legs used to create Block RFQ",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/trade_amount_required"
              },
              {
                "$ref": "#/components/parameters/leg_direction"
              }
            ]
          },
          "type": "array"
        }
      },
      "block_rfq_legs_quote": {
        "description": "List of legs used for Block RFQ quote",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/trade_price"
              },
              {
                "$ref": "#/components/parameters/leg_ratio"
              },
              {
                "$ref": "#/components/parameters/block_rfq_leg_direction"
              }
            ]
          },
          "type": "array"
        }
      },
      "block_rfq_makers": {
        "description": "List of targeted Block RFQ makers. Only those makers will be notified about created Block RFQ. If the list is empty, all available makers will be targeted.",
        "in": "query",
        "name": "makers",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "block_rfq_quote_id": {
        "description": "ID of the Block RFQ quote",
        "in": "query",
        "name": "block_rfq_quote_id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_quote_label": {
        "description": "User defined label for the Block RFQ quote (maximum 64 characters). Used to identify quotes of a selected Block RFQ",
        "in": "query",
        "name": "label",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "block_rfq_role": {
        "description": "Role of the user in Block RFQ. When the `any` role is selected, the method returns all Block RFQs in which the user has participated, either as the `taker` or as a `maker`",
        "in": "query",
        "name": "role",
        "required": false,
        "schema": {
          "enum": [
            "any",
            "taker",
            "maker"
          ],
          "type": "string"
        }
      },
      "block_rfq_self_match_prevention": {
        "description": "When Block RFQ Self Match Prevention is enabled, it ensures that RFQs cannot be executed between accounts that belong to the same legal entity. This setting is independent of the general self-match prevention settings and must be configured separately.",
        "in": "query",
        "name": "block_rfq_self_match_prevention",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "block_rfq_state": {
        "description": "State of Block RFQ",
        "in": "query",
        "name": "state",
        "required": false,
        "schema": {
          "enum": [
            "open",
            "filled",
            "traded",
            "cancelled",
            "expired",
            "closed"
          ],
          "type": "string"
        }
      },
      "block_rfq_string_continuation": {
        "description": "Continuation token for pagination. Consists of `timestamp` and `block_rfq_id`.",
        "in": "query",
        "name": "continuation",
        "required": false,
        "schema": {
          "example": "1738050297271:103",
          "type": "string"
        }
      },
      "block_rfq_taker_direction": {
        "description": "Direction of the trade from the taker perspective",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/direction"
        }
      },
      "block_rfq_trade_legs": {
        "description": "List of legs used to trade Block RFQ",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/block_rfq_leg_direction"
              },
              {
                "$ref": "#/components/parameters/leg_ratio"
              }
            ]
          },
          "type": "array"
        }
      },
      "block_rfq_trade_price": {
        "description": "Maximum acceptable price for execution",
        "in": "query",
        "name": "price",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "block_trade_counterparty_signature": {
        "description": "Signature of block trade generated by `private/verify_block_trade_method`",
        "in": "query",
        "name": "counterparty_signature",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/block_trade_signature"
        }
      },
      "block_trade_id": {
        "description": "Block trade id",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/block_trade_id"
        }
      },
      "block_trade_nonce": {
        "description": "Nonce, shared with other party",
        "in": "query",
        "name": "nonce",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/nonce"
        }
      },
      "block_trade_role": {
        "description": "Describes if user wants to be maker or taker of trades",
        "in": "query",
        "name": "role",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/role"
        }
      },
      "block_trade_role_optional": {
        "description": "Describes if user wants to be maker or taker of trades",
        "in": "query",
        "name": "role",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/role"
        }
      },
      "block_trade_signature_to_invalidate": {
        "description": "Signature of block trade that will be invalidated",
        "in": "query",
        "name": "signature",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/block_trade_signature"
        }
      },
      "block_trade_timestamp": {
        "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "timestamp",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "block_trade_trades": {
        "description": "List of trades for block trade",
        "in": "query",
        "name": "trades",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/trade_price"
              },
              {
                "$ref": "#/components/parameters/trade_amount"
              },
              {
                "$ref": "#/components/parameters/trade_direction"
              }
            ]
          },
          "type": "array"
        }
      },
      "boolean_enabled": {
        "in": "query",
        "name": "enabled",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "boolean_state": {
        "in": "query",
        "name": "state",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "boolean_value": {
        "in": "query",
        "name": "value",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "business_registration_number": {
        "description": "The registration number of the company",
        "in": "query",
        "name": "business_registration_number",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/business_registration_number"
        }
      },
      "chart_resolution": {
        "description": "Chart bars resolution given in full minutes or keyword `1D` (only some specific resolutions are supported)",
        "in": "query",
        "name": "resolution",
        "required": true,
        "schema": {
          "enum": [
            1,
            3,
            5,
            10,
            15,
            30,
            60,
            120,
            180,
            360,
            720,
            "1D"
          ],
          "type": "string"
        }
      },
      "client_id": {
        "description": "API key client_id",
        "in": "query",
        "name": "client_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/client_id"
        }
      },
      "client_software_name": {
        "description": "Client software name",
        "in": "query",
        "name": "client_name",
        "required": true,
        "schema": {
          "example": "My Trading Software",
          "type": "string"
        }
      },
      "client_software_version": {
        "description": "Client software version",
        "in": "query",
        "name": "client_version",
        "required": true,
        "schema": {
          "example": "1.0.2",
          "type": "string"
        }
      },
      "cod_scope": {
        "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`)<br/><br/> **NOTICE:** Scope `connection` can be used only when working via Websocket.",
        "in": "query",
        "name": "scope",
        "required": false,
        "schema": {
          "enum": [
            "connection",
            "account"
          ],
          "type": "string"
        }
      },
      "combo_id": {
        "description": "Combo ID",
        "in": "query",
        "name": "combo_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/combo_id"
        }
      },
      "combo_trades": {
        "description": "List of trades used to create a combo",
        "in": "query",
        "name": "trades",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/trade_amount"
              },
              {
                "$ref": "#/components/parameters/trade_direction"
              }
            ]
          },
          "type": "array"
        }
      },
      "company_name": {
        "description": "Company name of the originator if the originator is a legal entity",
        "in": "query",
        "name": "company_name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "continuation": {
        "description": "Continuation token for pagination",
        "in": "query",
        "name": "continuation",
        "required": false,
        "schema": {
          "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT",
          "type": "string"
        }
      },
      "continuation_as_integer": {
        "description": "Continuation token for pagination",
        "in": "query",
        "name": "continuation",
        "required": false,
        "schema": {
          "example": 429946,
          "type": "integer"
        }
      },
      "created_after": {
        "description": "Filter by creation timestamp (after)",
        "in": "query",
        "name": "created_after",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "created_before": {
        "description": "Filter by creation timestamp (before)",
        "in": "query",
        "name": "created_before",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "currency": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/currency"
        }
      },
      "currency_address": {
        "description": "Address in currency format",
        "in": "query",
        "name": "address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "currency_address_from_address_book": {
        "description": "Address in currency format, it must be in address book",
        "in": "query",
        "name": "address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "currency_address_optional": {
        "description": "Address in currency format",
        "in": "query",
        "name": "address",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "currency_amount": {
        "description": "Amount",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "currency_custody_address": {
        "description": "Custody address in currency format",
        "in": "query",
        "name": "address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "currency_pair": {
        "description": "The currency pair symbol",
        "in": "query",
        "name": "currency_pair",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/index_name"
        }
      },
      "currency_pair_optional": {
        "description": "The currency pair symbol",
        "in": "query",
        "name": "currency_pair",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/index_name"
        }
      },
      "currency_with_any": {
        "description": "The currency symbol or `\"any\"` for all",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/currency_with_any"
        }
      },
      "currency_with_any_and_grouped": {
        "description": "The currency symbol or `\"any\"` for all or '\"grouped\"' for all grouped by currency",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/currency_with_any_and_grouped"
        }
      },
      "currency_with_any_and_list": {
        "description": "The currency symbol, list of currency symbols or `\"any\"` for all",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/currency_with_any_and_list"
        }
      },
      "custody_balance": {
        "description": "Balance of the user in the custodian system.",
        "in": "query",
        "name": "custody_balance",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "custody_currency": {
        "description": "The currency supported by custodian and exchange",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "custody_name": {
        "description": "Custody name",
        "in": "query",
        "name": "custody",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/custody_name"
        }
      },
      "custody_settlement_amount": {
        "description": "Amount to be settled",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "example": 2.341,
          "type": "number"
        }
      },
      "custody_settlement_id": {
        "description": "Unique identifier of the settlement.",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "example": "dec42708-2ec6-4cdd-8f9d-d49bbe94d0aa",
          "type": "string"
        }
      },
      "custody_settlement_initiate": {
        "description": "Request settlement for the given currencies",
        "in": "query",
        "name": "currencies",
        "required": true,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/custody_currency"
            },
            {
              "$ref": "#/components/parameters/custody_balance"
            }
          ],
          "type": "object"
        }
      },
      "custody_settlement_review": {
        "description": "List of review instructions for each currency",
        "in": "query",
        "name": "currencies",
        "required": true,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/custody_currency"
            },
            {
              "$ref": "#/components/parameters/custody_settlement_review_action"
            },
            {
              "$ref": "#/components/parameters/custody_settlement_review_reason"
            }
          ],
          "type": "object"
        }
      },
      "custody_settlement_review_action": {
        "description": "Action taken by the custodian",
        "in": "query",
        "name": "action",
        "required": true,
        "schema": {
          "enum": [
            "confirm",
            "ignore",
            "reject"
          ],
          "type": "string"
        }
      },
      "custody_settlement_review_reason": {
        "description": "Optional reason provided for ignoring or rejecting the instruction",
        "in": "query",
        "name": "reason",
        "required": false,
        "schema": {
          "example": "Balance discrepancy",
          "type": "string"
        }
      },
      "deposit_currency_amount": {
        "description": "Amount of deposited funds",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "deposit_id": {
        "description": "Id of the deposit",
        "in": "query",
        "name": "deposit_id",
        "required": true,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/currency"
            },
            {
              "$ref": "#/components/parameters/user_id"
            },
            {
              "$ref": "#/components/parameters/currency_address"
            },
            {
              "$ref": "#/components/parameters/tx_hash"
            }
          ],
          "type": "object"
        }
      },
      "detailed_bool_for_cancel_all": {
        "description": "When detailed is set to `true` output format is changed. See <a href='#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods'>description</a>. Default: `false`",
        "in": "query",
        "name": "detailed",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "difference": {
        "description": "Difference between current \"in exchange\" balance and current custody balance that happened due to the settlement.",
        "in": "query",
        "name": "difference",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "disclosed": {
        "description": "Determines whether the RFQ is non-anonymous, revealing both taker and maker aliases. It can be set to `false` (anonymous mode) only when at least 5 makers are targeted. Default value is `true`.",
        "in": "query",
        "name": "disclosed",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "display_amount": {
        "description": "Initial display amount for iceberg order. Has to be at least 100 times minimum amount for instrument and ratio of hidden part vs visible part has to be less than 100 as well.",
        "in": "query",
        "name": "display_amount",
        "required": false,
        "schema": {
          "default": 1,
          "type": "number"
        }
      },
      "dry_run": {
        "description": "If `true` request returns the result without switching the margining model. Default: `false`",
        "in": "query",
        "name": "dry_run",
        "required": false,
        "schema": {
          "example": true,
          "type": "boolean"
        }
      },
      "edit_advanced_order_type": {
        "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
        "in": "query",
        "name": "advanced",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/advanced"
        }
      },
      "edit_order_price": {
        "description": "<p>The order price in base currency.</p> <p>When editing an option order with advanced=usd, the field price should be the option price value in USD.</p> <p>When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p>",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "email": {
        "description": "Email address of account",
        "in": "query",
        "name": "email",
        "required": true,
        "schema": {
          "example": "john.doe@example.com",
          "type": "string"
        }
      },
      "enable_key": {
        "description": "Enables/disables the API key. `true` to enable, `false` to disable",
        "in": "query",
        "name": "enabled",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "end_timestamp": {
        "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "end_timestamp",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "execution_instruction": {
        "description": "<p>Execution instruction of the quote. Default - `any_part_of`</p> <ul> <li>`\"all_or_none (AON)\"` - The quote can only be filled entirely or not at all, ensuring that its amount matches the amount specified in the Block RFQ. </li> <li>`\"any_part_of (APO)\"` - The quote can be filled either partially or fully, with the filled amount potentially being less than the Block RFQ amount. Additionally, 'any_part_of' quotes have priority over 'all_or_none' quotes at the same price level.</li> </ul>",
        "in": "query",
        "name": "execution_instruction",
        "required": false,
        "schema": {
          "enum": [
            "all_or_none",
            "any_part_of"
          ],
          "type": "string"
        }
      },
      "expected_custody_balance": {
        "description": "Expected custody balance of the user",
        "in": "query",
        "name": "expected_custody_balance",
        "required": true,
        "schema": {
          "example": 2.341,
          "type": "number"
        }
      },
      "expiration": {
        "description": "The timestamp of expiration (milliseconds since the Unix epoch)",
        "in": "query",
        "name": "expiration",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "expires_at": {
        "description": "The timestamp when the quote expires (milliseconds since the Unix epoch)",
        "in": "query",
        "name": "expires_at",
        "required": false,
        "schema": {
          "example": 1745312540321,
          "type": "integer"
        }
      },
      "extended_to_subaccounts": {
        "description": "If value is `true` trading is prevented between subaccounts of given account, otherwise they are treated separately",
        "in": "query",
        "name": "extended_to_subaccounts",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "extended_volume_statistics": {
        "description": "Request for extended statistics. Including also 7 and 30 days volumes (default false)",
        "in": "query",
        "name": "extended",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "external_id": {
        "description": "User ID in the external system. (i.e. in custodian system)",
        "in": "query",
        "name": "external_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/external_id"
        }
      },
      "extra_currencies": {
        "description": "The user can pass a list of currencies to add the address for. It is currently available ONLY for ERC20 currencies. Without passing this paramater for an ERC20 currency, the address will be added to ALL of the ERC20 currencies.",
        "in": "query",
        "name": "extra_currencies",
        "schema": {
          "$ref": "#/components/schemas/types/extra_currencies"
        }
      },
      "first_name": {
        "description": "If the user is the originator of the deposit",
        "in": "query",
        "name": "first_name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "freeze_quotes": {
        "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
        "in": "query",
        "name": "freeze_quotes",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "hedge_leg_price": {
        "description": "Hedge leg price",
        "in": "query",
        "name": "price",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "historical": {
        "description": "<p>Determines whether historical trade and order records should be retrieved.</p> <ul> <li>`false` (default): Returns recent records: orders for 30 min, trades for 24h.</li> <li>`true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included.</li> </ul>",
        "in": "query",
        "name": "historical",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "include_combos_for_cancel_all": {
        "description": "When set to `true` orders in combo instruments affecting a given position will also be cancelled. Default: `false`",
        "in": "query",
        "name": "include_combos",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "index_name": {
        "description": "Index identifier, matches (base) cryptocurrency with quote currency",
        "in": "query",
        "name": "index_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/index_name"
        }
      },
      "index_name_derivative": {
        "description": "Index identifier of derivative instrument on the platform",
        "in": "query",
        "name": "index_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/index_name_derivative"
        }
      },
      "index_name_derivative_optional": {
        "description": "Index identifier of derivative instrument on the platform; skipping this parameter will return all configurations",
        "in": "query",
        "name": "index_name",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/index_name_derivative"
        }
      },
      "index_name_for_dvol": {
        "description": "Index identifier supported for DVOL",
        "in": "query",
        "name": "index_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/index_name_for_dvol"
        }
      },
      "instrument_name": {
        "description": "Instrument name",
        "in": "query",
        "name": "instrument_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/instrument_name"
        }
      },
      "instrument_name_options_only": {
        "description": "Instrument name - options only",
        "in": "query",
        "name": "instrument_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/instrument_name"
        }
      },
      "invalidate_token": {
        "description": "If value is `true` all tokens created in current session are invalidated, default: `true`",
        "in": "query",
        "name": "invalidate_token",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "is_personal": {
        "description": "If the user is the originator of the deposit",
        "in": "query",
        "name": "is_personal",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "jwt_recipient": {
        "description": "Recipient of the token",
        "name": "recipient",
        "schema": {
          "enum": [
            "zendesk"
          ],
          "required": true,
          "type": "enum"
        }
      },
      "key_features": {
        "description": "List of enabled advanced on-key features. Available options:<br> - `restricted_block_trades`: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key<br> - `block_trade_approval`: Block trades created using this API key require additional user approval. Methods that use `block_rfq` scope are not affected by Block Trade approval feature<br> ",
        "in": "query",
        "name": "enabled_features",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "restricted_block_trades",
              "block_trade_approval"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "key_id": {
        "description": "Id of key",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "key_name": {
        "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
        "in": "query",
        "name": "name",
        "schema": {
          "example": "TestName",
          "type": "string"
        }
      },
      "key_name_required": {
        "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
        "in": "query",
        "name": "name",
        "required": true,
        "schema": {
          "example": "TestName",
          "type": "string"
        }
      },
      "key_scope": {
        "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, its value is set as none. </BR></BR> Please check details described in [Access scope](#access-scope)",
        "in": "query",
        "name": "max_scope",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/max_scope"
        }
      },
      "kind_future_or_option_with_any": {
        "description": "Instrument kind, `\"future\"` or `\"option\"` or `\"any\"`",
        "in": "query",
        "name": "kind",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/kind_future_or_option_with_any"
        }
      },
      "kind_strict": {
        "description": "Instrument kind, `\"future\"` or `\"option\"`",
        "in": "query",
        "name": "kind",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/kind"
        }
      },
      "kind_with_any": {
        "description": "Instrument kind or `\"any\"` for all",
        "in": "query",
        "name": "kind",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/kind_with_any"
        }
      },
      "kind_with_combo_all": {
        "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all",
        "in": "query",
        "name": "kind",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/kind_with_combo_all"
        }
      },
      "last_name": {
        "description": "Last name of the originator if the originator is a person",
        "in": "query",
        "name": "last_name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "leg_direction": {
        "description": "Direction of selected leg",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/direction"
        }
      },
      "leg_ratio": {
        "description": "Ratio of amount between legs",
        "in": "query",
        "name": "ratio",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "legs_for_prices": {
        "description": "List of legs for which the prices will be calculated",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/trade_amount_required"
              },
              {
                "$ref": "#/components/parameters/leg_direction"
              }
            ]
          },
          "type": "array"
        }
      },
      "legs_price": {
        "description": "Price for the whole leg structure",
        "in": "query",
        "name": "price",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "length_for_perpetual_chart": {
        "description": "Specifies time period. `8h` - 8 hours, `24h` - 24 hours, `1m` - 1 month",
        "in": "query",
        "name": "length",
        "required": true,
        "schema": {
          "enum": [
            "8h",
            "24h",
            "1m"
          ],
          "type": "string"
        }
      },
      "limit_optional": {
        "description": "Maximum number of results to return",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "default": 100,
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "linked_order_type": {
        "description": "<p>The type of the linked order.</p> <ul> <li>`\"one_triggers_other\"` - Execution of primary order triggers the placement of one or more secondary orders.</li> <li>`\"one_cancels_other\"` -  The execution of one order in a pair automatically cancels the other, typically used to set a stop-loss and take-profit simultaneously.</li> <li>`\"one_triggers_one_cancels_other\"` - The execution of a primary order triggers two secondary orders (a stop-loss and take-profit pair), where the execution of one secondary order cancels the other.</li> </ul>",
        "in": "query",
        "name": "linked_order_type",
        "required": false,
        "schema": {
          "enum": [
            "one_triggers_other",
            "one_cancels_other",
            "one_triggers_one_cancels_other"
          ],
          "type": "string"
        }
      },
      "margin_model": {
        "description": "Margin model",
        "in": "query",
        "name": "margin_model",
        "required": true,
        "schema": {
          "enum": [
            "cross_pm",
            "cross_sm",
            "segregated_pm",
            "segregated_sm"
          ],
          "type": "string"
        }
      },
      "margins_quantity": {
        "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "max_show": {
        "description": "Deprecated. Maximum amount within an order to be shown to other customers, `0` for invisible order",
        "in": "query",
        "name": "max_show",
        "required": false,
        "schema": {
          "default": 1,
          "type": "number"
        }
      },
      "mmp": {
        "description": "Order MMP flag, only for order_type 'limit'",
        "in": "query",
        "name": "mmp",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "only_combo_kind": {
        "description": "Combo instrument kind, `\"combo\"` for any combo",
        "in": "query",
        "name": "kind",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/only_combo_kind"
        }
      },
      "optional_amount": {
        "description": "Amount",
        "in": "query",
        "name": "amount",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "optional_block_rfq_id": {
        "description": "ID of the Block RFQ",
        "in": "query",
        "name": "block_rfq_id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "optional_block_trade_end_id": {
        "description": "The id of the oldest block trade to be returned, `start_id` is required with `end_id`",
        "in": "query",
        "name": "end_id",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/block_trade_id"
        }
      },
      "optional_block_trade_start_id": {
        "description": "Response will contain block trades older than the one provided in this field",
        "in": "query",
        "name": "start_id",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/block_trade_id"
        }
      },
      "optional_combo_state": {
        "description": "Combo state, if not provided combos of all states are considered",
        "in": "query",
        "name": "state",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/combo_state"
        }
      },
      "optional_count10": {
        "description": "Number of requested items, default - `10`",
        "in": "query",
        "name": "count",
        "required": false,
        "schema": {
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "optional_count100": {
        "description": "Number of requested items, default - `100`",
        "in": "query",
        "name": "count",
        "required": false,
        "schema": {
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "optional_count20": {
        "description": "Number of requested items, default - `20`",
        "in": "query",
        "name": "count",
        "required": false,
        "schema": {
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "optional_currency": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/currency"
        }
      },
      "optional_currency_block_rfq": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/block_rfq_currency"
        }
      },
      "optional_default": {
        "description": "If `true`, new key is marked as default",
        "in": "query",
        "name": "default",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "optional_end_seq": {
        "description": "The sequence number of the last trade to be returned",
        "in": "query",
        "name": "end_seq",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "optional_end_trade_id": {
        "description": "The ID of the last trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
        "in": "query",
        "name": "end_id",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/trade_id"
        }
      },
      "optional_include_old_orders": {
        "description": "Include in result orders older than 2 days, default - `false`",
        "in": "query",
        "name": "include_old",
        "required": false,
        "schema": {
          "example": false,
          "type": "boolean"
        }
      },
      "optional_include_unfilled_orders": {
        "description": "Include in result fully unfilled closed orders, default - `false`",
        "in": "query",
        "name": "include_unfilled",
        "required": false,
        "schema": {
          "example": false,
          "type": "boolean"
        }
      },
      "optional_instrument_name": {
        "description": "Instrument name",
        "in": "query",
        "name": "instrument_name",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/instrument_name"
        }
      },
      "optional_kind": {
        "description": "Instrument kind, if not provided instruments of all kinds are considered",
        "in": "query",
        "name": "kind",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/kind"
        }
      },
      "optional_kind_with_combo_all": {
        "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
        "in": "query",
        "name": "kind",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/kind_with_combo_all"
        }
      },
      "optional_offset": {
        "description": "The offset for pagination, default - `0`",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "example": 10,
          "type": "integer"
        }
      },
      "optional_order_type": {
        "description": "Order type, default - `all`",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/order_type2"
        }
      },
      "optional_price": {
        "description": "Optional price for limit order.",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "optional_query": {
        "description": "The following keywords can be used to filter the results: `trade`, `maker`, `taker`, `open`, `close`, `liquidation`, `buy`, `sell`, `withdrawal`, `delivery`, `settlement`, `deposit`, `transfer`, `option`, `future`, `correction`, `block_trade`, `swap`. Plus withdrawal or transfer addresses",
        "in": "query",
        "name": "query",
        "required": false,
        "schema": {
          "example": "settlement",
          "type": "string"
        }
      },
      "optional_settlement_start_timestamp": {
        "description": "The latest timestamp to return result from (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "search_start_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "optional_settlement_type": {
        "description": "Settlement type",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/settlement_type"
        }
      },
      "optional_simple_order_type": {
        "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/simple_order_type"
        }
      },
      "optional_sorting": {
        "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
        "in": "query",
        "name": "sorting",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/sorting"
        }
      },
      "optional_start_seq": {
        "description": "The sequence number of the first trade to be returned",
        "in": "query",
        "name": "start_seq",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "optional_start_timestamp": {
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "start_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "optional_start_trade_id": {
        "description": "The ID of the first trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
        "in": "query",
        "name": "start_id",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/trade_id"
        }
      },
      "optional_subbacount_id": {
        "description": "Id of a subaccount",
        "in": "query",
        "name": "subaccount_id",
        "required": false,
        "schema": {
          "example": 9,
          "type": "integer"
        }
      },
      "optional_trade_end_timestamp": {
        "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
        "in": "query",
        "name": "end_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "optional_trade_start_timestamp": {
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
        "in": "query",
        "name": "start_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "optional_user_id": {
        "description": "Id of a (sub)account - by default current user id is used",
        "in": "query",
        "name": "user_id",
        "required": false,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "order_contracts": {
        "description": "It represents the requested order size in contract units and can be passed instead of `amount`. The `contracts` is a mandatory parameter if `amount` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
        "in": "query",
        "name": "contracts",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "order_id": {
        "description": "The order id",
        "in": "query",
        "name": "order_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/order_id"
        }
      },
      "order_label": {
        "description": "user defined label for the order (maximum 64 characters)",
        "in": "query",
        "name": "label",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "order_price": {
        "description": "<p>The order price in base currency (Only for limit and stop_limit orders)</p> <p>When adding an order with advanced=usd, the field price should be the option price value in USD.</p> <p>When adding an order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p>",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "order_quantity": {
        "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. The `amount` is a mandatory parameter if `contracts` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
        "in": "query",
        "name": "amount",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "order_side": {
        "description": "Side - `buy` or `sell`",
        "in": "query",
        "name": "side",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/side",
          "type": "string"
        }
      },
      "order_type": {
        "description": "The order type, default: `\"limit\"`",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "enum": [
            "limit",
            "stop_limit",
            "take_limit",
            "market",
            "stop_market",
            "take_market",
            "market_limit",
            "trailing_stop"
          ],
          "type": "string"
        }
      },
      "originator": {
        "description": "Information about the originator of the deposit",
        "in": "query",
        "name": "originator",
        "required": true,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/is_personal"
            },
            {
              "$ref": "#/components/parameters/company_name"
            },
            {
              "$ref": "#/components/parameters/first_name"
            },
            {
              "$ref": "#/components/parameters/last_name"
            },
            {
              "$ref": "#/components/parameters/address"
            }
          ],
          "type": "object"
        }
      },
      "otoco_config": {
        "description": "<p>List of trades to create or cancel when this order is filled.</p>",
        "in": "query",
        "name": "otoco_config",
        "required": false,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/trade_amount"
              },
              {
                "$ref": "#/components/parameters/trade_direction"
              },
              {
                "$ref": "#/components/parameters/order_type"
              },
              {
                "$ref": "#/components/parameters/order_label"
              },
              {
                "$ref": "#/components/parameters/order_price"
              },
              {
                "$ref": "#/components/parameters/reduce_only"
              },
              {
                "$ref": "#/components/parameters/time_in_force"
              },
              {
                "$ref": "#/components/parameters/post_only_secondary"
              },
              {
                "$ref": "#/components/parameters/reject_post_only"
              },
              {
                "$ref": "#/components/parameters/trigger_price"
              },
              {
                "$ref": "#/components/parameters/trigger_offset"
              },
              {
                "$ref": "#/components/parameters/trigger"
              }
            ]
          },
          "type": "array"
        }
      },
      "password": {
        "description": "The password for the account",
        "in": "query",
        "name": "password",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "personal_wallet": {
        "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
        "in": "query",
        "name": "personal",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/personal_wallet"
        }
      },
      "personal_wallet_optional": {
        "description": "Filter by personal wallet flag",
        "in": "query",
        "name": "personal",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "pme_enabled": {
        "description": "Whether PM or SM should be enabled - PM while `true`, SM otherwise",
        "in": "query",
        "name": "enabled",
        "required": true,
        "schema": {
          "example": true,
          "type": "boolean"
        }
      },
      "position_move_amount": {
        "description": "It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. Amount can't exceed position size.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "position_move_price": {
        "description": "Price for trade - if not provided average price of the position is used",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "position_move_source_uid": {
        "description": "Id of source subaccount. Can be found in `My Account >> Subaccounts` tab",
        "in": "query",
        "name": "source_uid",
        "required": true,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "position_move_target_uid": {
        "description": "Id of target subaccount. Can be found in `My Account >> Subaccounts` tab",
        "in": "query",
        "name": "target_uid",
        "required": true,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "position_move_trades": {
        "description": "List of trades for position move",
        "in": "query",
        "name": "trades",
        "required": true,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/instrument_name"
              },
              {
                "$ref": "#/components/parameters/position_move_price"
              },
              {
                "$ref": "#/components/parameters/position_move_amount"
              }
            ]
          },
          "type": "array"
        }
      },
      "post_only_buy": {
        "description": "<p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread.</p> <p>Only valid in combination with time_in_force=`\"good_til_cancelled\"`</p>",
        "in": "query",
        "name": "post_only",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "post_only_edit": {
        "description": "<p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type).</p> <p>Only valid in combination with time_in_force=`\"good_til_cancelled\"`</p>",
        "in": "query",
        "name": "post_only",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "post_only_secondary": {
        "description": "<p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (according to the direction of the order).</p> <p>Only valid in combination with time_in_force=`\"good_til_cancelled\"`</p>",
        "in": "query",
        "name": "post_only",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "post_only_sell": {
        "description": "<p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just above the spread.</p> <p>Only valid in combination with time_in_force=`\"good_til_cancelled\"`</p>",
        "in": "query",
        "name": "post_only",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "public_key": {
        "description": "ED25519 or RSA PEM Encoded public key that should be used to create asymmetric API Key for signing requests/authentication requests with user's private key.<br></br> **\ud83d\udcd6 Related Support Article:** [Asymmetric API keys](https://support.deribit.com/hc/en-us/articles/25944616699165-Asymmetric-API-keys)\n",
        "in": "query",
        "name": "public_key",
        "required": false,
        "schema": {
          "example": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAM7FWhKquNqLmTOV4hfYT5r3AjrYiORTT6Tn5HIfFNV8=\n-----END PUBLIC KEY-----",
          "type": "string"
        }
      },
      "range": {
        "description": "Range of the data to return",
        "in": "query",
        "name": "range",
        "required": true,
        "schema": {
          "enum": [
            "1h",
            "1d",
            "2d",
            "1m",
            "1y",
            "all"
          ],
          "type": "string"
        }
      },
      "recovery_code": {
        "description": "One time recovery code",
        "in": "query",
        "name": "code",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "reduce_only": {
        "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
        "in": "query",
        "name": "reduce_only",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "reject_post_only": {
        "description": "<p>If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected.</p> <p>Only valid in combination with `\"post_only\"` set to true</p>",
        "in": "query",
        "name": "reject_post_only",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "request_id": {
        "description": "Request ID",
        "in": "query",
        "name": "requestId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "required_order_label": {
        "description": "user defined label for the order (maximum 64 characters)",
        "in": "query",
        "name": "label",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "security_key_id": {
        "description": "Security Key Id",
        "in": "qurey",
        "name": "key_id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "security_key_name": {
        "description": "Name of security key, only alpha numeric chars allowed with - and _",
        "in": "qurey",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "security_key_reset_code": {
        "description": "Security Key reset code",
        "in": "query",
        "name": "code",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "self_trading_mode": {
        "description": "Self trading prevention behavior: `reject_taker` (reject the incoming order), `cancel_maker` (cancel the matched order in the book)",
        "in": "query",
        "name": "mode",
        "required": true,
        "schema": {
          "enum": [
            "reject_taker",
            "cancel_maker"
          ],
          "type": "string"
        }
      },
      "settlement_currency_with_any_and_grouped": {
        "description": "The currency symbol or `\"any\"` for all or '\"grouped\"' for all grouped by currency",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/settlement_currency_with_any_and_grouped"
        }
      },
      "simple_order_type_market_limit": {
        "description": "The order type",
        "in": "query",
        "name": "type",
        "required": true,
        "schema": {
          "enum": [
            "limit",
            "market"
          ],
          "type": "string"
        }
      },
      "simulated_positions_map": {
        "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1000.0}` (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.",
        "in": "query",
        "name": "simulated_positions",
        "required": false,
        "schema": {
          "properties": {
            "$key": {
              "description": "Instrument name",
              "name": "instrument_name",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/types/instrument_name"
              }
            },
            "$value": {
              "description": "Position size",
              "name": "position",
              "required": true,
              "schema": {
                "example": 100.0,
                "type": "number"
              }
            }
          },
          "type": "object"
        }
      },
      "simulated_positions_map_base": {
        "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1.0}` (or corresponding URI-encoding for GET). Size in base currency.",
        "in": "query",
        "name": "simulated_positions",
        "required": false,
        "schema": {
          "properties": {
            "$key": {
              "description": "Instrument name",
              "name": "instrument_name",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/types/instrument_name"
              }
            },
            "$value": {
              "description": "Position size",
              "name": "position",
              "required": true,
              "schema": {
                "example": 1.0,
                "type": "number"
              }
            }
          },
          "type": "object"
        }
      },
      "start_timestamp": {
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "start_timestamp",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "subscription_interval": {
        "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied **(Please note that `raw` interval is only available to authorized users)**",
        "in": "query",
        "name": "interval",
        "required": true,
        "schema": {
          "enum": [
            "agg2",
            "100ms",
            "raw"
          ],
          "type": "string"
        }
      },
      "subscription_interval_non_raw": {
        "description": "Frequency of notifications. Events will be aggregated over this interval.",
        "in": "query",
        "name": "interval",
        "required": true,
        "schema": {
          "enum": [
            "100ms",
            "agg2"
          ],
          "type": "string"
        }
      },
      "tfa": {
        "description": "TFA code, required when TFA is enabled for current account",
        "in": "query",
        "name": "tfa",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "time_in_force": {
        "description": "<p>Specifies how long the order remains in effect. Default `\"good_til_cancelled\"`</p> <ul> <li>`\"good_til_cancelled\"` - unfilled order remains in order book until cancelled</li> <li>`\"good_til_day\"` - unfilled order remains in order book till the end of the trading session</li> <li>`\"fill_or_kill\"` - execute a transaction immediately and completely or not at all</li> <li>`\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</li> </ul>",
        "in": "query",
        "name": "time_in_force",
        "required": false,
        "schema": {
          "default": "good_til_cancelled",
          "enum": [
            "good_til_cancelled",
            "good_til_day",
            "fill_or_kill",
            "immediate_or_cancel"
          ],
          "type": "string"
        }
      },
      "trade_allocation_amount": {
        "description": "Amount allocated to this user or client.",
        "in": "query",
        "name": "amount",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "trade_allocation_client_id": {
        "description": "ID of a client; available to broker. Represents a group of users under a common name.",
        "in": "query",
        "name": "client_id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "trade_allocation_client_info": {
        "description": "Client allocation info for brokers.",
        "in": "query",
        "name": "client_info",
        "required": false,
        "schema": {
          "properties": [
            {
              "$ref": "#/components/parameters/trade_allocation_client_id"
            },
            {
              "$ref": "#/components/parameters/trade_allocation_client_link_id"
            }
          ],
          "required": [
            "client_id",
            "client_link_id"
          ],
          "type": "object"
        }
      },
      "trade_allocation_client_link_id": {
        "description": "ID assigned to a single user in a client; available to broker.",
        "in": "query",
        "name": "client_link_id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "trade_allocation_user_id": {
        "description": "User ID (subaccount or main account) to allocate part of the RFQ amount.",
        "in": "query",
        "name": "user_id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "trade_allocations": {
        "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts or broker clients. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and amount.",
        "in": "query",
        "name": "trade_allocations",
        "required": false,
        "schema": {
          "items": {
            "type": "object",
            "properties": [
              {
                "$ref": "#/components/parameters/trade_allocation_user_id"
              },
              {
                "$ref": "#/components/parameters/trade_allocation_client_info"
              },
              {
                "$ref": "#/components/parameters/trade_allocation_amount"
              }
            ]
          },
          "type": "array"
        }
      },
      "trade_amount": {
        "description": "It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "in": "query",
        "name": "amount",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/amount"
        }
      },
      "trade_amount_required": {
        "description": "It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/amount"
        }
      },
      "trade_direction": {
        "description": "Direction of trade from the maker perspective",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/direction"
        }
      },
      "trade_end_timestamp": {
        "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
        "in": "query",
        "name": "end_timestamp",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "trade_price": {
        "description": "Price for trade",
        "in": "query",
        "name": "price",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "trade_start_timestamp": {
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
        "in": "query",
        "name": "start_timestamp",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "trading_products": {
        "description": "List of available trading products. Available products: perpetual, futures, options, future_combos, option_combos, spots\n",
        "in": "query",
        "name": "trading_products",
        "required": true,
        "schema": {
          "items": {
            "enum": [
              "perpetual",
              "futures",
              "options",
              "future_combos",
              "option_combos",
              "spots"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "transfer_currency_amount": {
        "description": "Amount of funds to be transferred",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "transfer_destination_for_subaccount": {
        "description": "Id of destination subaccount. Can be found in `My Account >> Subaccounts` tab",
        "in": "query",
        "name": "destination",
        "required": true,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "transfer_destination_for_user": {
        "description": "Destination wallet's address taken from address book",
        "in": "query",
        "name": "destination",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "transfer_direction": {
        "description": "Direction of transfer",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/transfer_direction"
        }
      },
      "transfer_id": {
        "description": "Id of transfer",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/transfer_id"
        }
      },
      "transfer_source_for_subaccount": {
        "description": "Id of the source (sub)account. Can be found in `My Account >> Subaccounts` tab. By default, it is the Id of the account which made the request. However, if a different \"source\" is specified, the user must possess the mainaccount scope, and only other subaccounts can be designated as the source.",
        "in": "query",
        "name": "source",
        "required": false,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "trigger": {
        "description": "Defines the trigger type. Required for `\"Stop-Loss\"`, `\"Take-Profit\"` and `\"Trailing\"` trigger orders",
        "in": "query",
        "name": "trigger",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/trigger"
        }
      },
      "trigger_fill_condition": {
        "description": "<p>The fill condition of the linked order (Only for linked order types), default: `first_hit`.</p> <ul> <li>`\"first_hit\"` - any execution of the primary order will fully cancel/place all secondary orders.</li> <li>`\"complete_fill\"` - a complete execution (meaning the primary order no longer exists) will cancel/place the secondary orders.</li> <li>`\"incremental\"` - any fill of the primary order will cause proportional partial cancellation/placement of the secondary order. The amount that will be subtracted/added to the secondary order will be rounded down to the contract size.</li> </ul>",
        "in": "query",
        "name": "trigger_fill_condition",
        "required": false,
        "schema": {
          "default": "first_hit",
          "enum": [
            "first_hit",
            "complete_fill",
            "incremental"
          ],
          "type": "string"
        }
      },
      "trigger_offset": {
        "description": "The maximum deviation from the price peak beyond which the order will be triggered",
        "in": "query",
        "name": "trigger_offset",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "trigger_price": {
        "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
        "in": "query",
        "name": "trigger_price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "tx_hash": {
        "description": "Transaction id in a proper format for the currency",
        "example": "1b1fb5568515e2b79503501e3d3680b2d0838d5dfc2d15a04eb8cd9fbbe0b572",
        "in": "query",
        "name": "tx_hash",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "type_of_supported_index": {
        "description": "Type of a cryptocurrency price index",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "enum": [
            "all",
            "spot",
            "derivative"
          ],
          "type": "string"
        }
      },
      "unhosted_wallet": {
        "description": "Indicates if the address belongs to an unhosted wallet",
        "in": "query",
        "name": "unhosted",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "unhosted_wallet_optional": {
        "description": "Filter by unhosted wallet flag",
        "in": "query",
        "name": "unhosted",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "updated_after": {
        "description": "Filter by update timestamp (after)",
        "in": "query",
        "name": "updated_after",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "updated_before": {
        "description": "Filter by update timestamp (before)",
        "in": "query",
        "name": "updated_before",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "user_id": {
        "description": "Id of a (sub)account",
        "in": "query",
        "name": "user_id",
        "required": true,
        "schema": {
          "example": 1,
          "type": "integer"
        }
      },
      "valid_until": {
        "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use <a href='#public-get_time'>/public/time</a> method to obtain current server time.",
        "in": "query",
        "name": "valid_until",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "vix_resolution": {
        "description": "Time resolution given in full seconds or keyword `1D` (only some specific resolutions are supported)",
        "in": "query",
        "name": "resolution",
        "required": true,
        "schema": {
          "enum": [
            1,
            60,
            3600,
            43200,
            "1D"
          ],
          "type": "string"
        }
      },
      "wallet_currency": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/wallet_currency"
        }
      },
      "wallet_currency_optional": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/types/wallet_currency"
        }
      },
      "whitelist_ip": {
        "description": "Whitelist provided IP address on a selected key",
        "in": "query",
        "name": "ip_whitelist",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "with_continuation": {
        "description": "When set to true, the API response format changes from a simple list of orders to an object containing the orders and a continuation token.",
        "in": "query",
        "name": "with_continuation",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "withdrawal_currency_amount": {
        "description": "Amount of funds to be withdrawn",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "withdrawal_id": {
        "description": "The withdrawal id",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "example": 1,
          "type": "number"
        }
      },
      "withdrawal_policy_amount": {
        "description": "Amount or flag to use default value",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/withdrawal_policy_amount"
        }
      },
      "withdrawal_policy_category": {
        "description": "Withdrawal Policy category",
        "in": "query",
        "name": "category",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/withdrawal_policy_category"
        }
      },
      "withdrawal_policy_limit_bucket": {
        "description": "Withdrawal Policy limit bucket",
        "in": "query",
        "name": "limit_bucket",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/withdrawal_policy_limit_bucket"
        }
      },
      "withdrawal_policy_mode": {
        "description": "Withdrawal Policy mode",
        "in": "query",
        "name": "mode",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/types/withdrawal_policy_mode"
        }
      },
      "withdrawal_priority": {
        "description": "Withdrawal priority, optional for BTC, default: `high`",
        "in": "query",
        "name": "priority",
        "required": false,
        "schema": {
          "enum": [
            "insane",
            "extreme_high",
            "very_high",
            "high",
            "mid",
            "low",
            "very_low"
          ],
          "type": "string"
        }
      }
    },
    "schemas": {
      "access_log": {
        "properties": {
          "city": {
            "description": "City where the IP address is registered (estimated)",
            "type": "string"
          },
          "country": {
            "description": "Country where the IP address is registered (estimated)",
            "type": "string"
          },
          "data": {
            "description": "Optional, additional information about action, type depends on `log` value",
            "type": "object or string"
          },
          "id": {
            "$ref": "#/components/schemas/types/id"
          },
          "ip": {
            "description": "IP address of source that generated action",
            "type": "string"
          },
          "log": {
            "description": "Action description, values: `changed_email` - email was changed; `changed_password` - password was changed; `disabled_tfa` - TFA was disabled; `enabled_tfa` - TFA was enabled, `success` - successful login; `failure` - login failure; `enabled_subaccount_login` - login was enabled for subaccount (in `data` - subaccount uid); `disabled_subaccount_login` - login was disabled for subbaccount (in `data` - subbacount uid);`new_api_key` - API key was created (in `data` key client id); `removed_api_key` - API key was removed (in `data` key client id); `changed_scope` - scope of API key was changed (in `data` key client id); `changed_whitelist` - whitelist of API key was edited (in `data` key client id); `disabled_api_key` - API key was disabled (in `data` key client id); `enabled_api_key` - API key was enabled (in `data` key client id); `reset_api_key` - API key was reset (in `data` key client id)",
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "id",
          "ip",
          "timestamp",
          "country",
          "city",
          "log"
        ],
        "type": "object"
      },
      "address_beneficiary_item": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/types/currency_address"
          },
          "agreed": {
            "$ref": "#/components/schemas/types/agree_to_share_with_3rd_party"
          },
          "beneficiary_address": {
            "$ref": "#/components/schemas/types/beneficiary_address"
          },
          "beneficiary_company_name": {
            "$ref": "#/components/schemas/types/beneficiary_company_name"
          },
          "beneficiary_first_name": {
            "$ref": "#/components/schemas/types/beneficiary_first_name"
          },
          "beneficiary_last_name": {
            "$ref": "#/components/schemas/types/beneficiary_last_name"
          },
          "beneficiary_vasp_did": {
            "$ref": "#/components/schemas/types/beneficiary_vasp_did"
          },
          "beneficiary_vasp_name": {
            "$ref": "#/components/schemas/types/beneficiary_vasp_name"
          },
          "beneficiary_vasp_website": {
            "$ref": "#/components/schemas/types/beneficiary_vasp_website"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "personal": {
            "$ref": "#/components/schemas/types/personal_wallet"
          },
          "tag": {
            "description": "Tag for XRP addresses (optional)",
            "nullable": true,
            "type": "string"
          },
          "unhosted": {
            "$ref": "#/components/schemas/types/unhosted_wallet"
          },
          "update_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "currency",
          "address",
          "agreed",
          "personal",
          "unhosted",
          "beneficiary_vasp_name",
          "beneficiary_vasp_did",
          "beneficiary_address",
          "creation_timestamp",
          "update_timestamp"
        ],
        "type": "object"
      },
      "address_book_item": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/types/currency_address"
          },
          "agreed": {
            "$ref": "#/components/schemas/types/agree_to_share_with_3rd_party"
          },
          "beneficiary_address": {
            "$ref": "#/components/schemas/types/beneficiary_address"
          },
          "beneficiary_company_name": {
            "$ref": "#/components/schemas/types/beneficiary_company_name"
          },
          "beneficiary_first_name": {
            "$ref": "#/components/schemas/types/beneficiary_first_name"
          },
          "beneficiary_last_name": {
            "$ref": "#/components/schemas/types/beneficiary_last_name"
          },
          "beneficiary_vasp_did": {
            "$ref": "#/components/schemas/types/beneficiary_vasp_did"
          },
          "beneficiary_vasp_name": {
            "$ref": "#/components/schemas/types/beneficiary_vasp_name"
          },
          "beneficiary_vasp_website": {
            "$ref": "#/components/schemas/types/beneficiary_vasp_website"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/types/wallet_currency"
          },
          "info_required": {
            "$ref": "#/components/schemas/types/address_info_required"
          },
          "label": {
            "$ref": "#/components/schemas/types/address_label"
          },
          "personal": {
            "$ref": "#/components/schemas/types/personal_wallet"
          },
          "requires_confirmation": {
            "$ref": "#/components/schemas/types/requires_confirmation"
          },
          "requires_confirmation_change": {
            "$ref": "#/components/schemas/types/requires_confirmation_change"
          },
          "status": {
            "$ref": "#/components/schemas/types/status"
          },
          "type": {
            "$ref": "#/components/schemas/types/address_book_type"
          },
          "waiting_timestamp": {
            "$ref": "#/components/schemas/types/waiting_timestamp"
          }
        },
        "required": [
          "currency",
          "address",
          "creation_timestamp"
        ],
        "type": "object"
      },
      "address_ownership_item": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/types/currency_address"
          },
          "address_type": {
            "$ref": "#/components/schemas/types/currency_address_type"
          },
          "asset": {
            "$ref": "#/components/schemas/types/currency"
          },
          "owner_vasp_did": {
            "$ref": "#/components/schemas/types/did"
          },
          "source": {
            "$ref": "#/components/schemas/types/source"
          }
        },
        "required": [
          "owner_vasp_did",
          "address",
          "address_type",
          "asset",
          "source"
        ],
        "type": "object"
      },
      "api_key": {
        "properties": {
          "client_id": {
            "$ref": "#/components/schemas/types/client_id"
          },
          "client_secret": {
            "$ref": "#/components/schemas/types/client_secret"
          },
          "default": {
            "$ref": "#/components/schemas/types/api_key_default"
          },
          "enabled": {
            "$ref": "#/components/schemas/types/api_key_enabled"
          },
          "enabled_features": {
            "$ref": "#/components/schemas/types/api_key_features"
          },
          "id": {
            "$ref": "#/components/schemas/types/key_id"
          },
          "ip_whitelist": {
            "description": "List of IP addresses whitelisted for a selected key",
            "type": "array"
          },
          "max_scope": {
            "$ref": "#/components/schemas/types/max_scope"
          },
          "name": {
            "$ref": "#/components/schemas/types/api_key_name"
          },
          "public_key": {
            "$ref": "#/components/schemas/types/public_key"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "id",
          "timestamp",
          "client_id",
          "client_secret",
          "max_scope",
          "default"
        ],
        "type": "object"
      },
      "block_trade": {
        "properties": {
          "app_name": {
            "description": "The name of the application that executed the block trade on behalf of the user (optional).",
            "example": "Example Application",
            "type": "string"
          },
          "broker_code": {
            "description": "Broker code associated with the broker block trade.",
            "example": "2krM7sJsx",
            "type": "string"
          },
          "broker_name": {
            "description": "Name of the broker associated with the block trade.",
            "example": "Test Broker",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/types/block_trade_id"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "trades": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "currency",
          "timestamp",
          "trades"
        ],
        "type": "object"
      },
      "book_summary": {
        "properties": {
          "ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "example": 7022.89,
            "type": "number"
          },
          "base_currency": {
            "description": "Base currency",
            "example": "ETH",
            "type": "string"
          },
          "bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "example": 7022.89,
            "type": "number"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "number": 0.12344,
            "type": "number"
          },
          "estimated_delivery_price": {
            "description": "Optional (only for derivatives). Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price.",
            "example": 11628.81,
            "type": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "type": "number"
          },
          "high": {
            "description": "Price of the 24h highest trade",
            "example": 7022.89,
            "type": "number"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "example": 0,
            "type": "number"
          },
          "last": {
            "description": "The price of the latest trade, `null` if there weren't any trades",
            "example": 7022.89,
            "type": "number"
          },
          "low": {
            "description": "Price of the 24h lowest trade, `null` if there weren't any trades",
            "example": 7022.89,
            "type": "number"
          },
          "mark_iv": {
            "$ref": "#/components/schemas/types/mark_iv"
          },
          "mark_price": {
            "description": "The current instrument market price",
            "example": 7022.89,
            "type": "number"
          },
          "mid_price": {
            "description": "The average of the best bid and ask, `null` if there aren't any asks or bids",
            "example": 7022.89,
            "type": "number"
          },
          "open_interest": {
            "description": "Optional (only for derivatives). The total amount of outstanding contracts in the corresponding amount units. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "example": 0.5,
            "type": "number"
          },
          "price_change": {
            "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
            "example": 10.23,
            "type": "number"
          },
          "quote_currency": {
            "description": "Quote currency",
            "example": "USD",
            "type": "string"
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `'index_price'` (options only)",
            "example": "index_price",
            "type": "string"
          },
          "underlying_price": {
            "description": "underlying price for implied volatility calculations (options only)",
            "example": 6745.34,
            "type": "number"
          },
          "volume": {
            "description": "The total 24h traded volume (in base currency)",
            "example": 223,
            "type": "number"
          },
          "volume_notional": {
            "description": "Volume in quote currency (futures and spots only)",
            "type": "number"
          },
          "volume_usd": {
            "description": "Volume in USD",
            "type": "number"
          }
        },
        "required": [
          "instrument_name",
          "high",
          "low",
          "base currency",
          "quote_currency",
          "volume",
          "bid_price",
          "ask_price",
          "mid_price",
          "mark_price",
          "last",
          "open_interest",
          "creation_timestamp"
        ]
      },
      "combo": {
        "properties": {
          "creation_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/types/combo_id"
          },
          "instrument_id": {
            "$ref": "#/components/schemas/types/instrument_id"
          },
          "legs": {
            "items": {
              "$ref": "#/components/schemas/combo_leg"
            },
            "type": "array"
          },
          "state": {
            "$ref": "#/components/schemas/types/combo_state"
          },
          "state_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "type": "object"
      },
      "combo_leg": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/types/combo_leg_amount"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          }
        },
        "type": "object"
      },
      "currency": {
        "properties": {
          "coin_type": {
            "description": "The type of the currency.",
            "enum": [
              "BITCOIN",
              "ETHER"
            ],
            "type": "string"
          },
          "currency": {
            "description": "The abbreviation of the currency. This abbreviation is used elsewhere in the API to identify the currency.",
            "example": "BTC",
            "type": "string"
          },
          "currency_long": {
            "description": "The full name for the currency.",
            "example": "Bitcoin",
            "type": "string"
          },
          "fee_precision": {
            "description": "fee precision",
            "example": 4,
            "type": "integer"
          },
          "in_cross_collateral_pool": {
            "description": "`true` if the currency is part of the cross collateral pool",
            "type": "boolean"
          },
          "min_confirmations": {
            "description": "Minimum number of block chain confirmations before deposit is accepted.",
            "example": 2,
            "type": "integer"
          },
          "min_withdrawal_fee": {
            "description": "The minimum transaction fee paid for withdrawals",
            "example": 0.0001,
            "type": "number"
          },
          "withdrawal_fee": {
            "description": "The total transaction fee paid for withdrawals",
            "example": 0.0001,
            "type": "number"
          },
          "withdrawal_priorities": {
            "items": {
              "$ref": "#/components/schemas/key_number_pair"
            },
            "type": "array"
          }
        },
        "required": [
          "currency",
          "currency_long",
          "min_confirmation",
          "withdrawal_fee",
          "coin_type",
          "in_cross_collateral_pool"
        ],
        "type": "object"
      },
      "currency_portfolio": {
        "properties": {
          "additional_reserve": {
            "$ref": "#/components/schemas/types/additional_reserve"
          },
          "available_funds": {
            "type": "number"
          },
          "available_withdrawal_funds": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "currency": {
            "enum": [
              "btc",
              "eth"
            ],
            "type": "string"
          },
          "equity": {
            "type": "number"
          },
          "initial_margin": {
            "type": "number"
          },
          "maintenance_margin": {
            "type": "number"
          },
          "margin_balance": {
            "type": "number"
          },
          "spot_reserve": {
            "type": "number"
          }
        },
        "required": [
          "margin_balance",
          "currency",
          "maintenance_margin",
          "initial_margin",
          "equity",
          "balance",
          "available_withdrawal_funds",
          "available_funds",
          "additional_reserve",
          "spot_reserve"
        ],
        "type": "object"
      },
      "currency_with_apr": {
        "properties": {
          "apr": {
            "description": "Simple Moving Average (SMA) of the last 7 days of rewards. If fewer than 7 days of reward data are available, the APR is calculated as the average of the available rewards. Only applicable to yield-generating tokens (`USDE`, `STETH`).",
            "type": "number"
          },
          "coin_type": {
            "description": "The type of the currency.",
            "enum": [
              "BNB",
              "BTC",
              "BUIDL",
              "ETH",
              "ETHW",
              "EURR",
              "MATIC",
              "PAXG",
              "SOL",
              "STETH",
              "USDC",
              "USDE",
              "USDT",
              "USYC",
              "XRP"
            ],
            "type": "string"
          },
          "currency": {
            "description": "The abbreviation of the currency. This abbreviation is used elsewhere in the API to identify the currency.",
            "example": "BTC",
            "type": "string"
          },
          "currency_long": {
            "description": "The full name for the currency.",
            "example": "Bitcoin",
            "type": "string"
          },
          "fee_precision": {
            "description": "fee precision",
            "example": 4,
            "type": "integer"
          },
          "in_cross_collateral_pool": {
            "description": "`true` if the currency is part of the cross collateral pool",
            "type": "boolean"
          },
          "min_confirmations": {
            "description": "Minimum number of block chain confirmations before deposit is accepted.",
            "example": 2,
            "type": "integer"
          },
          "min_withdrawal_fee": {
            "description": "The minimum transaction fee paid for withdrawals",
            "example": 0.0001,
            "type": "number"
          },
          "withdrawal_fee": {
            "description": "The total transaction fee paid for withdrawals",
            "example": 0.0001,
            "type": "number"
          },
          "withdrawal_priorities": {
            "items": {
              "$ref": "#/components/schemas/key_number_pair"
            },
            "type": "array"
          }
        },
        "required": [
          "currency",
          "currency_long",
          "min_confirmation",
          "withdrawal_fee",
          "coin_type",
          "in_cross_collateral_pool"
        ],
        "type": "object"
      },
      "custody_account": {
        "description": "Custody account",
        "properties": {
          "auto_deposit": {
            "description": "When set to 'true' all new funds added to custody balance will be automatically transferred to trading balance",
            "type": "boolean"
          },
          "balance": {
            "$ref": "#/components/schemas/types/currency_amount",
            "description": "Balance available on custody account"
          },
          "client_id": {
            "description": "API key 'client id' used to reserve/release funds in custody platform, requires scope 'custody:read_write'",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "deposit_address": {
            "description": "Address that can be used for deposits",
            "type": "string"
          },
          "external_id": {
            "$ref": "#/components/schemas/types/external_id"
          },
          "name": {
            "$ref": "#/components/schemas/types/custody_name"
          },
          "pending_withdrawal_addres": {
            "description": "New withdrawal address that will be used after 'withdrawal_address_change'",
            "type": "string"
          },
          "pending_withdrawal_balance": {
            "$ref": "#/components/schemas/types/currency_amount",
            "description": "Pending balance transferred from trading account to custody account"
          },
          "withdrawal_address": {
            "description": "Address that is used for withdrawals",
            "type": "string"
          },
          "withdrawal_address_change": {
            "description": "UNIX timestamp after when new withdrawal address will be used for withdrawals",
            "type": "number"
          }
        },
        "required": [
          "currency",
          "name",
          "pending_withdrawal_balance"
        ],
        "type": "object"
      },
      "custody_log": {
        "description": "Custody log",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/types/currency_amount"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "request": {
            "description": "Request type",
            "enum": [
              "add_funds",
              "remove_funds",
              "deposit_funds",
              "withdraw_funds"
            ],
            "type": "string"
          },
          "request_id": {
            "description": "Request ID",
            "type": "string"
          },
          "success": {
            "description": "When request was successful set to `true`",
            "type": "boolean"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "currency",
          "request_id",
          "request",
          "success",
          "timestamp"
        ],
        "type": "object"
      },
      "deposit": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/types/currency_address"
          },
          "amount": {
            "$ref": "#/components/schemas/types/currency_amount"
          },
          "clearance_state": {
            "$ref": "#/components/schemas/types/clearance_state"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "note": {
            "type": "string"
          },
          "received_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "refund_transaction_id": {
            "$ref": "#/components/schemas/types/currency_transaction_id"
          },
          "source_address": {
            "$ref": "#/components/schemas/types/currency_address"
          },
          "state": {
            "$ref": "#/components/schemas/types/deposit_state"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/types/currency_transaction_id"
          },
          "updated_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "currency",
          "address",
          "amount",
          "state",
          "transaction_id",
          "received_timestamp",
          "updated_timestamp"
        ],
        "type": "object"
      },
      "expirations": {
        "description": "A map where each key is valid currency (e.g. btc, eth, usdc), and the value is a list of expirations or a map where each key is a valid kind (future or options) and value is a list of expirations from every instrument",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/types/currency_with_any_and_grouped"
          },
          "kind": {
            "$ref": "#/components/schemas/types/kind_future_or_option_with_any"
          }
        },
        "type": "object"
      },
      "get_balance": {
        "properties": {
          "available_withdrawal_funds": {
            "description": "Funds available for withdrawal",
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "custody": {
            "description": "Custody balance",
            "type": "number"
          },
          "encrypted": {
            "description": "The encrypted result json in base64 format. It can be used to verify that values are generated by Deribit.",
            "type": "number"
          },
          "equity": {
            "description": "Equity of the main account",
            "type": "number"
          },
          "pnl": {
            "description": "Profit net loss of the user (total_equity - custody)",
            "type": "number"
          },
          "total_equity": {
            "description": "Equity of the main account + subaccounts",
            "type": "number"
          }
        },
        "required": [
          "currency",
          "equity",
          "available_withdrawal_funds",
          "total_equity",
          "custody",
          "pnl"
        ],
        "type": "object"
      },
      "get_custody_balance": {
        "properties": {
          "available_withdrawal_funds": {
            "description": "Funds available for withdrawal",
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "custody": {
            "description": "Custody balance",
            "type": "number"
          },
          "encrypted": {
            "description": "The encrypted result json in base64 format. It can be used to verify that values are generated by Deribit.",
            "type": "number"
          },
          "equity": {
            "description": "Equity of the main account",
            "type": "number"
          },
          "pnl": {
            "description": "Profit net loss of the user (total_equity - custody)",
            "type": "number"
          },
          "total_equity": {
            "description": "Equity of the main account + subaccounts. Takes into account external equity.",
            "type": "number"
          }
        },
        "required": [
          "currency",
          "equity",
          "available_withdrawal_funds",
          "total_equity",
          "custody",
          "pnl"
        ],
        "type": "object"
      },
      "instrument": {
        "properties": {
          "base_currency": {
            "description": "The underlying currency being traded.",
            "enum": [
              "ADA",
              "ALGO",
              "AVAX",
              "BCH",
              "BNB",
              "BTC",
              "BTCDVOL",
              "BUIDL",
              "DOGE",
              "DOT",
              "ETH",
              "LINK",
              "LTC",
              "NEAR",
              "PAXG",
              "SOL",
              "STETH",
              "TRUMP",
              "TRX",
              "UNI",
              "USDC",
              "USDE",
              "USYC",
              "XRP"
            ],
            "type": "string"
          },
          "block_trade_commission": {
            "description": "Block Trade commission for instrument.",
            "example": 0.0005,
            "type": "number"
          },
          "block_trade_min_trade_amount": {
            "description": "Minimum amount for block trading.",
            "example": 25,
            "type": "number"
          },
          "block_trade_tick_size": {
            "description": "Specifies minimal price change for block trading.",
            "example": 0.01,
            "type": "number"
          },
          "contract_size": {
            "description": "Contract size for instrument.",
            "example": 1,
            "type": "number"
          },
          "counter_currency": {
            "description": "Counter currency for the instrument.",
            "enum": [
              "BTC",
              "ETH",
              "USD",
              "USDC",
              "USDE",
              "USDT"
            ],
            "type": "string"
          },
          "creation_timestamp": {
            "description": "The time when the instrument was first created (milliseconds since the UNIX epoch).",
            "example": 1536569522277,
            "type": "integer"
          },
          "expiration_timestamp": {
            "description": "The time when the instrument will expire (milliseconds since the UNIX epoch).",
            "type": "integer"
          },
          "future_type": {
            "description": "Future type (only for futures)(field is deprecated and will be removed in the future, `instrument_type` should be used instead).",
            "enum": [
              "linear",
              "reversed"
            ],
            "type": "string"
          },
          "instrument_id": {
            "$ref": "#/components/schemas/types/instrument_id"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "instrument_type": {
            "description": "Type of the instrument. `linear` or `reversed`",
            "type": "string"
          },
          "is_active": {
            "description": "Indicates if the instrument can currently be traded.",
            "type": "boolean"
          },
          "kind": {
            "$ref": "#/components/schemas/types/kind"
          },
          "maker_commission": {
            "description": "Maker commission for instrument.",
            "example": 0.0001,
            "type": "number"
          },
          "max_leverage": {
            "description": "Maximal leverage for instrument (only for futures).",
            "example": 100,
            "type": "integer"
          },
          "max_liquidation_commission": {
            "description": "Maximal liquidation trade commission for instrument (only for futures).",
            "example": 0.001,
            "type": "number"
          },
          "min_trade_amount": {
            "description": "Minimum amount for trading. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "example": 0.1,
            "type": "number"
          },
          "option_type": {
            "description": "The option type (only for options).",
            "enum": [
              "call",
              "put"
            ],
            "type": "string"
          },
          "price_index": {
            "$ref": "#/components/schemas/price_index"
          },
          "quote_currency": {
            "description": "The currency in which the instrument prices are quoted.",
            "enum": [
              "BTC",
              "ETH",
              "USD",
              "USDC",
              "USDE",
              "USDT"
            ],
            "type": "string"
          },
          "rfq": {
            "description": "Whether or not RFQ is active on the instrument.",
            "type": "boolean"
          },
          "settlement_currency": {
            "description": "Optional (not added for spot). Settlement currency for the instrument.",
            "enum": [
              "BTC",
              "ETH",
              "USDC"
            ],
            "type": "string"
          },
          "settlement_period": {
            "description": "Optional (not added for spot). The settlement period.",
            "enum": [
              "day",
              "month",
              "week",
              "perpetual"
            ],
            "type": "string"
          },
          "strike": {
            "description": "The strike value (only for options).",
            "type": "number"
          },
          "taker_commission": {
            "description": "Taker commission for instrument.",
            "example": 0.0005,
            "type": "number"
          },
          "tick_size": {
            "description": "Specifies minimal price change and, as follows, the number of decimal places for instrument prices.",
            "example": 0.0001,
            "type": "number"
          },
          "tick_size_steps": {
            "items": {
              "$ref": "#/components/schemas/types/tick_size_step"
            },
            "type": "array"
          }
        },
        "required": [
          "kind",
          "base_currency",
          "quote_currency",
          "min_trade_amount",
          "instrument_name",
          "is_active",
          "settlement_period",
          "creation_timestamp",
          "tick_size",
          "expiration_timestamp",
          "contract_size",
          "price_index",
          "rfq"
        ],
        "type": "object"
      },
      "key_number_pair": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "order": {
        "properties": {
          "advanced": {
            "$ref": "#/components/schemas/types/advanced"
          },
          "amount": {
            "$ref": "#/components/schemas/types/amount"
          },
          "api": {
            "$ref": "#/components/schemas/types/api"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "example": "Example Application",
            "type": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "type": "boolean"
          },
          "average_price": {
            "$ref": "#/components/schemas/types/average_price"
          },
          "block_trade": {
            "$ref": "#/components/schemas/types/block_trade_order"
          },
          "cancel_reason": {
            "$ref": "#/components/schemas/types/cancel_reason"
          },
          "contracts": {
            "$ref": "#/components/schemas/types/contracts"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction"
          },
          "display_amount": {
            "$ref": "#/components/schemas/types/display_amount"
          },
          "filled_amount": {
            "$ref": "#/components/schemas/types/filled_amount"
          },
          "implv": {
            "$ref": "#/components/schemas/types/implv"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "is_liquidation": {
            "description": "Optional (not added for spot). `true` if order was automatically created during liquidation",
            "type": "boolean"
          },
          "is_primary_otoco": {
            "description": "`true` if the order is an order that can trigger an OCO pair, otherwise not present.",
            "type": "boolean"
          },
          "is_rebalance": {
            "description": "Optional (only for spot). `true` if order was automatically created during cross-collateral balance restoration",
            "type": "boolean"
          },
          "is_secondary_oto": {
            "$ref": "#/components/schemas/types/is_secondary_oto"
          },
          "label": {
            "$ref": "#/components/schemas/types/label"
          },
          "last_update_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "type": "boolean"
          },
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "example": true,
            "type": "boolean"
          },
          "mmp_group": {
            "description": "Name of the MMP group supplied in the `private/mass_quote` request.",
            "type": "string"
          },
          "mobile": {
            "$ref": "#/components/schemas/types/mobile"
          },
          "oco_ref": {
            "$ref": "#/components/schemas/types/oco_ref"
          },
          "order_id": {
            "$ref": "#/components/schemas/types/order_id"
          },
          "order_state": {
            "$ref": "#/components/schemas/types/order_state"
          },
          "order_type": {
            "$ref": "#/components/schemas/types/order_type"
          },
          "original_order_type": {
            "$ref": "#/components/schemas/types/original_order_type"
          },
          "oto_order_ids": {
            "description": "The Ids of the orders that will be triggered if the order is filled",
            "items": {
              "$ref": "#/components/schemas/types/order_id",
              "description": "Order Id"
            },
            "type": "array"
          },
          "post_only": {
            "$ref": "#/components/schemas/types/post_only"
          },
          "price": {
            "$ref": "#/components/schemas/types/open_order_price"
          },
          "primary_order_id": {
            "$ref": "#/components/schemas/types/order_id",
            "description": "ID of the order that triggered this order."
          },
          "quote": {
            "description": "If order is a quote. Present only if true.",
            "type": "boolean"
          },
          "quote_id": {
            "description": "The same QuoteID as supplied in the `private/mass_quote` request.",
            "type": "string"
          },
          "quote_set_id": {
            "description": "Identifier of the QuoteSet supplied in the `private/mass_quote` request.",
            "type": "string"
          },
          "reduce_only": {
            "$ref": "#/components/schemas/types/reduce_only"
          },
          "refresh_amount": {
            "$ref": "#/components/schemas/types/refresh_amount"
          },
          "reject_post_only": {
            "$ref": "#/components/schemas/types/reject_post_only"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "type": "boolean"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "type": "boolean"
          },
          "time_in_force": {
            "$ref": "#/components/schemas/types/time_in_force"
          },
          "trigger": {
            "$ref": "#/components/schemas/types/trigger"
          },
          "trigger_fill_condition": {
            "$ref": "#/components/schemas/types/trigger_fill_condition"
          },
          "trigger_offset": {
            "$ref": "#/components/schemas/types/trigger_offset"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "example": "SLIB-370",
            "type": "string"
          },
          "trigger_price": {
            "$ref": "#/components/schemas/types/trigger_price"
          },
          "trigger_reference_price": {
            "$ref": "#/components/schemas/types/trigger_reference_price"
          },
          "triggered": {
            "$ref": "#/components/schemas/types/triggered"
          },
          "usd": {
            "$ref": "#/components/schemas/types/usd"
          },
          "web": {
            "$ref": "#/components/schemas/types/web"
          }
        },
        "required": [
          "order_id",
          "order_state",
          "order_type",
          "time_in_force",
          "instrument",
          "creation_timestamp",
          "last_update_timestamp",
          "direction",
          "price",
          "label",
          "post_only",
          "api"
        ],
        "type": "object"
      },
      "order_id_initial_margin_pair": {
        "properties": {
          "initial_margin": {
            "description": "Initial margin of order",
            "type": "number"
          },
          "initial_margin_currency": {
            "description": "Currency of initial margin",
            "type": "string"
          },
          "order_id": {
            "$ref": "#/components/schemas/types/order_id"
          }
        },
        "required": [
          "order_id",
          "initial_margin"
        ],
        "type": "object"
      },
      "orders": {
        "items": {
          "$ref": "#/components/schemas/order"
        },
        "type": "array"
      },
      "pending_block_trade": {
        "properties": {
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction",
            "description": "Trade direction of the maker"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "price": {
            "$ref": "#/components/schemas/types/price",
            "description": "The price of the trade"
          }
        },
        "required": [
          "instrument_name",
          "direction",
          "price",
          "amount"
        ]
      },
      "portfolio": {
        "properties": {
          "btc": {
            "$ref": "#/components/schemas/currency_portfolio"
          },
          "eth": {
            "$ref": "#/components/schemas/currency_portfolio"
          }
        },
        "required": [
          "btc",
          "eth"
        ],
        "type": "object"
      },
      "position": {
        "properties": {
          "average_price": {
            "description": "Average price of trades that built this position",
            "type": "number"
          },
          "average_price_usd": {
            "description": "Only for options, average price in USD",
            "type": "number"
          },
          "delta": {
            "description": "Delta parameter",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/types/position_direction"
          },
          "floating_profit_loss": {
            "description": "Floating profit or loss",
            "type": "number"
          },
          "floating_profit_loss_usd": {
            "description": "Only for options, floating profit or loss in USD",
            "type": "number"
          },
          "gamma": {
            "description": "Only for options, Gamma parameter",
            "type": "number"
          },
          "index_price": {
            "description": "Current index price",
            "type": "number"
          },
          "initial_margin": {
            "description": "Initial margin",
            "type": "number"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "interest_value": {
            "description": "Value used to calculate `realized_funding` (perpetual only)",
            "type": "number"
          },
          "kind": {
            "$ref": "#/components/schemas/types/kind"
          },
          "leverage": {
            "description": "Current available leverage for future position",
            "type": "integer"
          },
          "maintenance_margin": {
            "description": "Maintenance margin",
            "type": "number"
          },
          "mark_price": {
            "description": "Current mark price for position's instrument",
            "type": "number"
          },
          "realized_funding": {
            "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
            "type": "number"
          },
          "realized_profit_loss": {
            "description": "Realized profit or loss",
            "type": "number"
          },
          "settlement_price": {
            "description": "Optional (not added for spot). Last settlement price for position's instrument 0 if instrument wasn't settled yet",
            "type": "number"
          },
          "size": {
            "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
            "type": "number"
          },
          "size_currency": {
            "description": "Only for futures, position size in base currency",
            "type": "number"
          },
          "theta": {
            "description": "Only for options, Theta parameter",
            "type": "number"
          },
          "total_profit_loss": {
            "description": "Profit or loss from position",
            "type": "number"
          },
          "vega": {
            "description": "Only for options, Vega parameter",
            "type": "number"
          }
        },
        "required": [
          "instrument_name",
          "kind",
          "average_price",
          "direction",
          "mark_price",
          "delta",
          "index_price",
          "initial_margin",
          "maintenance_margin",
          "settlement_price",
          "total_profit_loss",
          "floating_profit_loss",
          "relized_profit_loss",
          "size"
        ],
        "type": "object"
      },
      "position_move": {
        "properties": {
          "trades": {
            "items": {
              "$ref": "#/components/schemas/position_move_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "trades"
        ],
        "type": "object"
      },
      "position_move_trade": {
        "properties": {
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction",
            "description": "Trade direction from source perspective"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "price": {
            "$ref": "#/components/schemas/types/price",
            "description": "The price of the trade"
          },
          "source_uid": {
            "description": "Trade source uid",
            "type": "integer"
          },
          "target_uid": {
            "description": "Trade target uid",
            "type": "integer"
          }
        },
        "required": [
          "instrument_name",
          "direction",
          "price",
          "amount"
        ]
      },
      "position_with_elp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/position"
          },
          {
            "type": "object",
            "properties": {
              "estimated_liquidation_price": {
                "description": "Estimated liquidation price, added only for futures, for users with `segregated_sm` margin model",
                "type": "number"
              },
              "open_orders_margin": {
                "description": "Open orders margin",
                "type": "number"
              }
            },
            "required": [
              "open_orders_margin"
            ]
          }
        ]
      },
      "price_index": {
        "description": "Name of price index that is used for this instrument",
        "example": "btc_usdc",
        "type": "string"
      },
      "public_trade": {
        "properties": {
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "block_trade_id": {
            "$ref": "#/components/schemas/types/block_trade_id_in_result"
          },
          "block_trade_leg_count": {
            "$ref": "#/components/schemas/types/block_trade_leg_count"
          },
          "combo_id": {
            "description": "Optional field containing combo instrument name if the trade is a combo trade",
            "type": "string"
          },
          "combo_trade_id": {
            "description": "Optional field containing combo trade identifier if the trade is a combo trade",
            "type": "number"
          },
          "contracts": {
            "description": "Trade size in contract units (optional, may be absent in historical trades)",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction",
            "description": "Trade direction of the taker"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "type": "number"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "type": "number"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "enum": [
              "M",
              "T",
              "MT"
            ],
            "type": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "type": "number"
          },
          "price": {
            "$ref": "#/components/schemas/types/price",
            "description": "The price of the trade"
          },
          "tick_direction": {
            "$ref": "#/components/schemas/types/tick_direction"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/trade_timestamp"
          },
          "trade_id": {
            "$ref": "#/components/schemas/types/trade_id"
          },
          "trade_seq": {
            "$ref": "#/components/schemas/types/trade_seq"
          }
        },
        "required": [
          "trade_id",
          "instrument_name",
          "timestamp",
          "trade_seq",
          "direction",
          "tick_direction",
          "index_price",
          "price",
          "amount",
          "mark_price"
        ]
      },
      "rfq": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/types/amount"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "last_rfq_timestamp": {
            "$ref": "#/components/schemas/types/last_rfq_timestamp"
          },
          "side": {
            "$ref": "#/components/schemas/types/side"
          },
          "traded_volume": {
            "description": "Volume traded since last RFQ",
            "type": "number"
          }
        },
        "required": [
          "last_rfq_timestamp"
        ],
        "type": "object"
      },
      "security_key": {
        "properties": {
          "assignments": {
            "$ref": "#/components/schemas/types/security_key_assignments"
          },
          "id": {
            "$ref": "#/components/schemas/types/security_key_id"
          },
          "last_used": {
            "$ref": "#/components/schemas/types/security_key_last_used"
          },
          "name": {
            "$ref": "#/components/schemas/types/security_key_name"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/security_key_timestamp"
          },
          "type": {
            "$ref": "#/components/schemas/types/security_key_type"
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "assignments",
          "timestamp",
          "last_used"
        ],
        "type": "object"
      },
      "settlement": {
        "properties": {
          "funded": {
            "description": "funded amount (bankruptcy only)",
            "example": 0,
            "type": "number"
          },
          "funding": {
            "description": "funding (in base currency ; settlement for perpetual product only)",
            "example": -2.511e-06,
            "type": "number"
          },
          "index_price": {
            "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
            "example": 11008.37,
            "type": "number"
          },
          "instrument_name": {
            "description": "instrument name (settlement and delivery only)",
            "example": "BTC-30MAR18",
            "type": "string"
          },
          "mark_price": {
            "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
            "example": 11000,
            "type": "number"
          },
          "position": {
            "description": "position size (in quote currency; settlement and delivery only)",
            "example": 1000,
            "type": "number"
          },
          "profit_loss": {
            "description": "profit and loss (in base currency; settlement and delivery only)",
            "example": 0,
            "type": "number"
          },
          "session_bankruptcy": {
            "description": "value of session bankruptcy (in base currency; bankruptcy only)",
            "example": 0.001160788,
            "type": "number"
          },
          "session_profit_loss": {
            "description": "total value of session profit and losses (in base currency)",
            "example": 0.001160788,
            "type": "number"
          },
          "session_tax": {
            "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
            "example": -0.001160788,
            "type": "number"
          },
          "session_tax_rate": {
            "description": "rate of paid taxes/fees (in base currency; bankruptcy only)",
            "example": 0.000103333,
            "type": "number"
          },
          "socialized": {
            "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
            "example": -0.001160788,
            "type": "number"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "type": {
            "$ref": "#/components/schemas/types/settlement_type"
          }
        },
        "required": [
          "type",
          "timestamp",
          "session_profit_loss",
          "position",
          "instrument_name",
          "index_price",
          "funding"
        ],
        "type": "object"
      },
      "trades_volumes": {
        "properties": {
          "calls_volume": {
            "description": "Total 24h trade volume for call options.",
            "example": 20.1,
            "type": "number"
          },
          "calls_volume_30d": {
            "description": "Total 30d trade volume for call options.",
            "example": 547.3,
            "type": "number"
          },
          "calls_volume_7d": {
            "description": "Total 7d trade volume for call options.",
            "example": 75.6,
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "futures_volume": {
            "description": "Total 24h trade volume for futures.",
            "example": 30.5178,
            "type": "number"
          },
          "futures_volume_30d": {
            "description": "Total 30d trade volume for futures.",
            "example": 998.2128,
            "type": "number"
          },
          "futures_volume_7d": {
            "description": "Total 7d trade volume for futures.",
            "example": 213.8841,
            "type": "number"
          },
          "puts_volume": {
            "description": "Total 24h trade volume for put options.",
            "example": 60.2,
            "type": "number"
          },
          "puts_volume_30d": {
            "description": "Total 30d trade volume for put options.",
            "example": 785.5,
            "type": "number"
          },
          "puts_volume_7d": {
            "description": "Total 7d trade volume for put options.",
            "example": 356.9,
            "type": "number"
          },
          "spot_volume": {
            "description": "Total 24h trade for spot.",
            "example": 11.6,
            "type": "number"
          },
          "spot_volume_30d": {
            "description": "Total 30d trade for spot.",
            "example": 310.5,
            "type": "number"
          },
          "spot_volume_7d": {
            "description": "Total 7d trade for spot.",
            "example": 64.8,
            "type": "number"
          }
        },
        "required": [
          "currency",
          "futures_volume",
          "puts_volume",
          "calls_volume"
        ],
        "type": "object"
      },
      "transaction_log": {
        "properties": {
          "amount": {
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "balance": {
            "description": "Cash balance after the transaction",
            "type": "number"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "cashflow": {
            "description": "For futures and perpetual contracts: Realized session PNL (since last settlement). For options: the amount paid or received for the options traded.",
            "type": "number"
          },
          "change": {
            "description": "Change in cash balance. For trades: fees and options premium paid/received. For settlement: Futures session PNL and perpetual session funding.",
            "type": "number"
          },
          "commission": {
            "$ref": "#/components/schemas/types/commission"
          },
          "contracts": {
            "$ref": "#/components/schemas/types/contracts"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "equity": {
            "description": "Updated equity value after the transaction",
            "type": "number"
          },
          "fee_role": {
            "$ref": "#/components/schemas/types/fee_role"
          },
          "id": {
            "$ref": "#/components/schemas/types/id"
          },
          "index_price": {
            "description": "The index price for the instrument during the delivery",
            "type": "number"
          },
          "info": {
            "description": "Additional information regarding transaction. Strongly dependent on the log entry type",
            "type": "object"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "interest_pl": {
            "description": "Actual funding rate of trades and settlements on perpetual instruments",
            "type": "number"
          },
          "ip": {
            "description": "The IP address from which the trade was initiated",
            "type": "string"
          },
          "mark_price": {
            "description": "Market price during the trade",
            "type": "number"
          },
          "order_id": {
            "$ref": "#/components/schemas/types/order_id"
          },
          "position": {
            "description": "Updated position size after the transaction",
            "type": "number"
          },
          "price": {
            "description": "Settlement/delivery price or the price level of the traded contracts",
            "type": "number"
          },
          "price_currency": {
            "description": "Currency symbol associated with the `price` field value",
            "type": "string"
          },
          "profit_as_cashflow": {
            "description": "Indicator informing whether the cashflow is waiting for settlement or not",
            "type": "boolean"
          },
          "session_rpl": {
            "$ref": "#/components/schemas/types/rpl"
          },
          "session_upl": {
            "$ref": "#/components/schemas/types/upl"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument during the delivery",
            "type": "number"
          },
          "side": {
            "description": "One of: `short` or `long` in case of settlements, `close sell` or `close buy` in case of deliveries, `open sell`, `open buy`, `close sell`, `close buy` in case of trades",
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "total_interest_pl": {
            "description": "Total session funding rate",
            "type": "number"
          },
          "trade_id": {
            "$ref": "#/components/schemas/types/trade_id"
          },
          "type": {
            "description": "Transaction category/type. The most common are: `trade`, `deposit`, `withdrawal`, `settlement`, `delivery`, `transfer`, `swap`, `correction`. New types can be added any time in the future",
            "type": "string"
          },
          "user_id": {
            "$ref": "#/components/schemas/types/user_id"
          },
          "user_role": {
            "$ref": "#/components/schemas/types/role"
          },
          "user_seq": {
            "description": "Sequential identifier of user transaction",
            "type": "integer"
          },
          "username": {
            "$ref": "#/components/schemas/types/username"
          }
        },
        "required": [
          "id",
          "currency",
          "timestamp",
          "user_id",
          "commission",
          "cashflow",
          "balance",
          "change",
          "user_seq",
          "type"
        ],
        "type": "object"
      },
      "transfer_item": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/types/currency_amount"
          },
          "created_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "direction": {
            "$ref": "#/components/schemas/types/transfer_direction"
          },
          "id": {
            "$ref": "#/components/schemas/types/transfer_id"
          },
          "other_side": {
            "$ref": "#/components/schemas/types/transfer_other_side"
          },
          "state": {
            "$ref": "#/components/schemas/types/transfer_state"
          },
          "type": {
            "$ref": "#/components/schemas/types/transfer_type"
          },
          "updated_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "currency",
          "id",
          "type",
          "amount",
          "state",
          "other_side_type",
          "other_side",
          "updated_timestamp",
          "created_timestamp"
        ],
        "type": "object"
      },
      "trigger_order_history_record": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/types/amount"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "is_secondary_oto": {
            "$ref": "#/components/schemas/types/is_secondary_oto"
          },
          "label": {
            "$ref": "#/components/schemas/types/label_presentation"
          },
          "last_update_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "oco_ref": {
            "$ref": "#/components/schemas/types/oco_ref"
          },
          "order_id": {
            "$ref": "#/components/schemas/types/order_id"
          },
          "order_state": {
            "$ref": "#/components/schemas/types/order_state_stop"
          },
          "order_type": {
            "description": "Requested order type: `\"limit` or `\"market\"`",
            "enum": [
              "limit",
              "market"
            ],
            "type": "string"
          },
          "post_only": {
            "$ref": "#/components/schemas/types/post_only"
          },
          "price": {
            "$ref": "#/components/schemas/types/price"
          },
          "reduce_only": {
            "$ref": "#/components/schemas/types/reduce_only"
          },
          "request": {
            "description": "Type of last request performed on the trigger order by user or system. `\"cancel\"` - when order was cancelled, `\"trigger:order\"` - when trigger order spawned market or limit order after being triggered",
            "example": "trigger:order",
            "type": "string"
          },
          "source": {
            "description": "Source of the order that is linked to the trigger order.",
            "example": "api",
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "trigger": {
            "$ref": "#/components/schemas/types/trigger"
          },
          "trigger_offset": {
            "$ref": "#/components/schemas/types/trigger_offset"
          },
          "trigger_order_id": {
            "description": "Id of the user order used for the trigger-order reference before triggering",
            "example": "SLTB-187015",
            "type": "string"
          },
          "trigger_price": {
            "$ref": "#/components/schemas/types/trigger_price"
          }
        },
        "required": [
          "trigger",
          "timestamp",
          "trigger_price",
          "trigger_order_id",
          "order_state",
          "request",
          "post_only",
          "order_type",
          "price",
          "order_id",
          "offset",
          "instrument_name",
          "amount",
          "direction",
          "reduce_only"
        ],
        "type": "object"
      },
      "types": {
        "additional_reserve": {
          "description": "The account's balance reserved in other orders",
          "example": 0.3,
          "type": "number"
        },
        "address_beneficiary_item": {
          "properties": {
            "address": {
              "$ref": "#/components/schemas/types/currency_address"
            },
            "agreed": {
              "$ref": "#/components/schemas/types/agree_to_share_with_3rd_party"
            },
            "beneficiary_address": {
              "$ref": "#/components/schemas/types/beneficiary_address"
            },
            "beneficiary_company_name": {
              "$ref": "#/components/schemas/types/beneficiary_company_name"
            },
            "beneficiary_first_name": {
              "$ref": "#/components/schemas/types/beneficiary_first_name"
            },
            "beneficiary_last_name": {
              "$ref": "#/components/schemas/types/beneficiary_last_name"
            },
            "beneficiary_vasp_did": {
              "$ref": "#/components/schemas/types/beneficiary_vasp_did"
            },
            "beneficiary_vasp_name": {
              "$ref": "#/components/schemas/types/beneficiary_vasp_name"
            },
            "beneficiary_vasp_website": {
              "$ref": "#/components/schemas/types/beneficiary_vasp_website"
            },
            "created": {
              "$ref": "#/components/schemas/types/timestamp"
            },
            "currency": {
              "$ref": "#/components/schemas/types/currency"
            },
            "personal": {
              "$ref": "#/components/schemas/types/personal_wallet"
            },
            "tag": {
              "description": "Tag for XRP addresses (optional)",
              "nullable": true,
              "type": "string"
            },
            "unhosted": {
              "$ref": "#/components/schemas/types/unhosted_wallet"
            },
            "updated": {
              "$ref": "#/components/schemas/types/timestamp"
            },
            "user_id": {
              "$ref": "#/components/schemas/types/user_id"
            }
          },
          "required": [
            "currency",
            "address",
            "user_id",
            "agreed",
            "personal",
            "unhosted",
            "beneficiary_vasp_name",
            "beneficiary_vasp_did",
            "beneficiary_address",
            "created",
            "updated"
          ],
          "type": "object"
        },
        "address_book_type": {
          "description": "Address book type",
          "enum": [
            "transfer",
            "withdrawal",
            "deposit_source"
          ],
          "type": "string"
        },
        "address_book_type_without_deposit_source": {
          "description": "Address book type",
          "enum": [
            "transfer",
            "withdrawal"
          ],
          "type": "string"
        },
        "address_info_required": {
          "description": "Signalises that addition information regarding the beneficiary of the address is required",
          "example": true,
          "type": "boolean"
        },
        "address_label": {
          "description": "Label of the address book entry",
          "example": "Main address",
          "type": "string"
        },
        "advanced": {
          "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).\n",
          "enum": [
            "usd",
            "implv"
          ],
          "type": "string"
        },
        "agree_to_share_with_3rd_party": {
          "description": "Indicates that the user agreed to shared provided information with 3rd parties",
          "example": true,
          "type": "boolean"
        },
        "amount": {
          "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
          "type": "number"
        },
        "api": {
          "description": "`true` if created with API",
          "type": "boolean"
        },
        "api_key_default": {
          "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
          "example": false,
          "type": "boolean"
        },
        "api_key_enabled": {
          "description": "Informs whether api key is enabled and can be used for authentication",
          "example": true,
          "type": "boolean"
        },
        "api_key_features": {
          "description": "List of enabled advanced on-key features. Available options:<br> - `restricted_block_trades`: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key<br> - `block_trade_approval`: Block trades created using this API key require additional user approval.  Methods that use `block_rfq` scope are not affected by Block Trade approval feature<br> ",
          "items": {
            "description": "Name of the feature",
            "type": "string"
          },
          "type": "array"
        },
        "api_key_name": {
          "description": "Api key name that can be displayed in transaction log",
          "example": "TestName",
          "type": "string"
        },
        "api_limits": {
          "description": "Returned object is described in [separate document](https://support.deribit.com/hc/en-us/articles/25944617523357-Rate-Limits).",
          "type": "object"
        },
        "ask_iv": {
          "description": "(Only for option) implied volatility for best ask",
          "type": "number"
        },
        "asks": {
          "description": "List of asks",
          "items": {
            "$ref": "#/components/schemas/types/price_level"
          },
          "type": "array"
        },
        "average_price": {
          "description": "Average fill price of the order",
          "type": "number"
        },
        "beneficiary_address": {
          "description": "Geographical address of the beneficiary",
          "example": "NL, Amsterdam, Street, 1",
          "type": "string"
        },
        "beneficiary_company_name": {
          "description": "Company name of the beneficiary (if beneficiary is a company)",
          "example": "Company Name",
          "type": "string"
        },
        "beneficiary_first_name": {
          "description": "First name of the beneficiary (if beneficiary is a person)",
          "example": "John",
          "type": "string"
        },
        "beneficiary_last_name": {
          "description": "Last name of the beneficiary (if beneficiary is a person)",
          "example": "Doe",
          "type": "string"
        },
        "beneficiary_vasp_did": {
          "description": "DID of beneficiary VASP",
          "example": "did:example:123456789abcdefghi",
          "type": "string"
        },
        "beneficiary_vasp_name": {
          "description": "Name of beneficiary VASP",
          "example": "Money`s Gone",
          "type": "string"
        },
        "beneficiary_vasp_website": {
          "description": "Website of the beneficiary VASP",
          "type": "string"
        },
        "best_ask_amount": {
          "description": "It represents the requested order size of all best asks",
          "nullable": true,
          "type": "number"
        },
        "best_ask_price": {
          "description": "The current best ask price, `null` if there aren't any asks",
          "nullable": true,
          "type": "number"
        },
        "best_bid_amount": {
          "description": "It represents the requested order size of all best bids",
          "nullable": true,
          "type": "number"
        },
        "best_bid_price": {
          "description": "The current best bid price, `null` if there aren't any bids",
          "nullable": true,
          "type": "number"
        },
        "bid_iv": {
          "description": "(Only for option) implied volatility for best bid",
          "type": "number"
        },
        "bids": {
          "description": "List of bids",
          "items": {
            "$ref": "#/components/schemas/types/price_level"
          },
          "type": "array"
        },
        "block_rfq": {
          "properties": {
            "amount": {
              "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
              "type": "number"
            },
            "app_name": {
              "description": "The name of the application that created the Block RFQ on behalf of the user (optional, visible only to taker).",
              "example": "Example Application",
              "type": "string"
            },
            "asks": {
              "$ref": "#/components/schemas/types/quote_asks"
            },
            "bids": {
              "$ref": "#/components/schemas/types/quote_bids"
            },
            "block_rfq_id": {
              "description": "ID of the Block RFQ",
              "type": "integer"
            },
            "combo_id": {
              "$ref": "#/components/schemas/types/combo_id"
            },
            "creation_timestamp": {
              "description": "The timestamp when Block RFQ was created (milliseconds since the Unix epoch)",
              "example": 1536569522277,
              "type": "integer"
            },
            "disclosed": {
              "description": "Indicates whether the RFQ was created as non-anonymous, meaning taker and maker aliases are visible to counterparties.",
              "type": "boolean"
            },
            "expiration_timestamp": {
              "description": "The timestamp when the Block RFQ will expire (milliseconds since the UNIX epoch)",
              "example": 1536569522277,
              "type": "integer"
            },
            "hedge": {
              "$ref": "#/components/schemas/types/block_rfq_hedge_leg"
            },
            "included_in_taker_rating": {
              "description": "Indicates whether the RFQ is included in the taker's rating calculation. Present only for closed RFQs created by the requesting taker.",
              "type": "boolean"
            },
            "index_prices": {
              "items": {
                "description": "A list of index prices for the underlying instrument(s) at the time of trade execution.",
                "type": "number"
              },
              "type": "array"
            },
            "label": {
              "description": "User defined label for the Block RFQ (maximum 64 characters)",
              "type": "string"
            },
            "legs": {
              "$ref": "#/components/schemas/types/block_rfq_legs"
            },
            "makers": {
              "items": {
                "description": "List of targeted Block RFQ makers",
                "type": "string"
              },
              "type": "array"
            },
            "mark_price": {
              "$ref": "#/components/schemas/types/mark_price"
            },
            "min_trade_amount": {
              "description": "Minimum amount for trading",
              "type": "number"
            },
            "role": {
              "description": "Role of the user in Block RFQ",
              "enum": [
                "taker",
                "maker"
              ],
              "type": "string"
            },
            "state": {
              "description": "State of the Block RFQ",
              "enum": [
                "open",
                "filled",
                "cancelled",
                "expired"
              ],
              "type": "string"
            },
            "taker": {
              "description": "Taker alias. Present only when `disclosed` is `true`.",
              "example": "TAKER1",
              "type": "string"
            },
            "taker_rating": {
              "description": "Rating of the taker",
              "type": "string"
            },
            "trade_allocations": {
              "$ref": "#/components/schemas/types/trade_allocations",
              "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts. The taker can also allocate to himself. Visible only to the taker."
            },
            "trade_trigger": {
              "$ref": "#/components/schemas/types/trade_trigger",
              "description": "Present only if a trade trigger was placed by the taker and only visible to taker. Only for cases: `cancelled` (contains the reason for cancellation) and `untriggered` (contains the information about the trade trigger)."
            },
            "trades": {
              "items": {
                "properties": {
                  "amount": {
                    "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                    "type": "number"
                  },
                  "direction": {
                    "$ref": "#/components/schemas/types/direction"
                  },
                  "hedge_amount": {
                    "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                    "type": "number"
                  },
                  "maker": {
                    "description": "Alias of the maker (optional)",
                    "type": "string"
                  },
                  "price": {
                    "$ref": "#/components/schemas/types/price"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "block_rfq_currency": {
          "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
          "enum": [
            "BTC",
            "ETH",
            "USDC",
            "USDT",
            "any"
          ],
          "type": "string"
        },
        "block_rfq_for_maker": {
          "properties": {
            "amount": {
              "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
              "type": "number"
            },
            "block_rfq_id": {
              "description": "ID of the Block RFQ",
              "type": "integer"
            },
            "combo_id": {
              "$ref": "#/components/schemas/types/combo_id"
            },
            "creation_timestamp": {
              "description": "The timestamp when Block RFQ was created (milliseconds since the Unix epoch)",
              "example": 1536569522277,
              "type": "integer"
            },
            "disclosed": {
              "description": "Indicates whether the RFQ was created as non-anonymous, meaning taker and maker aliases are visible to counterparties.",
              "type": "boolean"
            },
            "expiration_timestamp": {
              "description": "The timestamp when the Block RFQ will expire (milliseconds since the UNIX epoch)",
              "example": 1536569522277,
              "type": "integer"
            },
            "hedge": {
              "$ref": "#/components/schemas/types/block_rfq_hedge_leg"
            },
            "included_in_taker_rating": {
              "description": "Indicates whether the RFQ is included in the taker's rating calculation. Present only for closed RFQs created by the requesting taker.",
              "type": "boolean"
            },
            "index_prices": {
              "items": {
                "description": "A list of index prices for the underlying instrument(s) at the time of trade execution.",
                "type": "number"
              },
              "type": "array"
            },
            "legs": {
              "$ref": "#/components/schemas/types/block_rfq_legs"
            },
            "min_trade_amount": {
              "description": "Minimum amount for trading",
              "type": "number"
            },
            "role": {
              "description": "Role of the user in Block RFQ",
              "enum": [
                "taker",
                "maker"
              ],
              "type": "string"
            },
            "state": {
              "description": "State of the Block RFQ",
              "enum": [
                "open",
                "filled",
                "cancelled",
                "expired"
              ],
              "type": "string"
            },
            "taker": {
              "description": "Taker alias. Present only when `disclosed` is `true`.",
              "example": "TAKER1",
              "type": "string"
            },
            "taker_rating": {
              "description": "Rating of the taker",
              "type": "string"
            },
            "trades": {
              "items": {
                "properties": {
                  "amount": {
                    "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                    "type": "number"
                  },
                  "direction": {
                    "$ref": "#/components/schemas/types/direction"
                  },
                  "hedge_amount": {
                    "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                    "type": "number"
                  },
                  "maker": {
                    "description": "Alias of the maker (optional)",
                    "type": "string"
                  },
                  "price": {
                    "$ref": "#/components/schemas/types/price"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "block_rfq_hedge_leg": {
          "items": null,
          "properties": {
            "amount": {
              "description": "It represents the requested hedge leg size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
              "type": "integer"
            },
            "direction": {
              "$ref": "#/components/schemas/types/direction"
            },
            "instrument_name": {
              "$ref": "#/components/schemas/types/instrument_name"
            },
            "price": {
              "description": "Price for a hedge leg",
              "type": "number"
            }
          },
          "type": "object"
        },
        "block_rfq_legs": {
          "items": {
            "properties": {
              "direction": {
                "$ref": "#/components/schemas/types/direction"
              },
              "instrument_name": {
                "$ref": "#/components/schemas/types/instrument_name"
              },
              "ratio": {
                "description": "Ratio of amount between legs",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "block_rfq_quote": {
          "properties": {
            "amount": {
              "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
              "type": "number"
            },
            "app_name": {
              "description": "The name of the application that placed the quote on behalf of the user (optional).",
              "example": "Example Application",
              "type": "string"
            },
            "block_rfq_id": {
              "description": "ID of the Block RFQ",
              "type": "integer"
            },
            "block_rfq_quote_id": {
              "description": "ID of the Block RFQ quote",
              "type": "integer"
            },
            "creation_timestamp": {
              "description": "The timestamp when quote was created (milliseconds since the Unix epoch)",
              "example": 1536569522277,
              "type": "integer"
            },
            "direction": {
              "$ref": "#/components/schemas/types/quote_direction"
            },
            "execution_instruction": {
              "$ref": "#/components/schemas/types/execution_instruction"
            },
            "filled_amount": {
              "$ref": "#/components/schemas/types/filled_amount_quote"
            },
            "hedge": {
              "$ref": "#/components/schemas/types/block_rfq_hedge_leg"
            },
            "label": {
              "description": "User defined label for the quote (maximum 64 characters)",
              "type": "string"
            },
            "last_update_timestamp": {
              "description": "Timestamp of the last update of the quote (milliseconds since the UNIX epoch)",
              "example": 1536569522277,
              "type": "integer"
            },
            "legs": {
              "$ref": "#/components/schemas/types/leg_structure"
            },
            "price": {
              "description": "Price of a quote",
              "type": "number"
            },
            "quote_state": {
              "description": "State of the quote",
              "type": "string"
            },
            "quote_state_reason": {
              "description": "Reason of quote cancellation",
              "type": "string"
            },
            "replaced": {
              "$ref": "#/components/schemas/types/replaced_quote"
            }
          },
          "type": "object"
        },
        "block_rfq_time_in_force": {
          "description": "Block RFQ time in force: `\"fill_or_kill\"` or `\"good_til_cancelled\"`",
          "enum": [
            "fill_or_kill",
            "good_til_cancelled"
          ],
          "type": "string"
        },
        "block_rfq_trade_tape_continuation": {
          "description": "Continuation token for pagination. `NULL` when no continuation. Consists of `timestamp` and `block_rfq_id`.",
          "example": "1738050297271:103",
          "type": "string"
        },
        "block_trade_id": {
          "description": "Block trade id",
          "example": "154",
          "type": "string"
        },
        "block_trade_id_in_result": {
          "description": "Block trade id - when trade was part of a block trade",
          "example": "154",
          "type": "string"
        },
        "block_trade_leg_count": {
          "description": "Block trade leg count - when trade was part of a block trade",
          "example": 3,
          "type": "integer"
        },
        "block_trade_order": {
          "description": "`true` if order made from block_trade trade, added only in that case.",
          "example": true,
          "type": "boolean"
        },
        "block_trade_signature": {
          "description": "Signature of block trade<br>It is valid only for 5 minutes around given timestamp",
          "example": "1565173369982.1M9tO0Q-.z9n9WyZUU5op9pEz6Jtd2CI71QxQMMsCZAexnIfK9HQRT1pKH3clxeIbY7Bqm-yMcWIoE3IfCDPW5VEdiN-6oS0YkKUyXPD500MUf3ULKhfkmH81EZs",
          "type": "string"
        },
        "book_state": {
          "description": "The state of the order book. Possible values are `open` and `closed`.",
          "enum": [
            "open",
            "closed"
          ],
          "type": "string"
        },
        "business_registration_number": {
          "description": "Registration number of the company",
          "example": "2021/135466541/07",
          "type": "string"
        },
        "cancel_reason": {
          "description": "Enumerated reason behind cancel `\"user_request\"`, `\"autoliquidation\"`, `\"cancel_on_disconnect\"`, `\"risk_mitigation\"`, `\"pme_risk_reduction\"` (portfolio margining risk reduction), `\"pme_account_locked\"` (portfolio margining account locked per currency), `\"position_locked\"`, `\"mmp_trigger\"` (market maker protection), `\"mmp_config_curtailment\"` (market maker configured quantity decreased), `\"edit_post_only_reject\"` (cancelled on edit because of `reject_post_only` setting), `\"oco_other_closed\"` (the oco order linked to this order was closed), `\"oto_primary_closed\"` (the oto primary order that was going to trigger this order was cancelled), `\"settlement\"` (closed because of a settlement)",
          "enum": [
            "user_request",
            "autoliquidation",
            "cancel_on_disconnect",
            "risk_mitigation",
            "pme_risk_reduction",
            "pme_account_locked",
            "position_locked",
            "mmp_trigger",
            "mmp_config_curtailment",
            "edit_post_only_reject",
            "oco_other_closed",
            "oto_primary_closed",
            "settlement"
          ],
          "type": "string"
        },
        "chart_volume": {
          "description": "// todo",
          "type": "number"
        },
        "clearance_state": {
          "description": "Clearance state, allowed values : `in_progress`, `pending_admin_decision`, `pending_user_input`, `success`, `failed`, `cancelled`, `refund_initiated`, `refunded`",
          "enum": [
            "in_progress",
            "pending_admin_decision",
            "pending_user_input",
            "success",
            "failed",
            "cancelled",
            "refund_initiated",
            "refunded"
          ],
          "type": "string"
        },
        "client_id": {
          "description": "Client identifier used for authentication",
          "example": "IY2D68DS",
          "type": "string"
        },
        "client_secret": {
          "description": "Client secret or MD5 fingerprint of public key used for authentication",
          "example": "P9Z_c73KaBPwpoTVfsXzehAhjhdJn5kM7Zlz_hhDhE8",
          "type": "string"
        },
        "cod_scope": {
          "description": "Informs if Cancel on Disconnect was checked for the current connection or the account",
          "enum": [
            "connection",
            "account"
          ],
          "type": "string"
        },
        "combo_id": {
          "description": "Unique combo identifier",
          "example": "BTC-FS-31DEC21-PERP",
          "type": "string"
        },
        "combo_leg_amount": {
          "description": "Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from",
          "example": -1,
          "type": "integer"
        },
        "combo_state": {
          "description": "Combo state: `\"rfq\"`, `\"active\"`, \"`inactive`\"",
          "enum": [
            "rfq",
            "active",
            "inactive"
          ],
          "type": "string"
        },
        "commission": {
          "description": "Commission paid so far (in base currency)",
          "type": "number"
        },
        "continuation": {
          "description": "Continuation token for pagination.",
          "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT",
          "type": "string"
        },
        "continuation_with_null": {
          "description": "Continuation token for pagination. `NULL` when no continuation.",
          "example": 429946,
          "type": "integer"
        },
        "contract_size": {
          "description": "Contract size, for futures in USD, for options in base currency of the instrument (BTC, ETH, ...)",
          "example": 10,
          "type": "number"
        },
        "contracts": {
          "description": "It represents the order size in contract units. (Optional, may be absent in historical data).",
          "type": "number"
        },
        "currency": {
          "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
          "enum": [
            "BTC",
            "ETH",
            "USDC",
            "USDT",
            "EURR"
          ],
          "type": "string"
        },
        "currency_address": {
          "description": "Address in proper format for currency",
          "example": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
          "type": "string"
        },
        "currency_address_type": {
          "description": "Address type acording to Notabene",
          "enum": [
            "HOSTED",
            "UNHOSTED",
            "UNKNOWN"
          ],
          "example": "HOSTED",
          "type": "string"
        },
        "currency_amount": {
          "description": "Amount of funds in given currency",
          "example": 1.0,
          "type": "number"
        },
        "currency_pair": {
          "description": "Currency pair: `\"btc_usd\"` or `\"eth_usd\"`",
          "enum": [
            "btc_usd",
            "eth_usd"
          ],
          "type": "string"
        },
        "currency_transaction_id": {
          "description": "Transaction id in proper format for currency, `null` if id is not available",
          "example": "1b1fb5568515e2b79503501e3d3680b2d0838d5dfc2d15a04eb8cd9fbbe0b572",
          "nullable": true,
          "type": "string"
        },
        "currency_with_any": {
          "description": "Currency name or `\"any\"` if don't care",
          "enum": [
            "BTC",
            "ETH",
            "USDC",
            "USDT",
            "EURR",
            "any"
          ],
          "type": "string"
        },
        "currency_with_any_and_grouped": {
          "description": "Currency name or `\"any\"` if don't care or `\"grouped\"` if grouped by currencies",
          "enum": [
            "BTC",
            "ETH",
            "USDC",
            "SOL",
            "USDT",
            "EURR",
            "XRP",
            "STETH",
            "USYC",
            "PAXG",
            "BNB",
            "USDE",
            "any",
            "grouped"
          ],
          "type": "string"
        },
        "currency_with_any_and_list": {
          "description": "The currency symbol, list of currency symbols or `\"any\"` for all",
          "type": "string or array of strings"
        },
        "current_funding": {
          "description": "Current funding (perpetual only)",
          "type": "number"
        },
        "custody_name": {
          "description": "Custody name",
          "enum": [
            "copper",
            "cobo"
          ],
          "type": "string"
        },
        "custody_settlement": {
          "properties": {
            "completed_at": {
              "description": "Timestamp of when the settlement was completed (if applicable)",
              "example": 1736714000000,
              "type": "integer"
            },
            "created_at": {
              "description": "The timestamp when the settlement was created (milliseconds since the Unix epoch)",
              "example": 1736712919000,
              "type": "integer"
            },
            "failed_at": {
              "description": "Timestamp (in milliseconds since the Unix epoch) when the settlement or settlement instruction failed. Present only if the status is `failed`.",
              "example": 1736713950000,
              "type": "integer"
            },
            "id": {
              "description": "Unique identifier of the settlement instance",
              "type": "string"
            },
            "instructions": {
              "description": "Settlement currency instructions",
              "items": {
                "properties": {
                  "amount": {
                    "description": "<ul><li>Positive value means that since the previous settlement, the client has earned/bought the asset in the exchange and settlement direction is from exchange to the client.</li><li>Negative value means, since the previous settlement, the client has lost/sold the asset in the exchange and settlement direction is from client to deribit.</li>",
                    "example": 1.3141,
                    "type": "number"
                  },
                  "completed_at": {
                    "description": "Timestamp (in milliseconds since the Unix epoch) when the settlement or settlement instruction was completed. Only present if the status is `completed`.",
                    "example": 1736714000000,
                    "type": "integer"
                  },
                  "created_at": {
                    "description": "Timestamp of when the instruction was created (milliseconds since the Unix epoch)",
                    "example": 1736712919000,
                    "type": "integer"
                  },
                  "currency": {
                    "description": "The currency supported by custodian and exchange",
                    "type": "string"
                  },
                  "custody_balance": {
                    "description": "Custody balance of the user at the time of initiating the settlement",
                    "example": 2.341,
                    "type": "number"
                  },
                  "failed_at": {
                    "description": "Timestamp (in milliseconds since the Unix epoch) when the settlement or settlement instruction failed. Present only if the status is `failed`.",
                    "example": 1736713950000,
                    "type": "integer"
                  },
                  "review_reason": {
                    "description": "Optional reason provided by the custodian when rejecting or ignoring a settlement instruction.",
                    "example": "Custody balance mismatch",
                    "type": "string"
                  },
                  "review_result": {
                    "description": "Outcome of the custodian's review. Present only after the review has been completed. Values match the `action` taken: `confirm`, `ignore`, or `reject`.",
                    "example": "confirm",
                    "type": "string"
                  },
                  "reviewed_at": {
                    "description": "Timestamp (in milliseconds since the Unix epoch) when the custodian reviewed the settlement instruction. Present only after a review action has been taken.",
                    "example": 1736713986000,
                    "type": "integer"
                  },
                  "settlement_id": {
                    "description": "The id of the settlement instance",
                    "example": "dec42708-2ec6-4cdd-8f9d-d49bbe94d0aa",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status of settlement instruction. Default is `pending_review`.",
                    "enum": [
                      "pending_review",
                      "pending_execution",
                      "completed",
                      "rejected",
                      "failed",
                      "skipped"
                    ],
                    "example": "completed",
                    "type": "string"
                  },
                  "total_equity": {
                    "description": "Total equity of the client between all main and sub accounts, at the time of initialising the settlement.",
                    "example": 3.452,
                    "type": "number"
                  },
                  "updated_at": {
                    "description": "Timestamp of the last update of the instruction (milliseconds since the Unix epoch)",
                    "example": 1736713920000,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "note": {
              "description": "Additional note related to the settlement",
              "example": "Settlement processed successfully",
              "type": "string"
            },
            "status": {
              "description": "Status of the settlement",
              "enum": [
                "completed",
                "completed_partially",
                "failed",
                "in_progress"
              ],
              "example": "completed",
              "type": "string"
            },
            "updated_at": {
              "description": "Timestamp of the last update of the settlement (milliseconds since the Unix epoch)",
              "example": 1736713920000,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "date": {
          "description": "The event date with year, month and day",
          "example": "2019-11-24",
          "type": "string"
        },
        "delivery_price": {
          "description": "The settlement price for the instrument. Only when `state = closed`",
          "type": "number"
        },
        "delta_total": {
          "description": "The sum of position deltas",
          "example": 0.1334,
          "type": "number"
        },
        "deposit_state": {
          "description": "Deposit state, allowed values : `pending`, `completed`, `rejected`, `replaced`",
          "enum": [
            "pending",
            "completed",
            "rejected",
            "replaced"
          ],
          "type": "string"
        },
        "did": {
          "description": "Distributed ID",
          "type": "string"
        },
        "direction": {
          "description": "Direction: `buy`, or `sell`",
          "enum": [
            "buy",
            "sell"
          ],
          "type": "string"
        },
        "disclosed": {
          "description": "Indicates whether the RFQ was created as non-anonymous, meaning taker and maker aliases are visible to counterparties.",
          "in": "query",
          "name": "disclosed",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        },
        "display_amount": {
          "description": "The actual display amount of iceberg order. Absent for other types of orders.",
          "type": "number"
        },
        "enabled_field": {
          "description": "Current configuration status",
          "example": true,
          "type": "boolean"
        },
        "estimated_delivery_price": {
          "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
          "example": 11628.81,
          "type": "number"
        },
        "estimated_liquidation_ratio": {
          "description": "Estimated Liquidation Ratio is returned only for users without portfolio margining enabled. Multiplying it by future position's market price returns its estimated liquidation price. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 2.34e-05,
          "type": "number"
        },
        "execution_instruction": {
          "description": "<p>Execution instruction of the quote. Default - `any_part_of`</p><ul><li>`\"all_or_none (AON)\"` - The quote can only be filled entirely or not at all, ensuring that its amount matches the amount specified in the Block RFQ. Additionally, 'all_or_none' quotes have priority over 'any_part_of' quotes at the same price level.</li><li>`\"any_part_of (APO)\"` - The quote can be filled either partially or fully, with the filled amount potentially being less than the Block RFQ amount. </li></ul>",
          "type": "string"
        },
        "external_id": {
          "description": "User ID in external systems",
          "example": "4b4cee3d-2dfc-4402-a9ae-f8f9785fa966",
          "type": "string"
        },
        "extra_currencies": {
          "description": "The user can pass a list of currencies to add the address for. It is currently available ONLY for ERC20 currencies. Without passing this paramater for an ERC20 currency, the address will be added to ALL of the ERC20 currencies.",
          "example": [
            "USDC",
            "MATIC"
          ],
          "items": {
            "description": "Name of the currency",
            "type": "string"
          },
          "type": "array"
        },
        "fee": {
          "description": "Fee in currency",
          "example": 2.3e-05,
          "type": "number"
        },
        "fee_balance": {
          "description": "The account's fee balance (it can be used to pay for fees)",
          "type": "number"
        },
        "fee_role": {
          "description": "Fee role of the user: `maker` or `taker`. Can be different from trade role of the user when iceberg order was involved in matching.",
          "enum": [
            "maker",
            "taker"
          ],
          "type": "string"
        },
        "filled_amount": {
          "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
          "type": "number"
        },
        "filled_amount_quote": {
          "description": "Filled amount of the quote. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
          "type": "number"
        },
        "funding_8h": {
          "description": "Funding 8h (perpetual only)",
          "type": "number"
        },
        "greeks": {
          "description": "Only for options",
          "properties": {
            "delta": {
              "description": "(Only for option) The delta value for the option",
              "type": "number"
            },
            "gamma": {
              "description": "(Only for option) The gamma value for the option",
              "type": "number"
            },
            "rho": {
              "description": "(Only for option) The rho value for the option",
              "type": "number"
            },
            "theta": {
              "description": "(Only for option) The theta value for the option",
              "type": "number"
            },
            "vega": {
              "description": "(Only for option) The vega value for the option",
              "type": "number"
            }
          },
          "required": [
            "delta",
            "gamma",
            "rho",
            "theta",
            "vega"
          ],
          "type": "object"
        },
        "group_rate_and_burst": {
          "properties": {
            "futures": {
              "properties": {
                "burst": {
                  "description": "Maximal number of futures requests allowed for user in burst mode",
                  "type": "integer"
                },
                "rate": {
                  "description": "Number of futures requests per second allowed for user",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "options": {
              "properties": {
                "burst": {
                  "description": "Maximal number of option requests allowed for user in burst mode",
                  "type": "integer"
                },
                "rate": {
                  "description": "Number of option requests per second allowed for user",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "perpetuals": {
              "properties": {
                "burst": {
                  "description": "Maximal number of perpetuals requests allowed for user in burst mode",
                  "type": "integer"
                },
                "rate": {
                  "description": "Number of perpetual requests per second allowed for user",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "total": {
              "properties": {
                "burst": {
                  "description": "Maximal number of all requests allowed for user in burst mode",
                  "type": "integer"
                },
                "rate": {
                  "description": "Number of all requests per second in perpetuals allowed for user",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "rate",
            "burst"
          ],
          "type": "object"
        },
        "id": {
          "description": "Unique identifier",
          "example": 5967413,
          "type": "integer"
        },
        "implied_volatility": {
          "description": "Value of the volatility of the underlying instrument",
          "type": "number"
        },
        "implv": {
          "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
          "type": "number"
        },
        "index_name": {
          "description": "Index identifier, matches (base) cryptocurrency with quote currency",
          "enum": [
            "btc_usd",
            "eth_usd",
            "ada_usdc",
            "algo_usdc",
            "avax_usdc",
            "bch_usdc",
            "bnb_usdc",
            "btc_usdc",
            "btcdvol_usdc",
            "buidl_usdc",
            "doge_usdc",
            "dot_usdc",
            "eurr_usdc",
            "eth_usdc",
            "ethdvol_usdc",
            "link_usdc",
            "ltc_usdc",
            "near_usdc",
            "paxg_usdc",
            "shib_usdc",
            "sol_usdc",
            "steth_usdc",
            "ton_usdc",
            "trump_usdc",
            "trx_usdc",
            "uni_usdc",
            "usde_usdc",
            "usyc_usdc",
            "xrp_usdc",
            "btc_usdt",
            "eth_usdt",
            "eurr_usdt",
            "sol_usdt",
            "steth_usdt",
            "usdc_usdt",
            "usde_usdt",
            "btc_eurr",
            "btc_usde",
            "btc_usyc",
            "eth_btc",
            "eth_eurr",
            "eth_usde",
            "eth_usyc",
            "steth_eth",
            "paxg_btc"
          ],
          "type": "string"
        },
        "index_name_derivative": {
          "description": "Index identifier of derivative instrument on the platform",
          "enum": [
            "btc_usd",
            "eth_usd",
            "btc_usdc",
            "eth_usdc",
            "ada_usdc",
            "algo_usdc",
            "avax_usdc",
            "bch_usdc",
            "bnb_usdc",
            "doge_usdc",
            "dot_usdc",
            "link_usdc",
            "ltc_usdc",
            "near_usdc",
            "paxg_usdc",
            "shib_usdc",
            "sol_usdc",
            "ton_usdc",
            "trx_usdc",
            "trump_usdc",
            "uni_usdc",
            "xrp_usdc",
            "usde_usdc",
            "buidl_usdc",
            "btcdvol_usdc",
            "ethdvol_usdc",
            "btc_usdt",
            "eth_usdt",
            "all"
          ],
          "type": "string"
        },
        "index_name_for_dvol": {
          "description": "Index identifier supported for DVOL",
          "enum": [
            "btc_usd",
            "eth_usd"
          ],
          "type": "string"
        },
        "index_price": {
          "description": "Current index price",
          "example": 8247.27,
          "type": "number"
        },
        "instrument_id": {
          "description": "Instrument ID",
          "type": "integer"
        },
        "instrument_name": {
          "description": "Unique instrument identifier",
          "example": "BTC-PERPETUAL",
          "type": "string"
        },
        "interest_rate": {
          "description": "Interest rate used in implied volatility calculations (options only)",
          "type": "number"
        },
        "interest_value": {
          "description": "Value used to calculate `realized_funding` in positions (perpetual only)",
          "type": "number"
        },
        "is_secondary_oto": {
          "description": "`true` if the order is an order that can be triggered by another order, otherwise not present.",
          "type": "boolean"
        },
        "jurisdictions": {
          "description": "Jurisdictions a VASP belongs to",
          "items": {
            "description": "Jurisdiction name",
            "type": "string"
          },
          "type": "array"
        },
        "jwt": {
          "description": "JSON web token",
          "type": "string"
        },
        "key_id": {
          "description": "key identifier",
          "example": 1,
          "type": "integer"
        },
        "kind": {
          "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"spot\"`, `\"future_combo\"`, `\"option_combo\"`",
          "enum": [
            "future",
            "option",
            "spot",
            "future_combo",
            "option_combo"
          ],
          "type": "string"
        },
        "kind_future_or_option_with_any": {
          "description": "Instrument kind: `\"future\"`, `\"option\"` or `\"any\"` for all",
          "enum": [
            "future",
            "option",
            "any"
          ],
          "type": "string"
        },
        "kind_with_any": {
          "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"spot\"`, `\"future_combo\"`, `\"option_combo\"` or `\"any\"` for all",
          "enum": [
            "future",
            "option",
            "spot",
            "future_combo",
            "option_combo",
            "any"
          ],
          "type": "string"
        },
        "kind_with_combo_all": {
          "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"spot\"`, `\"future_combo\"`, `\"option_combo\"`, `\"combo\"` for any combo or `\"any\"` for all",
          "enum": [
            "future",
            "option",
            "spot",
            "future_combo",
            "option_combo",
            "combo",
            "any"
          ],
          "type": "string"
        },
        "label": {
          "description": "User defined label (up to 64 characters)",
          "type": "string"
        },
        "label_presentation": {
          "description": "User defined label (presented only when previously set for order by user)",
          "type": "string"
        },
        "last_price": {
          "description": "The price for the last trade",
          "nullable": true,
          "type": "number"
        },
        "last_rfq_timestamp": {
          "description": "The timestamp of last RFQ (milliseconds since the Unix epoch)",
          "example": 1536569522277,
          "type": "integer"
        },
        "leg_structure": {
          "items": {
            "properties": {
              "direction": {
                "$ref": "#/components/schemas/types/direction"
              },
              "instrument_name": {
                "$ref": "#/components/schemas/types/instrument_name"
              },
              "price": {
                "description": "Price for a leg",
                "type": "number"
              },
              "ratio": {
                "description": "Ratio of amount between legs",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "log_amount": {
          "description": "For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
          "type": "number"
        },
        "mark_iv": {
          "description": "(Only for option) implied volatility for mark price",
          "type": "number"
        },
        "mark_price": {
          "description": "The mark price for the instrument",
          "type": "number"
        },
        "max_price": {
          "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
          "type": "number"
        },
        "max_scope": {
          "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`, `block_rfq:[read, read_write, none]`. If scope is not provided, its value is set as none. </BR></BR> Please check details described in [Access scope](#access-scope)",
          "example": "connection",
          "type": "string"
        },
        "max_show": {
          "description": "Deprecated. Maximum amount within an order to be shown to other traders, 0 for invisible order.",
          "type": "number"
        },
        "min_price": {
          "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
          "type": "number"
        },
        "mobile": {
          "description": "optional field with value `true` added only when created with Mobile Application",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce",
          "example": "bF1_gfgcsd",
          "type": "string"
        },
        "oco_ref": {
          "description": "Unique reference that identifies a one_cancels_others (OCO) pair.",
          "type": "string"
        },
        "only_combo_kind": {
          "description": "Instrument kind: `\"future_combo\"`, `\"option_combo\"` or `\"combo\"` for any combo",
          "enum": [
            "future_combo",
            "option_combo",
            "combo"
          ],
          "type": "string"
        },
        "open_interest": {
          "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
          "type": "number"
        },
        "open_order_price": {
          "description": "Price in base currency or \"market_price\" in case of open trigger market orders",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "enum": [
                "market_price"
              ],
              "type": "string"
            }
          ]
        },
        "order_id": {
          "description": "Unique order identifier",
          "example": "ETH-100234",
          "type": "string"
        },
        "order_state": {
          "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
          "enum": [
            "open",
            "filled",
            "rejected",
            "cancelled",
            "untriggered",
            "triggered"
          ],
          "type": "string"
        },
        "order_state_in_user_trade": {
          "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
          "enum": [
            "open",
            "filled",
            "rejected",
            "cancelled",
            "untriggered",
            "archive"
          ],
          "type": "string"
        },
        "order_state_stop": {
          "description": "Order state: `\"triggered\"`, `\"cancelled\"`, or `\"rejected\"` with rejection reason (e.g. `\"rejected:reduce_direction\"`).",
          "type": "string"
        },
        "order_type": {
          "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
          "enum": [
            "market",
            "limit",
            "stop_market",
            "stop_limit"
          ],
          "type": "string"
        },
        "order_type2": {
          "description": "Order type: `\"all\"`, `\"limit\"`, `\"trigger_all\"`, `\"stop_all\"`, `\"stop_limit\"`, `\"stop_market\"`, `\"take_all\"`, `\"take_limit\"`, `\"take_market\"`",
          "enum": [
            "all",
            "limit",
            "trigger_all",
            "stop_all",
            "stop_limit",
            "stop_market",
            "take_all",
            "take_limit",
            "take_market",
            "trailing_all",
            "trailing_stop"
          ],
          "type": "string"
        },
        "original_order_type": {
          "description": "Original order type. Optional field",
          "enum": [
            "market",
            "market_limit"
          ],
          "type": "string"
        },
        "pending_block_trade": {
          "properties": {
            "app_name": {
              "description": "The name of the application that executed the block trade on behalf of the user (optional).",
              "example": "Example Application",
              "type": "string"
            },
            "broker_code": {
              "description": "Broker code associated with the broker block trade.",
              "example": "jpqYKgg1",
              "type": "string"
            },
            "broker_name": {
              "description": "Name of the broker associated with the block trade.",
              "example": "Test Broker",
              "type": "string"
            },
            "combo_id": {
              "description": "Combo instrument identifier",
              "example": "BTC-CS-27JUN25-80000_85000",
              "type": "string"
            },
            "counterparty_state": {
              "description": "State of the pending block trade for the other party (optional).",
              "properties": {
                "timestamp": {
                  "description": "State timestamp.",
                  "type": "integer"
                },
                "value": {
                  "description": "State value.",
                  "enum": [
                    "initial",
                    "accepted",
                    "rejected",
                    "executed"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "value",
                "timestamp"
              ],
              "type": "object"
            },
            "nonce": {
              "description": "Nonce that can be used to approve or reject pending block trade.",
              "example": "bF1_gfgcsd",
              "type": "string"
            },
            "role": {
              "$ref": "#/components/schemas/types/role"
            },
            "state": {
              "description": "State of the pending block trade for current user.",
              "properties": {
                "timestamp": {
                  "description": "State timestamp.",
                  "type": "integer"
                },
                "value": {
                  "description": "State value.",
                  "enum": [
                    "initial",
                    "accepted",
                    "rejected",
                    "executed"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "value",
                "timestamp"
              ],
              "type": "object"
            },
            "timestamp": {
              "description": "Timestamp that can be used to approve or reject pending block trade.",
              "type": "integer"
            },
            "trades": {
              "items": {
                "$ref": "#/components/schemas/pending_block_trade"
              },
              "type": "array"
            },
            "user_id": {
              "$ref": "#/components/schemas/types/user_id"
            },
            "username": {
              "description": "Username of the user who initiated the block trade.",
              "example": "Trader",
              "type": "string"
            }
          },
          "required": [
            "nonce",
            "timestamp",
            "trades",
            "app_name",
            "role",
            "user_id",
            "state"
          ],
          "type": "object"
        },
        "personal_wallet": {
          "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
          "example": true,
          "type": "boolean"
        },
        "pme_currency": {
          "description": "The currency for which the Extended Risk Matrix will be calculated. Use `CROSS` for Cross Collateral simulation.",
          "enum": [
            "BTC",
            "ETH",
            "USDC",
            "USDT",
            "CROSS"
          ],
          "type": "string"
        },
        "position_direction": {
          "description": "Direction: `buy`, `sell` or `zero`",
          "enum": [
            "buy",
            "sell",
            "zero"
          ],
          "type": "string"
        },
        "post_only": {
          "description": "`true` for post-only orders only",
          "type": "boolean"
        },
        "price": {
          "description": "Price in base currency",
          "type": "number"
        },
        "price_level": {
          "description": "Price amount pair",
          "type": "array",
          "items": [
            {
              "description": "Price",
              "type": "number"
            },
            {
              "description": "Amount",
              "type": "number"
            }
          ]
        },
        "price_level_update": {
          "description": "Price level update in the form of [action, price, amount]",
          "type": "array",
          "items": [
            {
              "description": "Action",
              "enum": [
                "new",
                "change",
                "delete"
              ],
              "type": "string"
            },
            {
              "description": "Price",
              "type": "number"
            },
            {
              "description": "Amount",
              "type": "number"
            }
          ]
        },
        "profit_loss": {
          "description": "Profit and loss in base currency.",
          "type": "number"
        },
        "projected_delta_total": {
          "description": "The sum of position deltas without positions that will expire during closest expiration",
          "example": 0.1334,
          "type": "number"
        },
        "projected_initial_margin": {
          "description": "Projected initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 1,
          "type": "number"
        },
        "projected_maintenance_margin": {
          "description": "Projected maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 1,
          "type": "number"
        },
        "public_key": {
          "description": "PEM encoded public key (Ed25519/RSA) used for asymmetric signatures (optional)",
          "example": "-----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEApajFN0CSwIaaiIRPiFbiYYvpsLQLSccSLLsKPe984sc= -----END PUBLIC KEY-----",
          "type": "string"
        },
        "quantity": {
          "description": "The number of contracts to be traded.",
          "type": "number"
        },
        "quote_asks": {
          "items": {
            "properties": {
              "amount": {
                "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
                "type": "number"
              },
              "execution_instruction": {
                "$ref": "#/components/schemas/types/execution_instruction"
              },
              "expires_at": {
                "description": "The timestamp when the quote expires (milliseconds since the Unix epoch), equal to the earliest expiry of placed quotes",
                "example": 1745312540321,
                "type": "integer"
              },
              "last_update_timestamp": {
                "description": "Timestamp of the last update of the quote (milliseconds since the UNIX epoch)",
                "example": 1536569522277,
                "type": "integer"
              },
              "makers": {
                "items": {
                  "description": "Maker of the quote",
                  "type": "string"
                },
                "type": "array"
              },
              "price": {
                "description": "Price of a quote",
                "type": "number"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "quote_bids": {
          "items": {
            "properties": {
              "amount": {
                "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
                "type": "number"
              },
              "execution_instruction": {
                "$ref": "#/components/schemas/types/execution_instruction"
              },
              "expires_at": {
                "description": "The timestamp when the quote expires (milliseconds since the Unix epoch), equal to the earliest expiry of placed quotes",
                "example": 1745312540321,
                "type": "integer"
              },
              "last_update_timestamp": {
                "description": "Timestamp of the last update of the quote (milliseconds since the UNIX epoch)",
                "example": 1536569522277,
                "type": "integer"
              },
              "makers": {
                "items": {
                  "description": "Maker of the quote",
                  "type": "string"
                },
                "type": "array"
              },
              "price": {
                "description": "Price of a quote",
                "type": "number"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "quote_direction": {
          "description": "Direction of trade from the maker perspective",
          "enum": [
            "buy",
            "sell"
          ],
          "type": "string"
        },
        "quote_price": {
          "description": "Price in quote currency",
          "type": "number"
        },
        "rate_and_burst": {
          "properties": {
            "burst": {
              "description": "Maximal number of requests allowed for user in burst mode",
              "type": "integer"
            },
            "rate": {
              "description": "Number of requests per second allowed for user",
              "type": "integer"
            }
          },
          "required": [
            "rate",
            "burst"
          ],
          "type": "object"
        },
        "reduce_only": {
          "description": "Optional (not added for spot). '`true` for reduce-only orders only'",
          "type": "boolean"
        },
        "refresh_amount": {
          "description": "The initial display amount of iceberg order. Iceberg order display amount will be refreshed to that value after match consuming actual display amount. Absent for other types of orders",
          "type": "number"
        },
        "reject_post_only": {
          "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
          "type": "boolean"
        },
        "replaced_quote": {
          "description": "`true` if the quote was edited, otherwise `false`.",
          "type": "boolean"
        },
        "requires_confirmation": {
          "description": "If address requires email confirmation for withdrawals",
          "example": true,
          "type": "boolean"
        },
        "requires_confirmation_change": {
          "description": "If email confirmation change is in progress",
          "example": true,
          "type": "boolean"
        },
        "result_count": {
          "description": "Total number of results available",
          "example": 101,
          "type": "integer"
        },
        "role": {
          "description": "Trade role of the user: `maker` or `taker`",
          "enum": [
            "maker",
            "taker"
          ],
          "type": "string"
        },
        "rpl": {
          "description": "Session realized profit and loss",
          "example": 0.1,
          "type": "number"
        },
        "scale_down": {
          "description": "The field is only added if the user has it set",
          "properties": {
            "im_multiplier": {
              "description": "Initial Margin multiplier",
              "type": "number"
            },
            "mm_multiplier": {
              "description": "Maintenance Margin multiplier",
              "type": "number"
            }
          },
          "required": [
            "im_multiplier",
            "mm_multiplier"
          ],
          "type": "object"
        },
        "security_key_assignments": {
          "items": {
            "properties": {
              "assignment": {
                "description": "Assignment name",
                "enum": [
                  "login",
                  "wallet",
                  "admin",
                  "account"
                ],
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp when assignment was created (milliseconds since the UNIX epoch)",
                "type": "integer"
              }
            },
            "required": [
              "type",
              "assignment",
              "timestamp"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "security_key_id": {
          "description": "Security Key Identifier",
          "example": 12,
          "type": "integer"
        },
        "security_key_last_used": {
          "description": "Timestamp when Security Key was last used (milliseconds since the UNIX epoch)",
          "type": "integer"
        },
        "security_key_name": {
          "description": "Security Key name",
          "type": "string"
        },
        "security_key_timestamp": {
          "description": "Timestamp when Security Key was created (milliseconds since the UNIX epoch)",
          "type": "integer"
        },
        "security_key_type": {
          "description": "Security Key type",
          "enum": [
            "tfa",
            "u2f"
          ],
          "type": "string"
        },
        "settlement_currency_with_any_and_grouped": {
          "description": "Currency name or `\"any\"` if don't care or `\"grouped\"` if grouped by currencies",
          "enum": [
            "BTC",
            "ETH",
            "USDC",
            "USDT",
            "any",
            "grouped"
          ],
          "type": "string"
        },
        "settlement_price": {
          "description": "Optional (not added for spot). The settlement price for the instrument. Only when `state = open`",
          "type": "number"
        },
        "settlement_type": {
          "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`.",
          "enum": [
            "settlement",
            "delivery",
            "bankruptcy"
          ],
          "type": "string"
        },
        "side": {
          "description": "Side - `buy` or `sell`",
          "enum": [
            "buy",
            "sell"
          ],
          "example": "`buy`",
          "type": "string"
        },
        "simple_order_type": {
          "description": "Order type: `\"all\"`, `\"limit\"`, `\"stop\"`, `\"take\"`, `\"trailing_stop\"`, `\"trailing_take\"`",
          "enum": [
            "all",
            "limit",
            "trigger_all",
            "stop",
            "take",
            "trailing_stop"
          ],
          "type": "string"
        },
        "sorting": {
          "enum": [
            "asc",
            "desc",
            "default"
          ],
          "type": "string"
        },
        "source": {
          "description": "Blockchain address source",
          "type": "string"
        },
        "stats": {
          "properties": {
            "high": {
              "description": "Highest price during 24h",
              "type": "number"
            },
            "low": {
              "description": "Lowest price during 24h",
              "type": "number"
            },
            "price_change": {
              "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
              "example": 10.23,
              "type": "number"
            },
            "volume": {
              "description": "Volume during last 24h in base currency",
              "type": "number"
            },
            "volume_usd": {
              "$ref": "#/components/schemas/types/volume_usd"
            }
          },
          "required": [
            "volume",
            "high",
            "low"
          ],
          "type": "object"
        },
        "status": {
          "description": "Wallet address status, values: [`admin_locked`, `waiting`, `confirmed`, `ready`]",
          "enum": [
            "admin_locked",
            "waiting",
            "confirmed",
            "ready"
          ],
          "type": "string"
        },
        "tick_direction": {
          "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "tick_size_step": {
          "properties": {
            "above_price": {
              "description": "The price from which the increased tick size applies",
              "type": "number"
            },
            "tick_size": {
              "description": "Tick size to be used above the price. It must be multiple of the minimum tick size.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "time_in_force": {
          "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
          "enum": [
            "good_til_cancelled",
            "good_til_day",
            "fill_or_kill",
            "immediate_or_cancel"
          ],
          "type": "string"
        },
        "timestamp": {
          "description": "The timestamp (milliseconds since the Unix epoch)",
          "example": 1536569522277,
          "type": "integer"
        },
        "timestamp_for_book_notifications": {
          "description": "The timestamp of last change (milliseconds since the Unix epoch)",
          "example": 1536569522277,
          "type": "integer"
        },
        "trade_allocations": {
          "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts or broker clients. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and amount. Visible only to the taker.",
          "items": {
            "properties": {
              "amount": {
                "description": "Amount allocated to this user or client.",
                "type": "number"
              },
              "client_info": {
                "description": "Client allocation info for brokers.",
                "properties": {
                  "client_id": {
                    "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                    "type": "integer"
                  },
                  "client_link_id": {
                    "description": "ID assigned to a single user in a client; available to broker.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the linked user within the client; available to broker.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "user_id": {
                "description": "User ID to allocate part of the RFQ amount. For brokers the User ID is obstructed.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "trade_id": {
          "description": "Unique (per currency) trade identifier",
          "type": "string"
        },
        "trade_seq": {
          "description": "The sequence number of the trade within instrument",
          "type": "integer"
        },
        "trade_timestamp": {
          "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
          "example": 1517329113791,
          "type": "integer"
        },
        "trade_trigger": {
          "description": "Contains information about the trade trigger state",
          "properties": {
            "cancel_reason": {
              "description": "Reason for cancellation, present only when state is cancelled",
              "type": "string"
            },
            "direction": {
              "description": "Direction of the trade trigger",
              "enum": [
                "buy",
                "sell"
              ],
              "type": "string"
            },
            "price": {
              "description": "Price of the trade trigger",
              "type": "number"
            },
            "state": {
              "$ref": "#/components/schemas/types/trade_trigger_state"
            }
          },
          "required": [
            "state",
            "price",
            "direction"
          ],
          "type": "object"
        },
        "trade_trigger_state": {
          "description": "Trade trigger state: `\"untriggered\"` or `\"cancelled\"`",
          "enum": [
            "triggered",
            "untriggered",
            "cancelled"
          ],
          "type": "string"
        },
        "transfer_direction": {
          "description": "Transfer direction",
          "enum": [
            "payment",
            "income"
          ],
          "type": "string"
        },
        "transfer_id": {
          "description": "Id of transfer",
          "example": 12,
          "type": "integer"
        },
        "transfer_other_side": {
          "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
          "example": "Smith",
          "type": "string"
        },
        "transfer_state": {
          "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin`, `insufficient_funds`,  `withdrawal_limit` otherwise rejection reason",
          "type": "string"
        },
        "transfer_type": {
          "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount",
          "enum": [
            "user",
            "subaccount"
          ],
          "type": "string"
        },
        "trigger": {
          "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
          "enum": [
            "index_price",
            "mark_price",
            "last_price"
          ],
          "type": "string"
        },
        "trigger_fill_condition": {
          "description": "<p>The fill condition of the linked order (Only for linked order types), default: `first_hit`.</p> <ul> <li>`\"first_hit\"` - any execution of the primary order will fully cancel/place all secondary orders.</li> <li>`\"complete_fill\"` - a complete execution (meaning the primary order no longer exists) will cancel/place the secondary orders.</li> <li>`\"incremental\"` - any fill of the primary order will cause proportional partial cancellation/placement of the secondary order. The amount that will be subtracted/added to the secondary order will be rounded down to the contract size.</li> </ul>",
          "enum": [
            "first_hit",
            "complete_fill",
            "incremental"
          ],
          "type": "string"
        },
        "trigger_offset": {
          "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
          "type": "number"
        },
        "trigger_price": {
          "description": "Trigger price (Only for future trigger orders)",
          "type": "number"
        },
        "trigger_reference_price": {
          "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
          "type": "number"
        },
        "triggered": {
          "description": "Whether the trigger order has been triggered",
          "type": "boolean"
        },
        "underlying_index": {
          "description": "Name of the underlying future, or `index_price` (options only)",
          "type": "number"
        },
        "underlying_price": {
          "description": "Underlying price for implied volatility calculations (options only)",
          "type": "number"
        },
        "unhosted_wallet": {
          "description": "Indicates if the address belongs to an unhosted wallet",
          "example": false,
          "type": "boolean"
        },
        "upl": {
          "description": "Session unrealized profit and loss",
          "example": 0.846863,
          "type": "number"
        },
        "usd": {
          "description": "Option price in USD (Only if `advanced=\"usd\"`)",
          "type": "number"
        },
        "user_id": {
          "description": "Unique user identifier",
          "example": 57874,
          "type": "integer"
        },
        "username": {
          "description": "System name or user defined subaccount alias",
          "example": "MrTrader",
          "type": "string"
        },
        "vasp_name": {
          "description": "VASP name",
          "type": "string"
        },
        "volatility": {
          "description": "Value of the corresponding volatility",
          "type": "number"
        },
        "volume_usd": {
          "description": "Volume in usd (futures only)",
          "type": "number"
        },
        "waiting_timestamp": {
          "description": "Timestamp when the address will be ready",
          "example": true,
          "type": "boolean"
        },
        "wallet_address_type": {
          "description": "Address type/purpose, allowed values : `deposit`",
          "type": "string"
        },
        "wallet_currency": {
          "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
          "enum": [
            "BTC",
            "ETH",
            "STETH",
            "ETHW",
            "USDC",
            "USDT",
            "EURR",
            "MATIC",
            "SOL",
            "XRP",
            "USYC",
            "PAXG",
            "BNB",
            "USDE"
          ],
          "type": "string"
        },
        "web": {
          "description": "`true` if created via Deribit frontend (optional)",
          "type": "boolean"
        },
        "withdrawal_policy_amount": {
          "description": "A positive float as limit",
          "type": "number"
        },
        "withdrawal_policy_category": {
          "description": "Withdrawal Policy category, i.e. `\"small\"`, `\"secure\"`",
          "enum": [
            "small",
            "secure"
          ],
          "type": "string"
        },
        "withdrawal_policy_limit_bucket": {
          "description": "Withdrawal Policy limit bucket, i.e. `\"h24\"`",
          "enum": [
            "h24"
          ],
          "type": "string"
        },
        "withdrawal_policy_limit_buckets": {
          "description": "Withdrawal Policy limit bucket",
          "properties": {
            "secure": {
              "$ref": "#/components/schemas/types/amount"
            },
            "small": {
              "$ref": "#/components/schemas/types/amount"
            }
          },
          "type": "object"
        },
        "withdrawal_policy_mode": {
          "description": "Withdrawal Policy mode, i.e. `\"manual\"`, `\"automated\"`, `\"suspended\"`",
          "enum": [
            "manual",
            "automated",
            "suspended"
          ],
          "type": "string"
        },
        "withdrawal_state": {
          "description": "Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`",
          "enum": [
            "unconfirmed",
            "confirmed",
            "cancelled",
            "completed",
            "interrupted",
            "rejected"
          ],
          "type": "string"
        }
      },
      "user_change": {
        "properties": {
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "orders": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          },
          "position": {
            "items": {
              "$ref": "#/components/schemas/position"
            },
            "type": "array"
          },
          "trades": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          }
        }
      },
      "user_trade": {
        "properties": {
          "advanced": {
            "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
            "enum": [
              "usd",
              "implv"
            ],
            "type": "string"
          },
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "api": {
            "description": "`true` if user order was created with API",
            "type": "boolean"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "block_rfq_quote_id": {
            "description": "ID of the Block RFQ quote - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "block_trade_id": {
            "$ref": "#/components/schemas/types/block_trade_id_in_result"
          },
          "combo_id": {
            "description": "Optional field containing combo instrument name if the trade is a combo trade",
            "type": "string"
          },
          "combo_trade_id": {
            "description": "Optional field containing combo trade identifier if the trade is a combo trade",
            "type": "number"
          },
          "contracts": {
            "description": "Trade size in contract units (optional, may be absent in historical trades)",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction",
            "description": "Trade direction of the taker"
          },
          "fee": {
            "description": "User's fee in units of the specified `fee_currency`",
            "type": "number"
          },
          "fee_currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "type": "number"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "type": "number"
          },
          "label": {
            "$ref": "#/components/schemas/types/label_presentation"
          },
          "legs": {
            "description": "Optional field containing leg trades if trade is a combo trade (present when querying for **only** combo trades and in `combo_trades` events)",
            "type": "array"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "enum": [
              "M",
              "T",
              "MT"
            ],
            "type": "string"
          },
          "liquidity": {
            "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
            "enum": [
              "M",
              "T"
            ],
            "type": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "type": "number"
          },
          "matching_id": {
            "description": "Always `null`",
            "type": "string"
          },
          "mmp": {
            "description": "`true` if user order is MMP",
            "type": "boolean"
          },
          "order_id": {
            "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
            "type": "string"
          },
          "order_type": {
            "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
            "enum": [
              "limit",
              "market",
              "liquidation"
            ],
            "type": "string"
          },
          "post_only": {
            "description": "`true` if user order is post-only",
            "type": "boolean"
          },
          "price": {
            "$ref": "#/components/schemas/types/price",
            "description": "The price of the trade"
          },
          "profit_loss": {
            "$ref": "#/components/schemas/types/profit_loss"
          },
          "quote_id": {
            "description": "QuoteID of the user order (optional, present only for orders placed with `private/mass_quote`)",
            "type": "string"
          },
          "quote_set_id": {
            "description": "QuoteSet of the user order (optional, present only for orders placed with `private/mass_quote`)",
            "type": "string"
          },
          "reduce_only": {
            "description": "`true` if user order is reduce-only",
            "type": "boolean"
          },
          "risk_reducing": {
            "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/types/order_state_in_user_trade"
          },
          "tick_direction": {
            "$ref": "#/components/schemas/types/tick_direction"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/trade_timestamp"
          },
          "trade_allocations": {
            "description": "List of allocations for Block RFQ pre-allocation. Each allocation specifies `user_id`, `amount`, and `fee` for the allocated part of the trade. For broker client allocations, a `client_info` object will be included.",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount allocated to this user.",
                  "type": "number"
                },
                "client_info": {
                  "description": "Optional client allocation info for brokers.",
                  "properties": {
                    "client_id": {
                      "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                      "type": "integer"
                    },
                    "client_link_id": {
                      "description": "ID assigned to a single user in a client; available to broker.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the linked user within the client; available to broker.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "fee": {
                  "description": "Fee for the allocated part of the trade.",
                  "type": "number"
                },
                "user_id": {
                  "description": "User ID to which part of the trade is allocated. For brokers the User ID is obstructed.",
                  "type": "integer"
                }
              },
              "required": [
                "amount",
                "fee"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "trade_id": {
            "$ref": "#/components/schemas/types/trade_id"
          },
          "trade_seq": {
            "$ref": "#/components/schemas/types/trade_seq"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (Options only)",
            "type": "number"
          }
        },
        "required": [
          "trade_id",
          "trade_seq",
          "instrument_name",
          "timestamp",
          "order_id",
          "direction",
          "tick_direction",
          "index_price",
          "price",
          "amount",
          "fee",
          "fee_currency",
          "state",
          "mark_price"
        ]
      },
      "vasp_item": {
        "properties": {
          "did": {
            "$ref": "#/components/schemas/types/did"
          },
          "jurisdictions": {
            "$ref": "#/components/schemas/types/jurisdictions"
          },
          "name": {
            "$ref": "#/components/schemas/types/vasp_name"
          }
        },
        "required": [
          "did",
          "name"
        ],
        "type": "object"
      },
      "withdrawal": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/types/currency_address"
          },
          "amount": {
            "$ref": "#/components/schemas/types/currency_amount"
          },
          "confirmed_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, `null` when not confirmed",
            "example": 1536569522277,
            "nullable": true,
            "type": "integer"
          },
          "created_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/types/currency"
          },
          "fee": {
            "$ref": "#/components/schemas/types/fee"
          },
          "id": {
            "description": "Withdrawal id in Deribit system",
            "example": 1,
            "type": "integer"
          },
          "priority": {
            "description": "Id of priority level",
            "example": 1.0,
            "type": "number"
          },
          "state": {
            "$ref": "#/components/schemas/types/withdrawal_state"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/types/currency_transaction_id"
          },
          "updated_timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "required": [
          "currency",
          "address",
          "amount",
          "state",
          "transaction_id",
          "received_timestamp",
          "updated_timestamp"
        ],
        "type": "object"
      },
      "withdrawal_policy_limits": {
        "properties": {
          "h24": {
            "$ref": "#/components/schemas/types/withdrawal_policy_limit_buckets"
          }
        },
        "required": [
          "mode",
          "h24"
        ],
        "type": "object"
      },
      "withdrawal_policy_mode": {
        "description": "A map where each key is a valid currency code (e.g., btc, eth, usdc), and the value is one of the following statuses: manual, automated, suspended.",
        "properties": {
          "{CURRENCY}": {
            "$ref": "#/components/schemas/types/withdrawal_policy_mode"
          }
        },
        "type": "object"
      }
    },
    "x-sections": {
      "errors": {
        "$ref": "rpc-errors.md"
      },
      "fix": {
        "$ref": "api-fix.md"
      },
      "subscriptions": {
        "introduction": "#Subscriptions\n\nThe [subscribe](#private-subscribe) method can be used to subscribe to one\nor more *channels*. This section provides an overview of the channels and\nthe notifications that the subscriber will receive for each of those channels.\n\nIn most cases the channel name is constructed from a couple\nof elements. This makes it possible to specify exactly which\ninformation is required, and/or the frequency or aggregation level.\nThese elements are considered parameters for the subscription.\n\nFor example, when subscribing to the channel\n<code>book.BTC-27JUL18.10.20.100ms</code>, the element\n<code>BTC-27JUL18</code> specifies that the name of the instrument\n(see [naming](#naming)), <code>10</code> means that the results\nshould be grouped to that precision, etc.\n\nAs described in [notifications](#notifications), response data includes fields\nrequired by JSON-RPC and part dedicated for subscription data.\n\n<p>\n  <table>\n      <thead>\n          <tr>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Description</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>jsonrpc</td>\n              <td>string</td>\n              <td>The JSON-RPC version (2.0)</td>\n          </tr>\n          <tr>\n              <td>method</td>\n              <td>string</td>\n              <td>Here it's always <code>subscription</code></td>\n          </tr>\n          <tr>\n              <td>params</td>\n              <td><em>object</em></td>\n              <td></td>\n          </tr>\n          <tr>\n              <td>&nbsp;&nbsp;\u203a&nbsp;&nbsp;channel</td>\n              <td>string</td>\n              <td>The same channel as given when subscribing to notifications</td>\n          </tr>\n          <tr>\n              <td>&nbsp;&nbsp;\u203a&nbsp;&nbsp;label</td>\n              <td>string</td>\n              <td>The same label as given when subscribing to notifications (present only when provided in <code>private/subscribe</code>; only for private channels)</td>\n          </tr>\n          <tr>\n              <td>&nbsp;&nbsp;\u203a&nbsp;&nbsp;data</td>\n              <td><em>object</em></td>\n              <td>Data specific for the channel</td>\n          </tr>\n      </tbody>\n  </table>\n</p>\n\nFor all the following channel types only specific <code>data</code> part will be described.\n"
      }
    },
    "x-subscriptions": {
      "announcements": {
        "notifications": {
          "schema": {
            "$ref": "#/notifications/announcement_notification"
          }
        },
        "summary": "General announcements concerning the Deribit platform."
      },
      "block_rfq.maker.quotes.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/block_rfq.maker.quotes.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/block_rfq_maker_quotes_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notification about state of your Block RFQ quotes",
        "tags": [
          "private"
        ]
      },
      "block_rfq.maker.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/block_rfq.maker.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/block_rfq_maker_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notification when new Block RFQ is created",
        "tags": [
          "private"
        ]
      },
      "block_rfq.taker.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/block_rfq.taker.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/block_rfq_taker_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notification about state of your Block RFQ. `trades` are only visible if the Block RFQ was filled. Please note that after Block RFQ creation, a grace period of 5 seconds begins, during which the taker cannot see quotes or trade the Block RFQ.",
        "tags": [
          "private"
        ]
      },
      "block_rfq.trades.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/block_rfq.trades.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/block_rfq_trades_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notification about recent Block RFQ trades",
        "tags": [
          "public"
        ]
      },
      "block_trade_confirmations": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/block_trade_confirmations.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/types/pending_block_trade"
          }
        },
        "summary": "Provides notifications regarding block trade approval"
      },
      "block_trade_confirmations.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/block_trade_confirmations.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/types/pending_block_trade"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Provides notifications regarding block trade approval. Supports filtering by currency."
      },
      "book.{instrument_name}.{group}.{depth}.{interval}": {
        "description": "<p>Notifies about changes to the order book for a certain instrument.</p>\nNotifications are sent once per specified interval, with prices grouped by (rounded to) the specified group, showing the complete order book to the specified depth (number of price levels).</p>\n<p>The 'asks' and the 'bids' elements in the response are both a 'list of lists'. Each element in the outer list is a list of exactly two elements: price and amount.</p>\n<p>*price* is a price level (USD per BTC, rounded as specified by the 'group' parameter for the subscription).</p>\n<p>*amount* indicates the amount of all orders at price level. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.</p>",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/book.instrument_name.group.depth.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/book_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "description": "Group prices (by rounding). Use <code>none</code> for no grouping.<br> For ETH cryptocurrency, real ```group``` is divided by 100.0, e.g. given value ```5``` means using ```0.05```<br><br> Allowed values for BTC - ```none```, ```1```, ```2```, ```5```, ```10```<br> Allowed values for ETH - ```none```, ```5```, ```10```, ```25```, ```100```, ```250```",
            "name": "group",
            "required": true,
            "schema": {
              "enum": [
                "none",
                1,
                2,
                5,
                10,
                25,
                100,
                250
              ],
              "example": 10,
              "type": "string"
            },
            "summary": "Group prices (by rounding). Use 'none' for no grouping."
          },
          {
            "description": "Number of price levels to be included.",
            "name": "depth",
            "required": true,
            "schema": {
              "enum": [
                1,
                10,
                20
              ],
              "example": 20,
              "type": "integer"
            }
          },
          {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "100ms",
                "agg2"
              ],
              "type": "string"
            }
          }
        ],
        "summary": "Aggregated notifications about changes to the order book for a certain instrument."
      },
      "book.{instrument_name}.{interval}": {
        "description": "<p>Notifies about changes to the order book for a certain instrument.</p>\n<p>The first notification will contain the whole book (bid and ask amounts for all prices). After that there will only be information about changes to individual price levels.</p>\n<p>The first notification will contain the amounts for all price levels (list of <code>['new', price, amount]</code> tuples). All following notifications will contain a list of tuples with action, price level and new amount (<code>[action, price, amount]</code>). Action can be either <code>new</code>, <code>change</code> or <code>delete</code>.\n<p>Each notification will contain a <code>change_id</code> field, and each message except for the first one will contain a field <code>prev_change_id</code>. If <code>prev_change_id</code> is equal to the <code>change_id</code> of the previous message, this means that no messages have been missed.</p>\n<p>The amount for perpetual and futures is in USD units, for options it is in corresponding cryptocurrency contracts, e.g., BTC or ETH.</p>",
        "notifications": {
          "examples": {
            "firstObject": {
              "externalValue": "examples/notifications/book.instrument_name.interval.first.json"
            },
            "repeatedObject": {
              "externalValue": "examples/notifications/book.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/book_notification_raw"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Notifies about changes to the order book for a certain instrument."
      },
      "chart.trades.{instrument_name}.{resolution}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/chart.trades.instrument_name.resolution.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/trade_chart_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/chart_resolution"
          }
        ],
        "summary": "Publicly available market data used to generate a TradingView candle chart. During a single resolution period, many events can be sent, each with updated values for the recent period.<br/><br/> **NOTICE** When there is no trade during the requested resolution period (e.g. 1 minute), then a filling sample is generated which uses data from the last available trade candle (open and close values)."
      },
      "deribit_price_index.{index_name}": {
        "description": "Provides information about current value (price) for Deribit Index",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/deribit_price_index.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/deribit_price_index_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      },
      "deribit_price_ranking.{index_name}": {
        "description": "Provides information about current value (price) for stock exchanges used to calculate Deribit Index",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/deribit_price_ranking.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/deribit_price_ranking_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      },
      "deribit_price_statistics.{index_name}": {
        "description": "This subscription provides basic statistics about Deribit Index",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/deribit_price_statistics.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/deribit_price_statistics_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      },
      "deribit_volatility_index.{index_name}": {
        "description": "Provides volatility index subscription",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/deribit_volatility_index.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/deribit_volatility_index_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name_for_dvol"
          }
        ]
      },
      "estimated_expiration_price.{index_name}": {
        "description": "Returns calculated (estimated) ending price for given index.",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/estimated_expiration_price.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/estimated_expiration_price_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      },
      "incremental_ticker.{instrument_name}": {
        "notifications": {
          "examples": {
            "firstObject": {
              "externalValue": "examples/notifications/incremental_ticker.instrument_name.first.json"
            },
            "repeatedObject": {
              "externalValue": "examples/notifications/incremental_ticker.instrument_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/incremental_ticker_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "summary": "<p>Notifies about changes in instrument ticker (key information about the instrument).</p> <p>The first notification will contain the whole ticker. After that there will only be information about changes in the ticker.</p> <p>This event is sent at most once per second.</p>"
      },
      "instrument.state.{kind}.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/instrument.state.kind.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/state_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_any"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notifications about new or terminated instruments of given kind in given currency. **(Please note that our system does not send notifications when currencies are locked. Users are advised to subscribe to the [platform_state](https://docs.deribit.com/#platform_state) channel to monitor the state of currencies actively.)**",
        "tags": [
          "internal"
        ]
      },
      "markprice.options.{index_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/markprice.options.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/markprice_options_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ],
        "summary": "Provides information about options markprices."
      },
      "perpetual.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/perpetual.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/perpetual_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Provide current interest rate - but only for **perpetual** instruments. Other types won't generate any notification."
      },
      "platform_state": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/platform_state.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/platform_state_notification"
          }
        },
        "summary": "Information about platform state."
      },
      "platform_state.public_methods_state": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/platform_state.public_methods_state.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/platform_state_notification_public_methods_state"
          }
        },
        "summary": "Information whether unauthorized public requests are allowed"
      },
      "quote.{instrument_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/quote.instrument_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/quote_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "summary": "Best bid/ask price and size."
      },
      "rfq.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/rfq.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/rfq_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notifications about RFQs for instruments in given currency.",
        "tags": [
          "internal"
        ]
      },
      "ticker.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/ticker.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/ticker_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Key information about the instrument"
      },
      "trades.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/trades.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/public_trade"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about trades for an instrument."
      },
      "trades.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/trades.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/public_trade"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_strict"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about trades in any instrument of a given kind and given currency."
      },
      "user.access_log": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.access_log.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/access_log"
          }
        },
        "parameters": [],
        "summary": "Get notifications about security events related to the account",
        "tags": [
          "private"
        ]
      },
      "user.changes.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.changes.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/user_change"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about the user's updates related to order, trades, etc. in an instrument.",
        "tags": [
          "private"
        ]
      },
      "user.changes.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.changes.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/user_change"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about changes in user's updates related to order, trades, etc. in instruments of a given kind and currency.",
        "tags": [
          "private"
        ]
      },
      "user.combo_trades.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.combo_trades.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about the user's trades in an instrument (trades contain `legs` field).",
        "tags": [
          "private"
        ]
      },
      "user.combo_trades.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.combo_trades.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/only_combo_kind"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about the user's trades in any instrument of a given kind and given currency (trades contain `legs` field).",
        "tags": [
          "private"
        ]
      },
      "user.lock": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.lock.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/user_lock_notification"
          }
        },
        "parameters": [],
        "summary": "Get notification when account is locked/unlocked",
        "tags": [
          "private"
        ]
      },
      "user.mmp_trigger.{index_name}": {
        "description": "Triggered when one of mmp limits is crossed",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.mmp_trigger.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/user_mmp_trigger_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name_derivative"
          }
        ],
        "tags": [
          "private"
        ]
      },
      "user.orders.{instrument_name}.raw": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.orders.instrument_name.raw.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/order"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "summary": "Get notifications about changes in user's orders for given instrument.",
        "tags": [
          "private"
        ]
      },
      "user.orders.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.orders.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval_non_raw"
          }
        ],
        "summary": "Get notifications about changes in user's orders for given instrument.",
        "tags": [
          "private"
        ]
      },
      "user.orders.{kind}.{currency}.raw": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.orders.kind.currency.raw.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/order"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "summary": "Get notifications about changes in user's orders in instruments of a given kind and currency.",
        "tags": [
          "private"
        ]
      },
      "user.orders.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.orders.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval_non_raw"
          }
        ],
        "summary": "Get notifications about changes in user's orders in instruments of a given kind and currency.",
        "tags": [
          "private"
        ]
      },
      "user.portfolio.{currency}": {
        "description": "Provides information about current user portfolio",
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.portfolio.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/notifications/user_portfolio_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "tags": [
          "private"
        ]
      },
      "user.trades.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.trades.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about the user's trades in an instrument.",
        "tags": [
          "private"
        ]
      },
      "user.trades.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.trades.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about the user's trades in any instrument of a given kind and given currency.",
        "tags": [
          "private"
        ]
      }
    }
  },
  "info": {
    "description": {
      "$ref": "api_v2_description.md"
    },
    "title": "Deribit API",
    "version": "2.1.1"
  },
  "notifications": {
    "announcement_notification": {
      "properties": {
        "action": {
          "description": "Action taken by the platform administrators. Published a `new` announcement, or `delete`d the old one",
          "enum": [
            "new",
            "deleted"
          ],
          "type": "string"
        },
        "body": {
          "description": "HTML-formatted announcement body",
          "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
          "type": "string"
        },
        "confirmation": {
          "description": "Whether the user confirmation is required for this announcement",
          "type": "boolean"
        },
        "id": {
          "description": "Announcement's identifier",
          "example": 1532593832021,
          "type": "integer"
        },
        "important": {
          "description": "Whether the announcement is marked as important",
          "type": "boolean"
        },
        "publication_timestamp": {
          "description": "The timestamp (milliseconds since the Unix epoch) of announcement publication",
          "example": 1532593832021,
          "type": "integer"
        },
        "title": {
          "description": "Announcement's title",
          "example": "Example announcement",
          "type": "string"
        },
        "unread": {
          "description": "The number of previous unread announcements (optional, only for authorized users).",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "action",
        "title",
        "body",
        "publication_timestamp",
        "important"
      ]
    },
    "block_rfq_maker_notification": {
      "$ref": "#/components/schemas/types/block_rfq_for_maker"
    },
    "block_rfq_maker_quotes_notification": {
      "items": {
        "$ref": "#/components/schemas/types/block_rfq_quote"
      },
      "type": "array"
    },
    "block_rfq_taker_notification": {
      "$ref": "#/components/schemas/types/block_rfq"
    },
    "block_rfq_trades_notification": {
      "items": {
        "properties": {
          "amount": {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "type": "number"
          },
          "combo_id": {
            "$ref": "#/components/schemas/types/combo_id"
          },
          "direction": {
            "$ref": "#/components/schemas/types/direction",
            "description": "Trade direction of the taker"
          },
          "hedge": {
            "$ref": "#/components/schemas/types/block_rfq_hedge_leg"
          },
          "id": {
            "description": "ID of the Block RFQ",
            "type": "integer"
          },
          "legs": {
            "$ref": "#/components/schemas/types/leg_structure"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "type": "number"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/trade_timestamp"
          },
          "trades": {
            "items": {
              "properties": {
                "amount": {
                  "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                  "type": "number"
                },
                "direction": {
                  "$ref": "#/components/schemas/types/direction"
                },
                "hedge_amount": {
                  "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                  "type": "number"
                },
                "price": {
                  "$ref": "#/components/schemas/types/price"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "book_notification": {
      "properties": {
        "asks": {
          "$ref": "#/components/schemas/types/asks"
        },
        "bids": {
          "$ref": "#/components/schemas/types/bids"
        },
        "change_id": {
          "description": "id of the notification",
          "type": "integer"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp_for_book_notifications"
        }
      },
      "required": [
        "instrument_name",
        "change_id",
        "asks",
        "bids"
      ]
    },
    "book_notification_raw": {
      "properties": {
        "asks": {
          "description": "The first notification will contain the amounts for all price levels (a list of [\"new\", price, amount] tuples). All following notifications will contain a list of tuples with action, price level and new amount ([action, price, amount]). Action can be `new`, `change` or `delete`.",
          "items": {
            "$ref": "#/components/schemas/types/price_level_update"
          },
          "type": "array"
        },
        "bids": {
          "description": "(See 'asks' above.)",
          "items": {
            "$ref": "#/components/schemas/types/price_level_update"
          },
          "type": "array"
        },
        "change_id": {
          "description": "Identifier of the notification",
          "type": "integer"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "prev_change_id": {
          "description": "Identifier of the previous notification (it's **not** included for the first notification)",
          "type": "integer"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp_for_book_notifications"
        },
        "type": {
          "description": "Type of notification: `snapshot` for initial, `change` for others",
          "enum": [
            "snapshot",
            "change"
          ],
          "type": "string"
        }
      },
      "required": [
        "instrument_name",
        "change_id",
        "asks",
        "bids"
      ]
    },
    "deribit_price_index_notification": {
      "properties": {
        "index_name": {
          "$ref": "#/components/schemas/types/index_name"
        },
        "price": {
          "$ref": "#/components/schemas/types/index_price"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "required": [
        "timestamp",
        "price",
        "index_name"
      ]
    },
    "deribit_price_ranking_notification": {
      "items": {
        "properties": {
          "enabled": {
            "description": "Stock exchange status",
            "type": "boolean"
          },
          "identifier": {
            "description": "Stock exchange identifier",
            "example": "bitstamp",
            "type": "string"
          },
          "original_price": {
            "description": "Index price retrieved from stock's data",
            "type": "number"
          },
          "price": {
            "description": "Adjusted stock exchange index price, used for Deribit price index calculations",
            "type": "number"
          },
          "timestamp": {
            "description": "The timestamp of the last update from stock exchange (milliseconds since the UNIX epoch)",
            "example": 1536569522277,
            "type": "integer"
          },
          "weight": {
            "description": "The weight of the ranking given in percent",
            "type": "number"
          }
        }
      },
      "type": "array"
    },
    "deribit_price_statistics_notification": {
      "properties": {
        "change24h": {
          "description": "The price index change calculated between the first and last point within most recent 24 hours window",
          "type": "number"
        },
        "high24h": {
          "description": "The highest recorded price within the last 24 hours",
          "type": "number"
        },
        "high_volatility": {
          "description": "Indicates the high volatility periods on the market. The value `true` is set when the price index value drastically changed within the last 5 minutes",
          "type": "boolean"
        },
        "index_name": {
          "$ref": "#/components/schemas/types/index_name"
        },
        "low24h": {
          "description": "The lowest recorded price within the last 24 hours",
          "type": "number"
        }
      },
      "required": [
        "index_name",
        "low24h",
        "high24h",
        "change24h"
      ]
    },
    "deribit_volatility_index_notification": {
      "properties": {
        "index_name": {
          "$ref": "#/components/schemas/types/index_name_for_dvol"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        },
        "volatility": {
          "$ref": "#/components/schemas/types/volatility"
        }
      },
      "required": [
        "timestamp",
        "volatility",
        "index_name"
      ]
    },
    "estimated_expiration_price_notification": {
      "properties": {
        "is_estimated": {
          "description": "When `true` then price is given as an estimated value, otherwise it's current index price",
          "type": "boolean"
        },
        "left_ticks": {
          "description": "number of time ticks that are left until expiration (field added when price is estimated)",
          "type": "number"
        },
        "price": {
          "description": "Index current or estimated price",
          "example": 8247.27,
          "type": "number"
        },
        "seconds": {
          "description": "Number of seconds till finalizing the nearest instrument",
          "type": "integer"
        },
        "total_ticks": {
          "description": "number of total time ticks (field added when price is estimated)",
          "type": "number"
        }
      },
      "required": [
        "seconds",
        "price",
        "is_estimated"
      ]
    },
    "incremental_ticker_notification": {
      "properties": {
        "ask_iv": {
          "$ref": "#/components/schemas/types/ask_iv"
        },
        "best_ask_amount": {
          "$ref": "#/components/schemas/types/best_ask_amount"
        },
        "best_ask_price": {
          "$ref": "#/components/schemas/types/best_ask_price"
        },
        "best_bid_amount": {
          "$ref": "#/components/schemas/types/best_bid_amount"
        },
        "best_bid_price": {
          "$ref": "#/components/schemas/types/best_bid_price"
        },
        "bid_iv": {
          "$ref": "#/components/schemas/types/bid_iv"
        },
        "current_funding": {
          "$ref": "#/components/schemas/types/current_funding"
        },
        "delivery_price": {
          "$ref": "#/components/schemas/types/delivery_price"
        },
        "estimated_delivery_price": {
          "$ref": "#/components/schemas/types/estimated_delivery_price"
        },
        "funding_8h": {
          "$ref": "#/components/schemas/types/funding_8h"
        },
        "greeks": {
          "$ref": "#/components/schemas/types/greeks"
        },
        "index_price": {
          "$ref": "#/components/schemas/types/index_price"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "interest_rate": {
          "$ref": "#/components/schemas/types/interest_rate"
        },
        "last_price": {
          "$ref": "#/components/schemas/types/last_price"
        },
        "mark_iv": {
          "$ref": "#/components/schemas/types/mark_iv"
        },
        "mark_price": {
          "$ref": "#/components/schemas/types/mark_price"
        },
        "max_price": {
          "$ref": "#/components/schemas/types/max_price"
        },
        "min_price": {
          "$ref": "#/components/schemas/types/min_price"
        },
        "open_interest": {
          "$ref": "#/components/schemas/types/open_interest"
        },
        "settlement_price": {
          "$ref": "#/components/schemas/types/settlement_price"
        },
        "state": {
          "$ref": "#/components/schemas/types/book_state"
        },
        "stats": {
          "$ref": "#/components/schemas/types/stats"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        },
        "type": {
          "description": "Type of notification: `snapshot` for initial, `change` for others.",
          "enum": [
            "snapshot",
            "change"
          ],
          "type": "string"
        },
        "underlying_index": {
          "$ref": "#/components/schemas/types/underlying_index"
        },
        "underlying_price": {
          "$ref": "#/components/schemas/types/underlying_price"
        }
      },
      "required": [
        "instrument_name",
        "timestamp"
      ]
    },
    "markprice_options_notification": {
      "items": {
        "properties": {
          "instrument_name": {
            "$ref": "#/components/schemas/types/instrument_name"
          },
          "iv": {
            "$ref": "#/components/schemas/types/implied_volatility"
          },
          "mark_price": {
            "$ref": "#/components/schemas/types/mark_price"
          },
          "timestamp": {
            "$ref": "#/components/schemas/types/timestamp"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "perpetual_notification": {
      "properties": {
        "index_price": {
          "$ref": "#/components/schemas/types/index_price"
        },
        "interest": {
          "description": "Current interest",
          "type": "number"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "required": [
        "interest",
        "timestamp",
        "index_price"
      ]
    },
    "platform_state_notification": {
      "properties": {
        "locked": {
          "description": "Value is set to 'true' when index is locked on platform, sent only with `price_index` field",
          "example": false,
          "type": "boolean"
        },
        "maintenance": {
          "description": "Value is set to `true` when the maintenance break begins",
          "example": true,
          "type": "boolean"
        },
        "price_index": {
          "description": "Name of index that is locked or unlocked, sent only with `locked` field",
          "example": "btc_usdc",
          "type": "string"
        }
      },
      "required": []
    },
    "platform_state_notification_public_methods_state": {
      "properties": {
        "allow_unauthenticated_public_requests": {
          "description": "Value is set to 'true' when unauthorized public requests are allowed",
          "type": "boolean"
        }
      },
      "required": [
        "allow_unauthenticated_public_requests"
      ]
    },
    "quote_notification": {
      "properties": {
        "best_ask_amount": {
          "$ref": "#/components/schemas/types/best_ask_amount"
        },
        "best_ask_price": {
          "$ref": "#/components/schemas/types/best_ask_price"
        },
        "best_bid_amount": {
          "$ref": "#/components/schemas/types/best_bid_amount"
        },
        "best_bid_price": {
          "$ref": "#/components/schemas/types/best_bid_price"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      },
      "required": [
        "timestamp",
        "instrument_name",
        "best_bid_amount",
        "best_bid_price",
        "best_add_amount",
        "best_add_price"
      ]
    },
    "rfq_notification": {
      "properties": {
        "amount": {
          "$ref": "#/components/schemas/types/amount"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "is_new_instrument": {
          "description": "`true` for newly created instruments (optional)",
          "type": "boolean"
        },
        "last_rfq_timestamp": {
          "$ref": "#/components/schemas/types/last_rfq_timestamp"
        },
        "side": {
          "$ref": "#/components/schemas/types/side"
        },
        "state": {
          "description": "`true` when RFQ is active, `false` when inactive",
          "type": "boolean"
        }
      },
      "required": [
        "state",
        "side",
        "amount",
        "last_rfq_timestamp"
      ]
    },
    "state_notification": {
      "properties": {
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "state": {
          "description": "State of instrument - possible values: `created`, `started`, `settled`, `closed`, `deactivated`, `terminated`",
          "enum": [
            "created",
            "started",
            "settled",
            "closed",
            "deactivated",
            "terminated"
          ],
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        }
      }
    },
    "ticker_notification": {
      "properties": {
        "ask_iv": {
          "$ref": "#/components/schemas/types/ask_iv"
        },
        "best_ask_amount": {
          "$ref": "#/components/schemas/types/best_ask_amount"
        },
        "best_ask_price": {
          "$ref": "#/components/schemas/types/best_ask_price"
        },
        "best_bid_amount": {
          "$ref": "#/components/schemas/types/best_bid_amount"
        },
        "best_bid_price": {
          "$ref": "#/components/schemas/types/best_bid_price"
        },
        "bid_iv": {
          "$ref": "#/components/schemas/types/bid_iv"
        },
        "current_funding": {
          "$ref": "#/components/schemas/types/current_funding"
        },
        "delivery_price": {
          "$ref": "#/components/schemas/types/delivery_price"
        },
        "estimated_delivery_price": {
          "$ref": "#/components/schemas/types/estimated_delivery_price"
        },
        "funding_8h": {
          "$ref": "#/components/schemas/types/funding_8h"
        },
        "greeks": {
          "$ref": "#/components/schemas/types/greeks"
        },
        "index_price": {
          "$ref": "#/components/schemas/types/index_price"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "interest_rate": {
          "$ref": "#/components/schemas/types/interest_rate"
        },
        "interest_value": {
          "$ref": "#/components/schemas/types/interest_value"
        },
        "last_price": {
          "$ref": "#/components/schemas/types/last_price"
        },
        "mark_iv": {
          "$ref": "#/components/schemas/types/mark_iv"
        },
        "mark_price": {
          "$ref": "#/components/schemas/types/mark_price"
        },
        "max_price": {
          "$ref": "#/components/schemas/types/max_price"
        },
        "min_price": {
          "$ref": "#/components/schemas/types/min_price"
        },
        "open_interest": {
          "$ref": "#/components/schemas/types/open_interest"
        },
        "settlement_price": {
          "$ref": "#/components/schemas/types/settlement_price"
        },
        "state": {
          "$ref": "#/components/schemas/types/book_state"
        },
        "stats": {
          "$ref": "#/components/schemas/types/stats"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        },
        "underlying_index": {
          "$ref": "#/components/schemas/types/underlying_index"
        },
        "underlying_price": {
          "$ref": "#/components/schemas/types/underlying_price"
        }
      },
      "required": [
        "instrument_name",
        "timestamp",
        "state",
        "stats",
        "open_interest",
        "index_price",
        "best_bid_price",
        "best_bid_amount",
        "best_add_price",
        "best_add_amount",
        "min_price",
        "max_price",
        "mark_price",
        "last_price",
        "estimated_delivery_price"
      ]
    },
    "ticker_notification_with_bids_and_asks": {
      "properties": {
        "ask_iv": {
          "$ref": "#/components/schemas/types/ask_iv"
        },
        "asks": {
          "$ref": "#/components/schemas/types/asks"
        },
        "best_ask_amount": {
          "$ref": "#/components/schemas/types/best_ask_amount"
        },
        "best_ask_price": {
          "$ref": "#/components/schemas/types/best_ask_price"
        },
        "best_bid_amount": {
          "$ref": "#/components/schemas/types/best_bid_amount"
        },
        "best_bid_price": {
          "$ref": "#/components/schemas/types/best_bid_price"
        },
        "bid_iv": {
          "$ref": "#/components/schemas/types/bid_iv"
        },
        "bids": {
          "$ref": "#/components/schemas/types/bids"
        },
        "current_funding": {
          "$ref": "#/components/schemas/types/current_funding"
        },
        "delivery_price": {
          "$ref": "#/components/schemas/types/delivery_price"
        },
        "funding_8h": {
          "$ref": "#/components/schemas/types/funding_8h"
        },
        "greeks": {
          "$ref": "#/components/schemas/types/greeks"
        },
        "index_price": {
          "$ref": "#/components/schemas/types/index_price"
        },
        "instrument_name": {
          "$ref": "#/components/schemas/types/instrument_name"
        },
        "interest_rate": {
          "$ref": "#/components/schemas/types/interest_rate"
        },
        "last_price": {
          "$ref": "#/components/schemas/types/last_price"
        },
        "mark_iv": {
          "$ref": "#/components/schemas/types/mark_iv"
        },
        "mark_price": {
          "$ref": "#/components/schemas/types/mark_price"
        },
        "max_price": {
          "$ref": "#/components/schemas/types/max_price"
        },
        "min_price": {
          "$ref": "#/components/schemas/types/min_price"
        },
        "open_interest": {
          "$ref": "#/components/schemas/types/open_interest"
        },
        "settlement_price": {
          "$ref": "#/components/schemas/types/settlement_price"
        },
        "state": {
          "$ref": "#/components/schemas/types/book_state"
        },
        "stats": {
          "$ref": "#/components/schemas/types/stats"
        },
        "timestamp": {
          "$ref": "#/components/schemas/types/timestamp"
        },
        "underlying_index": {
          "$ref": "#/components/schemas/types/underlying_index"
        },
        "underlying_price": {
          "$ref": "#/components/schemas/types/underlying_price"
        }
      },
      "required": [
        "instrument_name",
        "timestamp",
        "state",
        "stats",
        "open_interest",
        "index_price",
        "best_bid_price",
        "best_bid_amount",
        "best_add_price",
        "best_add_amount",
        "min_price",
        "max_price",
        "mark_price",
        "last_price",
        "bids",
        "asks"
      ]
    },
    "trade_chart_notification": {
      "properties": {
        "close": {
          "description": "The close price for the candle",
          "type": "number"
        },
        "cost": {
          "description": "Cost data for the candle",
          "type": "number"
        },
        "high": {
          "description": "The highest price level for the candle",
          "type": "number"
        },
        "low": {
          "description": "The lowest price level for the candle",
          "type": "number"
        },
        "open": {
          "description": "The open price for the candle'",
          "type": "number"
        },
        "tick": {
          "$ref": "#/components/schemas/types/timestamp"
        },
        "volume": {
          "description": "Volume data for the candle",
          "type": "number"
        }
      },
      "required": [
        "tick",
        "volume",
        "cost",
        "open",
        "close",
        "high",
        "low"
      ]
    },
    "user_lock_notification": {
      "properties": {
        "currency": {
          "description": "Currency on which account lock has changed, `ALL` if changed for all currencies",
          "example": "BTC, ALL",
          "type": "string"
        },
        "locked": {
          "description": "Value is set to 'true' when user account is locked in currency",
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "currency",
        "locked"
      ]
    },
    "user_mmp_trigger_notification": {
      "properties": {
        "block_rfq": {
          "description": "If true, indicates that the MMP trigger is for Block RFQ. Block RFQ MMP triggers are completely separate from normal order/quote MMP triggers.",
          "type": "boolean"
        },
        "frozen_until": {
          "description": "Timestamp (milliseconds since the UNIX epoch) until the user will be frozen - 0 means that the user is frozen until manual reset.",
          "example": 0,
          "type": "integer"
        },
        "index_name": {
          "description": "Index identifier of derivative instrument on the platform. For Block RFQ MMP, this will be \"all\" when triggered by trade count limit.",
          "example": "eth_usdc",
          "type": "string"
        },
        "mmp_group": {
          "description": "Triggered mmp group, this parameter is optional (appears only for Mass Quote orders trigger)",
          "example": "MassQuoteBot7",
          "type": "string"
        }
      },
      "required": [
        "frozen_until"
      ]
    },
    "user_portfolio_notification": {
      "properties": {
        "additional_reserve": {
          "$ref": "#/components/schemas/types/additional_reserve"
        },
        "available_funds": {
          "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 2.2638913,
          "type": "number"
        },
        "available_withdrawal_funds": {
          "description": "The account's available to withdrawal funds",
          "example": 2.26,
          "type": "number"
        },
        "balance": {
          "description": "The account's balance",
          "example": 3.4906363,
          "type": "number"
        },
        "cross_collateral_enabled": {
          "description": "When `true` cross collateral is enabled for user",
          "example": true,
          "type": "boolean"
        },
        "currency": {
          "description": "The selected currency",
          "example": "ETH",
          "type": "string"
        },
        "delta_total": {
          "$ref": "#/components/schemas/types/delta_total"
        },
        "delta_total_map": {
          "description": "Map of position sum's per index",
          "type": "object"
        },
        "equity": {
          "description": "The account's current equity",
          "example": 2.6437733,
          "type": "number"
        },
        "estimated_liquidation_ratio": {
          "description": "[DEPRECATED] Estimated Liquidation Ratio is returned only for users with `segregated_sm` margin model. Multiplying it by future position's market price returns its estimated liquidation price. Use estimated_liquidation_ratio_map instead.",
          "example": 2.34e-05,
          "type": "number"
        },
        "estimated_liquidation_ratio_map": {
          "description": "Map of Estimated Liquidation Ratio per index, it is returned only for users with `segregated_sm` margin model. Multiplying it by future position's market price returns its estimated liquidation price.",
          "type": "object"
        },
        "fee_balance": {
          "$ref": "#/components/schemas/types/fee_balance"
        },
        "futures_pl": {
          "description": "Futures profit and Loss",
          "example": 0,
          "type": "number"
        },
        "futures_session_rpl": {
          "description": "Futures session realized profit and Loss",
          "example": 0,
          "type": "number"
        },
        "futures_session_upl": {
          "description": "Futures session unrealized profit and Loss",
          "example": 0,
          "type": "number"
        },
        "initial_margin": {
          "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 0.379882,
          "type": "number"
        },
        "maintenance_margin": {
          "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 0.1334519,
          "type": "number"
        },
        "margin_balance": {
          "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
          "example": 2.25,
          "type": "number"
        },
        "margin_model": {
          "description": "Name of user's currently enabled margin model",
          "example": "segregated_sm",
          "type": "string"
        },
        "options_delta": {
          "description": "Options summary delta",
          "example": 0,
          "type": "number"
        },
        "options_gamma": {
          "description": "Options summary gamma",
          "example": 0,
          "type": "number"
        },
        "options_gamma_map": {
          "description": "Map of options' gammas per index",
          "type": "object"
        },
        "options_pl": {
          "description": "Options profit and Loss",
          "example": 0,
          "type": "number"
        },
        "options_session_rpl": {
          "description": "Options session realized profit and Loss",
          "example": 0,
          "type": "number"
        },
        "options_session_upl": {
          "description": "Options session unrealized profit and Loss",
          "example": 0,
          "type": "number"
        },
        "options_theta": {
          "description": "Options summary theta",
          "example": 0,
          "type": "number"
        },
        "options_theta_map": {
          "description": "Map of options' thetas per index",
          "type": "object"
        },
        "options_value": {
          "description": "Options value",
          "example": 0,
          "type": "number"
        },
        "options_vega": {
          "description": "Options summary vega",
          "example": 0,
          "type": "number"
        },
        "options_vega_map": {
          "description": "Map of options' vegas per index",
          "type": "object"
        },
        "portfolio_margining_enabled": {
          "description": "When `true` portfolio margining is enabled for user",
          "example": true,
          "type": "boolean"
        },
        "projected_delta_total": {
          "$ref": "#/components/schemas/types/projected_delta_total"
        },
        "projected_initial_margin": {
          "$ref": "#/components/schemas/types/projected_initial_margin"
        },
        "projected_maintenance_margin": {
          "$ref": "#/components/schemas/types/projected_maintenance_margin"
        },
        "session_rpl": {
          "$ref": "#/components/schemas/types/rpl"
        },
        "session_upl": {
          "$ref": "#/components/schemas/types/upl"
        },
        "total_delta_total_usd": {
          "description": "Optional (only for users using cross margin). The account's total delta total in all cross collateral currencies, expressed in USD",
          "example": 1.8,
          "type": "number"
        },
        "total_equity_usd": {
          "description": "Optional (only for users using cross margin). The account's total equity in all cross collateral currencies, expressed in USD",
          "example": 2.6437733,
          "type": "number"
        },
        "total_initial_margin_usd": {
          "description": "Optional (only for users using cross margin). The account's total initial margin in all cross collateral currencies, expressed in USD",
          "example": 0.379882,
          "type": "number"
        },
        "total_maintenance_margin_usd": {
          "description": "Optional (only for users using cross margin). The account's total maintenance margin in all cross collateral currencies, expressed in USD",
          "example": 0.1334519,
          "type": "number"
        },
        "total_margin_balance_usd": {
          "description": "Optional (only for users using cross margin). The account's total margin balance in all cross collateral currencies, expressed in USD",
          "example": 2.25,
          "type": "number"
        },
        "total_pl": {
          "description": "Profit and loss",
          "example": 0.02032221,
          "type": "number"
        }
      },
      "required": [
        "currency",
        "equity",
        "maintenance_margin",
        "initial_margin",
        "available_funds",
        "available_withdrawal_funds",
        "balance",
        "margin_balance",
        "session_upl",
        "session_rpl",
        "total_pl",
        "options_pl",
        "options_session_upl",
        "options_session_rpl",
        "options_delta",
        "options_gamma",
        "options_value",
        "options_vega",
        "options_theta",
        "options_gamma_map",
        "options_vega_map",
        "options_theta_map",
        "futures_pl",
        "futures_session_upl",
        "futures_session_rpl",
        "delta_total_map",
        "projected_delta_total",
        "portfolio_margining_enabled",
        "cross_collateral_enabled",
        "margin_model",
        "projected_maintenance_margin"
      ]
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/multicast/get_instrument_dictionary": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/multicast_get_instrument_dictionary_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves a dictionary mapping instrument names to their corresponding instument ids.",
        "tags": [
          "internal",
          "multicast"
        ]
      }
    },
    "/multicast/get_packet": {
      "get": {
        "parameters": [
          {
            "description": "Multicast channel ID",
            "in": "query",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sequence number of the packet in the multicast channel",
            "in": "query",
            "name": "seq",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/multicast_get_packet_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves a packet from the multicast channel packet history",
        "tags": [
          "internal",
          "multicast"
        ]
      }
    },
    "/multicast/get_packets": {
      "get": {
        "parameters": [
          {
            "description": "Multicast channel ID",
            "in": "query",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Starting sequence number of the packet in the multicast channel",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "End sequence number of the packet in the multicast channel",
            "in": "query",
            "name": "end",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/multicast_get_packets_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves a range of packet from the multicast channel packet history",
        "tags": [
          "internal",
          "multicast"
        ]
      }
    },
    "/private/accept_block_rfq": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/accept_block_rfq.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_trade_price"
          },
          {
            "$ref": "#/components/parameters/block_rfq_amount"
          },
          {
            "$ref": "#/components/parameters/block_rfq_taker_direction"
          },
          {
            "$ref": "#/components/parameters/block_rfq_hedge_leg_trade"
          },
          {
            "$ref": "#/components/parameters/block_rfq_trade_legs"
          },
          {
            "description": "Specifies how long the order should remain active",
            "in": "query",
            "name": "time_in_force",
            "required": true,
            "schema": {
              "enum": [
                "fill_or_kill",
                "good_til_cancelled"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/accept_block_rfq.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_accept_block_rfq_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Taker method</b> <p>This method allows Block RFQ taker to accept the response by sending a single crossing price. The order can be either filled immediately (`fill_or_kill`) or remain active until cancelled (`good_til_cancelled`). Please note that after Block RFQ creation, a grace period of 5 seconds begins, during which the taker cannot see quotes or trade the Block RFQ.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/activate_security_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/activate_security_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/security_key_name"
          },
          {
            "description": "Activation challenge as received from `private/get_security_activation_data`",
            "in": "query",
            "name": "activation_challenge",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`true` if new security key should be assigned to signing in",
            "in": "query",
            "name": "forLogin",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "`true` if new security key should be assigned to wallet management in",
            "in": "query",
            "name": "forWallet",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "`true` if new security key should be assigned to account management in",
            "in": "query",
            "name": "forAccount",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "`true` if new security key should be assigned to admin management in, it should be included only for users with backend access",
            "in": "query",
            "name": "forAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "TFA code for given secret, required only for type `tfa`",
            "in": "query",
            "name": "tfa_confirmation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "attestation data received after webauthn registration, required only for type `u2f`",
            "in": "query",
            "name": "attestationObject",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client data received after webauthn registration, required only for type `u2f`",
            "in": "query",
            "name": "clientDataJSON",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "credential id data received after webauthn registration, required only for type `u2f`",
            "in": "query",
            "name": "credentialId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/activate_security_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Activates Security Key for current account, required `read_write' 'account' scope",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/private/add_block_rfq_quote": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/add_block_rfq_quote.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_quote_label"
          },
          {
            "$ref": "#/components/parameters/block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_amount"
          },
          {
            "$ref": "#/components/parameters/trade_direction"
          },
          {
            "$ref": "#/components/parameters/block_rfq_legs_quote"
          },
          {
            "$ref": "#/components/parameters/block_rfq_hedge_leg_quote"
          },
          {
            "$ref": "#/components/parameters/execution_instruction"
          },
          {
            "$ref": "#/components/parameters/block_rfq_aggregated_price"
          },
          {
            "$ref": "#/components/parameters/expires_at"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/add_block_rfq_quote.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_add_block_rfq_quote_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Maker method</b> <p>This method adds quote to the existing Block RFQ. To calculate individual leg prices, the `private/get_leg_prices` endpoint can be utilized.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/add_to_address_book": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/add_to_address_book.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          },
          {
            "$ref": "#/components/parameters/currency_address"
          },
          {
            "$ref": "#/components/parameters/address_label"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_did"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_website"
          },
          {
            "$ref": "#/components/parameters/beneficiary_first_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_last_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_company_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_address"
          },
          {
            "$ref": "#/components/parameters/agree_to_share_with_3rd_party"
          },
          {
            "$ref": "#/components/parameters/personal_wallet"
          },
          {
            "$ref": "#/components/parameters/extra_currencies"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/add_to_address_book.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_add_to_address_book_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Adds new entry to address book of given type",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/address_ownership": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/currency_address"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/address_ownership.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/address_ownership"
                }
              }
            }
          }
        },
        "summary": "Get the ownership information about a customer blockchain address via Notabene.",
        "tags": [
          "private",
          "internal"
        ]
      }
    },
    "/private/approve_block_trade": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/approve_block_trade.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_timestamp"
          },
          {
            "$ref": "#/components/parameters/block_trade_nonce"
          },
          {
            "$ref": "#/components/parameters/block_trade_role"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/ok.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`block_trade:read_write`",
        "summary": "Used to approve a pending block trade. `nonce` and `timestamp` are used to identify the block trade while `role` should be opposite to the trading counterparty.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/buy": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/buy.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/order_contracts"
          },
          {
            "$ref": "#/components/parameters/order_type"
          },
          {
            "$ref": "#/components/parameters/order_label"
          },
          {
            "$ref": "#/components/parameters/order_price"
          },
          {
            "$ref": "#/components/parameters/time_in_force"
          },
          {
            "$ref": "#/components/parameters/display_amount"
          },
          {
            "$ref": "#/components/parameters/post_only_buy"
          },
          {
            "$ref": "#/components/parameters/reject_post_only"
          },
          {
            "$ref": "#/components/parameters/reduce_only"
          },
          {
            "$ref": "#/components/parameters/trigger_price"
          },
          {
            "$ref": "#/components/parameters/trigger_offset"
          },
          {
            "$ref": "#/components/parameters/trigger"
          },
          {
            "$ref": "#/components/parameters/advanced_order_type"
          },
          {
            "$ref": "#/components/parameters/mmp"
          },
          {
            "$ref": "#/components/parameters/valid_until"
          },
          {
            "$ref": "#/components/parameters/linked_order_type"
          },
          {
            "$ref": "#/components/parameters/trigger_fill_condition"
          },
          {
            "$ref": "#/components/parameters/otoco_config"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/buy.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_buy_and_sell_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Places a buy order for an instrument.",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      },
      "x-order": 100
    },
    "/private/cancel": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancel an order, specified by order id",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_all": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_all.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/freeze_quotes"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "This method cancels all users orders and trigger orders within all currencies and instrument kinds.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_all_block_rfq_quotes": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_all_block_rfq_quotes.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all_block_rfq_quotes.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_block_rfq_quotes_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Maker method</b> <p>This method cancels all user quotes in all Block RFQs. Optionally cancels all quotes in a specific RFQ if the `block_rfq_id` is provided.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/cancel_all_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_all_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/optional_simple_order_type"
          },
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/freeze_quotes"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancels all orders by currency, optionally filtered by instrument kind and/or order type.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_all_by_currency_pair": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_all_by_currency_pair.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_pair"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/optional_simple_order_type"
          },
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/freeze_quotes"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all_by_currency_pair.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancels all orders by currency pair, optionally filtered by instrument kind and/or order type.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_all_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_all_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_simple_order_type"
          },
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/include_combos_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/freeze_quotes"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancels all orders by instrument, optionally filtered by order type.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_all_by_kind_or_type": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_all_by_kind_or_type.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any_and_list"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/optional_simple_order_type"
          },
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/freeze_quotes"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all_by_kind_or_type.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancels all orders in currency(currencies), optionally filtered by instrument kind and/or order type.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_block_rfq": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_block_rfq.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_block_rfq.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_block_rfq_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Taker method</b> <p>This method cancels a Block RFQ using the specified `block_rfq_id`.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/cancel_block_rfq_quote": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_block_rfq_quote.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_quote_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_quote_label"
          },
          {
            "$ref": "#/components/parameters/optional_block_rfq_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_block_rfq_quote.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_block_rfq_quote_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Maker method</b> <p>This method cancels a Block RFQ quote using the specified `block_rfq_quote_id`. Alternatively, user can use a combination of `block_rfq_id` and `label` to cancel the quote.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/cancel_block_rfq_trigger": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_block_rfq_trigger.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_block_rfq_trigger.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_block_rfq_trigger_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Taker method</b> <p>This method allows Block RFQ taker to cancel an active trigger for a Block RFQ. The response includes the full Block RFQ object with the trade trigger state set to cancelled.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/cancel_by_label": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_by_label.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/required_order_label"
          },
          {
            "$ref": "#/components/parameters/optional_currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_by_label.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_all_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancels orders by label. All user's orders (trigger orders too), with a given label are cancelled in all currencies or in one given currency (in this case currency queue is used) ",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_custody_withdrawal_address_change": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_custody_withdrawal_address_change.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_custody_withdrawal_address_change.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/custody_account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Allows setting address for custody withdrawals, first address is set immediately, changing this might be delayed if withdrawal delay is set for account",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/cancel_pending_custody_withdrawals": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_pending_custody_withdrawals.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_pending_custody_withdrawals.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/custody_account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Cancels pending custody withdrawals and transfers funds back to trading balance",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/cancel_quotes": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_quotes.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/detailed_bool_for_cancel_all"
          },
          {
            "$ref": "#/components/parameters/freeze_quotes"
          },
          {
            "description": "Type of cancel criteria.",
            "in": "query",
            "name": "cancel_type",
            "required": true,
            "schema": {
              "enum": [
                "delta",
                "quote_set_id",
                "instrument",
                "instrument_kind",
                "currency",
                "currency_pair",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Min delta to cancel by delta (for `cancel_type`: `delta`).",
            "in": "query",
            "name": "min_delta",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Max delta to cancel by delta (for `cancel_type`: `delta`).",
            "in": "query",
            "name": "max_delta",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Unique identifier for the Quote set.",
            "in": "query",
            "name": "quote_set_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Instrument name.",
            "in": "query",
            "name": "instrument_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/currency_pair"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_all_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_cancel_quotes_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Cancels quotes based on the provided type. `delta` cancels quotes within a Delta range defined by `min_delta` and `max_delta`. `quote_set_id` cancels quotes by a specific Quote Set identifier. `instrument` cancels all quotes associated with a particular instrument. `kind` cancels all quotes for a certain instrument kind. `currency` cancels all quotes in a specified currency. `currency_pair` cancels all quotes in a specified currency pair. `all` cancels all quotes.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/cancel_transfer_by_id": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_transfer_by_id.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_transfer_by_id.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_submit_transfer_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Cancel transfer",
        "tags": [
          "private",
          "wallet"
        ]
      }
    },
    "/private/cancel_withdrawal": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/cancel_withdrawal.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/withdrawal_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/cancel_withdrawal.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_withdraw_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Cancels withdrawal request",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/change_api_key_name": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/change_api_key_name.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_id"
          },
          {
            "$ref": "#/components/parameters/key_name_required"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/change_api_key_name.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Changes name for key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/change_margin_model": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/change_margin_model.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_user_id"
          },
          {
            "$ref": "#/components/parameters/margin_model"
          },
          {
            "$ref": "#/components/parameters/dry_run"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/change_margin_model.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_change_margin_model_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Change margin model",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/change_password": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/change_password.request.json"
          }
        },
        "parameters": [
          {
            "description": "New password",
            "in": "query",
            "name": "new_password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current password",
            "in": "query",
            "name": "old_password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/change_password.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_change_password_response"
                }
              }
            },
            "description": "Fresh tokens"
          }
        },
        "summary": "Change the password for current account. New tokens are returned and other sessions are closed on success.",
        "tags": [
          "private",
          "account_management",
          "internal"
        ]
      }
    },
    "/private/change_scope_in_api_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/change_scope_in_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_scope"
          },
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/change_scope_in_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Changes scope for key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/change_security_key_assignment": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/change_security_key_assignment.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/security_key_id"
          },
          {
            "description": "Security Key assignments, list of `login`, `account`, `wallet`, `admin`",
            "in": "query",
            "name": "assignments",
            "required": true,
            "schema": {
              "items": {
                "enum": [
                  "login",
                  "account",
                  "wallet",
                  "admin"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Action, what server should do with given assignments: `set` - they will be added to Security Key, or `unset` - they will be removed from Security Key",
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "set",
                "unset"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/change_security_key_assignment.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Changes assignments of given security key",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/private/change_subaccount_name": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/change_subaccount_name.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The new user name",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "example": "newUserName",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/change_subaccount_name.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read_write` and mainaccount",
        "summary": "Change the user name for a subaccount",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/chat_get_account_summary": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/private_chat_get_account_summary"
                }
              }
            },
            "description": "account summary"
          }
        },
        "summary": "get chat account summary",
        "tags": [
          "private",
          "chat",
          "internal"
        ]
      }
    },
    "/private/chat_set_nick": {
      "get": {
        "parameters": [
          {
            "description": "nick for the chat",
            "in": "query",
            "name": "nick",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/private_chat_set_nick"
                }
              }
            },
            "description": "nick and jid node"
          }
        },
        "summary": "set chat nick",
        "tags": [
          "private",
          "chat",
          "internal"
        ]
      }
    },
    "/private/close_position": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/close_position.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/simple_order_type_market_limit"
          },
          {
            "$ref": "#/components/parameters/optional_price"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/close_position.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_buy_and_sell_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Makes closing position reduce only order .",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      }
    },
    "/private/create_api_key": {
      "get": {
        "description": "Creates a new api key with a given scope. [Important notes](#creating-editing-removing-api-keys)\n\n**\ud83d\udcd6 Related Support Article:** [Creating new API key on Deribit](https://support.deribit.com/hc/en-us/articles/26268257333661-Creating-new-API-key-on-Deribit)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/create_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_scope"
          },
          {
            "$ref": "#/components/parameters/key_name"
          },
          {
            "$ref": "#/components/parameters/public_key"
          },
          {
            "$ref": "#/components/parameters/key_features"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/create_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Creates a new api key with a given scope. [Important notes](#creating-editing-removing-api-keys)",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/create_block_rfq": {
      "get": {
        "description": "**Taker method**\n\nThis method creates a new Block RFQ.\n\n<br><b>Block RFQ pre-allocation:</b> The taker can split the total amount between different (sub)accounts using the `trade_allocations` parameter. The taker can also allocate to himself. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and `amount`.</p>\n\n**\ud83d\udcd6 Related Support Article:** [Deribit Block RFQ API walkthrough](https://support.deribit.com/hc/en-us/articles/25951393746589-Deribit-Block-RFQ-API-walkthrough)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/create_block_rfq.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_legs"
          },
          {
            "$ref": "#/components/parameters/trade_allocations"
          },
          {
            "$ref": "#/components/parameters/block_rfq_hedge_leg"
          },
          {
            "$ref": "#/components/parameters/block_rfq_label"
          },
          {
            "$ref": "#/components/parameters/block_rfq_makers"
          },
          {
            "$ref": "#/components/parameters/disclosed"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/create_block_rfq.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_create_block_rfq_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/create_combo": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/create_combo.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/combo_trades"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/create_combo.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_create_combo_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Verifies and creates a combo book or returns an existing combo matching given trades",
        "tags": [
          "combo_books",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/create_deposit_address": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/create_deposit_address.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/create_deposit_address.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_deposit_address_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Creates deposit address in currency",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/create_subaccount": {
      "get": {
        "description": "Create a new subaccount\n\n**\ud83d\udcd6 Related Support Article:** [Subaccounts](https://support.deribit.com/hc/en-us/articles/25944616386973-Subaccounts)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/create_subaccount.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/create_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_create_subaccount_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read_write` and mainaccount",
        "summary": "Create a new subaccount",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/custody/bind_corporate_account": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/bind_corporate_account.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external_id"
          },
          {
            "$ref": "#/components/parameters/business_registration_number"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/bind_corporate_account.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/ok_response"
                    }
                  ]
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write` and mainaccount",
        "summary": "Verifies the `business_registration_number`, then binds the corporate account to the custodian with the given `external_id`.",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/deposit_funds": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/deposit_funds.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/deposit_currency_amount"
          },
          {
            "$ref": "#/components/parameters/request_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/deposit_funds.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/ok_response"
                    }
                  ]
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write`",
        "summary": "Notify Deribit about increase of user \"in custody\" balance",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/execute_settlement_instruction": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/execute_settlement_instruction.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/custody_settlement_id"
          },
          {
            "$ref": "#/components/parameters/custody_currency"
          },
          {
            "$ref": "#/components/parameters/expected_custody_balance"
          },
          {
            "$ref": "#/components/parameters/custody_settlement_amount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/execute_settlement.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_custody_settlement_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write`",
        "summary": "Custodian has executed the settlement for the given currencies and exchange updates the client's `custody_balance`` accordingly.",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/get_all_balances_snapshot": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_all_balances_snapshot.request.json"
          }
        },
        "parameters": [
          {
            "description": "A list of currencies for which the balance snapshot will be retrieved. If no currencies are specified, the handler returns the result for all available currencies.",
            "in": "query",
            "name": "currencies",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "description": "If `true`, the response will be signed with the private key",
            "in": "query",
            "name": "sign_response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_all_balances_snapshot.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_all_balances_snapshot_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read`",
        "summary": "Get a snapshot of the \"in exchange\" user balance for multiple currencies",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/get_balance": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_balance.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_balance.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_balance_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read`",
        "summary": "Get \"in exchange\" balance of the user",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/get_balance_snapshot": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_balance_snapshot.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "description": "If `true`, the response will be signed with the private key",
            "in": "query",
            "name": "sign_response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_balance_snapshot.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_balance_snapshot_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read`",
        "summary": "Get a snapshot of the \"in exchange\" user balance",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/get_settlement": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_settlement.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/custody_settlement_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_settlement.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_custody_settlement_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read`",
        "summary": "Retrieve details about a specific settlement",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/put_balance": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/put_balance.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/request_id"
          },
          {
            "$ref": "#/components/parameters/difference"
          },
          {
            "$ref": "#/components/parameters/balance"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/put_balance.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_put_balance_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write`",
        "summary": "Update \"in custody\" balance of the user",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/review_settlement": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/review_settlement.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/custody_settlement_id"
          },
          {
            "$ref": "#/components/parameters/custody_settlement_review"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/review_settlement.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_custody_settlement_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write`",
        "summary": "Custodian reviewed the settlement and provides the review result. For each currency custodian can either confirm, ignore or reject the settlement instruction and provide a reason.",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/unbind_account": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/unbind_account.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/unbind_account.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/ok_response"
                    }
                  ]
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write` and mainaccount",
        "summary": "Verifies the `external_id`, then unbinds the account from the custodian and removes the `external_id`. Unbinding can only be performed after the account offboarding process is complete and if the custodian supports it.",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody/withdraw_funds": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/withdraw_funds.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/withdrawal_currency_amount"
          },
          {
            "$ref": "#/components/parameters/request_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/withdraw_funds.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/ok_response"
                    }
                  ]
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write`",
        "summary": "Verifies if the \"in exchange\" balance of the user, is sufficient for withdrawal. If the withdrawal is feasible, it deducts the requested amount from that balance",
        "tags": [
          "private",
          "custody"
        ]
      }
    },
    "/private/custody_deposit": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/custody_deposit.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          },
          {
            "$ref": "#/components/parameters/currency_amount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/custody_deposit.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/custody_account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Transfer funds from custody balance to trading balance",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/custody_withdraw": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/custody_withdraw.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          },
          {
            "$ref": "#/components/parameters/currency_amount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/custody_withdraw.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/custody_account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Transfer funds from trading balance to custody balance",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/deactivate_security_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/deactivate_security_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/security_key_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/deactivate_security_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Removes Security Key; Key can be removed when it is last key or when there are more keys than one and given one has not got account assignment; required `read_write' 'account' scope",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/private/delete_address_beneficiary": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/delete_address_beneficiary.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/currency_address"
          },
          {
            "$ref": "#/components/parameters/address_tag"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/delete_address_beneficiary.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_delete_address_beneficiary_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Deletes address beneficiary information",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/disable_api_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/disable_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/disable_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Disables api key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/disable_cancel_on_disconnect": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/disable_cancel_on_disconnect.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/cod_scope"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/disable_cancel_on_disconnect.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Disable Cancel On Disconnect for the connection.</br></br> When change is applied for the account, then every newly opened connection will start with **inactive** Cancel on Disconnect.",
        "tags": [
          "session_management",
          "private"
        ]
      }
    },
    "/private/disable_security_keys_for_subaccount": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/disable_security_keys_for_subaccount.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/disable_security_keys_for_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Disable Security Keys for a subaccount.",
        "tags": [
          "private",
          "account_management",
          "internal"
        ]
      }
    },
    "/private/edit": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/edit.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/order_contracts"
          },
          {
            "$ref": "#/components/parameters/edit_order_price"
          },
          {
            "$ref": "#/components/parameters/post_only_edit"
          },
          {
            "$ref": "#/components/parameters/reduce_only"
          },
          {
            "$ref": "#/components/parameters/reject_post_only"
          },
          {
            "$ref": "#/components/parameters/edit_advanced_order_type"
          },
          {
            "$ref": "#/components/parameters/trigger_price"
          },
          {
            "$ref": "#/components/parameters/trigger_offset"
          },
          {
            "$ref": "#/components/parameters/mmp"
          },
          {
            "$ref": "#/components/parameters/valid_until"
          },
          {
            "$ref": "#/components/parameters/display_amount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/edit.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_edit_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Change price, amount and/or other properties of an order.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      },
      "x-order": 300
    },
    "/private/edit_api_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/edit_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_id"
          },
          {
            "$ref": "#/components/parameters/key_scope"
          },
          {
            "$ref": "#/components/parameters/key_name"
          },
          {
            "$ref": "#/components/parameters/enable_key"
          },
          {
            "$ref": "#/components/parameters/key_features"
          },
          {
            "$ref": "#/components/parameters/whitelist_ip"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/edit_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Edits existing API key. At least one parameter is required. [Important notes](#creating-editing-removing-api-keys)",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/edit_block_rfq_quote": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/edit_block_rfq_quote.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_legs_quote"
          },
          {
            "$ref": "#/components/parameters/block_rfq_amount"
          },
          {
            "$ref": "#/components/parameters/block_rfq_quote_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_quote_label"
          },
          {
            "$ref": "#/components/parameters/block_rfq_hedge_leg_quote"
          },
          {
            "$ref": "#/components/parameters/optional_block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_aggregated_price"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/edit_block_rfq_quote.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_edit_block_rfq_quote_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Maker method</b> <p>This method edits a Block RFQ quote using the specified `block_rfq_quote_id`. Alternatively, user can use a combination of `block_rfq_id` and `label` to edit the quote.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/edit_by_label": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/edit_by_label.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_label"
          },
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/order_contracts"
          },
          {
            "$ref": "#/components/parameters/edit_order_price"
          },
          {
            "$ref": "#/components/parameters/post_only_edit"
          },
          {
            "$ref": "#/components/parameters/reduce_only"
          },
          {
            "$ref": "#/components/parameters/reject_post_only"
          },
          {
            "$ref": "#/components/parameters/edit_advanced_order_type"
          },
          {
            "$ref": "#/components/parameters/trigger_price"
          },
          {
            "$ref": "#/components/parameters/mmp"
          },
          {
            "$ref": "#/components/parameters/valid_until"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/edit_by_label.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_edit_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Change price, amount and/or other properties of an order with a given label. It works only when there is one open order with this label",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      },
      "x-order": 300
    },
    "/private/enable_affiliate_program": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/enable_affiliate_program.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/enable_affiliate_program.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Enables affiliate program for user",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/enable_api_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/enable_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/enable_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Enables api key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/enable_cancel_on_disconnect": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/enable_cancel_on_disconnect.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/cod_scope"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/enable_cancel_on_disconnect.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Enable Cancel On Disconnect for the connection. After enabling, all orders created via this connection will be automatically cancelled when the connection is closed. <br></br>Cancel is triggered in the following cases: when the TCP connection is properly terminated, when the connection is closed due to 10 minutes of inactivity, or when a heartbeat detects a disconnection. To reduce the inactivity timeout, consider using [public/set_heartbeat](https://docs.deribit.com/#public-set_heartbeat).<br></br> **Note**: If the connection is gracefully closed using [private/logout](https://docs.deribit.com/#private-logout), cancel-on-disconnect will **not** be triggered.<br></br> **Notice**: Cancel-on-Disconnect does not affect orders created by other connections - they will remain active! When change is applied on the `account` scope, then every newly opened connection will start with **active** Cancel on Disconnect.",
        "tags": [
          "session_management",
          "private"
        ]
      },
      "x-order": 100
    },
    "/private/execute_block_trade": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/execute_block_trade.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_timestamp"
          },
          {
            "$ref": "#/components/parameters/block_trade_nonce"
          },
          {
            "$ref": "#/components/parameters/block_trade_role"
          },
          {
            "$ref": "#/components/parameters/block_trade_trades"
          },
          {
            "$ref": "#/components/parameters/block_trade_counterparty_signature"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/execute_block_trade.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_trade_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read_write`",
        "summary": "Creates block trade<br><br>The whole request have to be exact the same as in `private/verify_block_trade`, only `role` field should be set appropriately - it basically means that both sides have to agree on the same `timestamp`, `nonce`, `trades` fields and server will assure that `role` field is different between sides (each party accepted own role).<br><br>Using the same `timestamp` and `nonce` by both sides in `private/verify_block_trade` assures that even if unintentionally both sides execute given block trade with valid `counterparty_signature`, the given block trade will be executed only once.<br><br><strong>Note:</strong> In the API, the `direction` field is always expressed from the maker's perspective. This means that when you accept a block trade as a taker, the direction shown in the API represents the opposite side of your trade. For example, if you are buying puts as a taker, the API will show the operation as a \"sell put\" (maker's perspective), and you will be verifying and accepting a \"sell put\" block trade.<br><br>**\ud83d\udcd6 Related Support Article:** [Block Trading](https://support.deribit.com/hc/en-us/articles/25944688627229-Block-Trading)",
        "tags": [
          "private",
          "block_trade",
          "matching_engine"
        ]
      }
    },
    "/private/generate_custody_deposit_address": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/generate_custody_deposit_address.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/generate_custody_deposit_address.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/custody_account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Creates deposit address to transfer funds from custody platform to Deribit - it can be called only once for each currency",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/get_access_log": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_access_log.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_access_log.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_access_log_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read`",
        "summary": "Lists access logs for the user",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_account_summaries": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_account_summaries.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "subaccount_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Include additional fields",
            "in": "query",
            "name": "extended",
            "required": false,
            "schema": {
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_account_summaries.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_account_summaries_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves a per-currency list of user account summaries. To read subaccount summary use `subaccount_id` parameter.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_account_summary": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_account_summary.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "subaccount_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Include additional fields",
            "in": "query",
            "name": "extended",
            "required": false,
            "schema": {
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_account_summary.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_account_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves user account summary. To read subaccount summary use `subaccount_id` parameter.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_address_beneficiary": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_address_beneficiary.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/currency_address"
          },
          {
            "$ref": "#/components/parameters/address_tag"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_address_beneficiary.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_address_beneficiary_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Retrieves address beneficiary information",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_address_book": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_address_book.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_address_book.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_address_book_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Retrieves address book of given type",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_affiliate_program_info": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_affiliate_program_info.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_affiliate_program_info.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_affiliate_program_info_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves user`s affiliates count, payouts and link.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_block_rfq_makers": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_rfq_makers.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_rfq_makers.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_rfq_makers_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read`",
        "summary": "This method returns a list of all available Block RFQ makers.",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/get_block_rfq_quotes": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_rfq_quotes.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_quote_label"
          },
          {
            "$ref": "#/components/parameters/block_rfq_quote_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_rfq_quotes.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_rfq_quotes_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read`",
        "summary": "<b>Maker method</b> <p>This method retrieves all open quotes for Block RFQs. When a `block_rfq_id` is specified, only the open quotes for that particular Block RFQ will be returned. When a `label` is specified, all quotes with this label are returned. `block_rfq_quote_id` returns one specific quote.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/get_block_rfq_user_info": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_rfq_user_info.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_rfq_user_info.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_rfq_user_info_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read`",
        "summary": "Returns identity and rating information for the requesting account and its subaccounts. Includes both group-level and individual user-level alias data, if available.",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/get_block_rfqs": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_rfqs.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_count"
          },
          {
            "$ref": "#/components/parameters/block_rfq_state"
          },
          {
            "$ref": "#/components/parameters/block_rfq_role"
          },
          {
            "$ref": "#/components/parameters/block_rfq_continuation"
          },
          {
            "$ref": "#/components/parameters/optional_block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/optional_currency_block_rfq"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_rfqs.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_rfqs_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read`",
        "summary": "This method returns a list of Block RFQs that were either created by the user or assigned to them as a maker, sorted in descending order. `trades` and `mark_price` are only visible for the filled Block RFQ. When a `block_rfq_id` is specified, only that particular Block RFQ will be returned. If called by a `taker`, response will additionally include `makers` list and `label` if previously provided. If called by the `maker`, the `trades`  will include the maker's alias, but only for trades in which this maker participated. Can be optionally filtered by currency.",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/get_block_trade": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_trade.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_trade.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_trade_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "Returns information about the users block trade",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/get_block_trade_requests": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_trade_requests.request.json"
          }
        },
        "parameters": [
          {
            "description": "Broker code to filter block trade requests. Only broker clients can use `broker_code` to query for their executed broker block trades.",
            "in": "query",
            "name": "broker_code",
            "required": false,
            "schema": {
              "example": "jpqYKgg1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_trade_requests.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_trade_requests_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "Provides a list of block trade requests including pending approvals, declined trades, and expired trades. `timestamp` and `nonce` received in response can be used to approve or reject the pending block trade.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.<br><br> Only broker clients can use `broker_code` to query for their broker block trade requests.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/get_block_trades": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_block_trades.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_currency"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/optional_block_trade_start_id"
          },
          {
            "$ref": "#/components/parameters/optional_block_trade_end_id"
          },
          {
            "$ref": "#/components/parameters/optional_block_rfq_id"
          },
          {
            "description": "Broker code to filter block trades. Only broker clients can use `broker_code` to filter broker block trades. Use `any` for all block trades.",
            "in": "query",
            "name": "broker_code",
            "required": false,
            "schema": {
              "example": "2krM7sJsx",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_block_trades.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_block_trades_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "Returns list of users block trades. If currency is not provided, returns block trades for all currencies. `block_rfq_id` can be provided to receive block trades related to that particular Block RFQ.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/get_broker_trade_requests": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_broker_trade_requests.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_broker_trade_requests.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_broker_trade_requests_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "**Broker Method** Provides a list of broker block trade requests including pending approvals, declined trades, and expired trades. `timestamp` and `nonce` received in response can be used to approve or reject the pending broker block trade.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/get_broker_trades": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_broker_trades.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_currency"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/optional_block_trade_start_id"
          },
          {
            "$ref": "#/components/parameters/optional_block_trade_end_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_broker_trades.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_broker_trades_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "**Broker Method** Returns list of broker block trades. If currency is not provided, returns broker block trades for all currencies.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/get_cancel_on_disconnect": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_cancel_on_disconnect.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/cod_scope"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_cancel_on_disconnect.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_cancel_on_disconnect_response"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "scopes": "`account:read`",
        "summary": "Read current Cancel On Disconnect configuration for the account.",
        "tags": [
          "session_management",
          "private"
        ]
      }
    },
    "/private/get_current_deposit_address": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_current_deposit_address.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_current_deposit_address.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_deposit_address_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Retrieve deposit address for currency",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_deposits": {
      "get": {
        "description": "Retrieve the latest users deposits\n\n**\ud83d\udcd6 Related Support Article:** [Deposits](https://support.deribit.com/hc/en-us/articles/25944616988957-Deposits)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_deposits.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_deposits.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_deposits_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Retrieve the latest users deposits",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_email_language": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_email_language.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_email_language.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_email_language_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves the language to be used for emails.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_jwt": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_jwt.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/jwt_recipient"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_jwt.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_jwt_response"
                }
              }
            },
            "description": "ok response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "Generate a JSON web token.",
        "tags": [
          "private"
        ]
      }
    },
    "/private/get_leg_prices": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_leg_prices.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/legs_for_prices"
          },
          {
            "$ref": "#/components/parameters/legs_price"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_leg_prices.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_leg_prices_response"
                }
              }
            }
          }
        },
        "summary": "This method returns individual leg prices for a given combo structure based on an aggregated price of the strategy and the mark prices of the individual legs. Please note that leg prices change dynamically with mark price fluctuations, and the algorithm is calibrated only for conventional option structures and future spreads. This method supports both inverse strategies and known linear structures within a single currency pair.",
        "tags": [
          "private",
          "combo_books"
        ]
      }
    },
    "/private/get_margins": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_margins.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/margins_quantity"
          },
          {
            "description": "Price",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "price": 7000.5,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/private_get_margins_response",
                  "examples": {
                    "jsonObject": {
                      "externalValue": "examples/private/get_margins.response.json"
                    }
                  }
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Get margins for a given instrument, amount and price.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_mmp_config": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_mmp_config.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name_derivative_optional"
          },
          {
            "description": "Specifies the MMP group for which the configuration is being retrieved. MMP groups are used for Mass Quotes. If MMP group is not provided, the endpoint returns the configuration for the MMP settings for regular orders. The index_name must be specified before using this parameter",
            "in": "query",
            "name": "mmp_group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, retrieves MMP configuration for Block RFQ. When set, requires `block_rfq` scope instead of `trade` scope. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
            "in": "query",
            "name": "block_rfq",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_mmp_config.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_mmp_config_response"
                }
              }
            },
            "description": "MMP Config"
          }
        },
        "scopes": "`trade:read` or `block_rfq:read` (when `block_rfq` = `true`)",
        "summary": "Get MMP configuration for an index, if the parameter is not provided, a list of all MMP configurations is returned. Empty list means no MMP configuration.",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      }
    },
    "/private/get_mmp_status": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_mmp_status.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name_derivative_optional"
          },
          {
            "description": "Specifies the MMP group for which the status is being retrieved. The `index_name` must be specified before using this parameter.",
            "in": "query",
            "name": "mmp_group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, retrieves MMP status for Block RFQ. When set, requires `block_rfq` scope instead of `trade` scope. Block RFQ MMP status is completely separate from normal order/quote MMP status.",
            "in": "query",
            "name": "block_rfq",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_mmp_status.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_mmp_status_response"
                }
              }
            },
            "description": "MMP Config"
          }
        },
        "scopes": "`trade:read` or `block_rfq:read` (when `block_rfq` = `true`)",
        "summary": "Get MMP status for triggered index (or group). If the parameter is not provided, a list of all triggered MMP statuses is returned.",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      }
    },
    "/private/get_new_announcements": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_new_announcements.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_new_announcements.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_announcements_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves announcements that have not been marked read by the user.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_open_orders": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_open_orders.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_order_type"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_open_orders_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_open_orders_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves list of user's open orders across many currencies.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_open_orders_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_open_orders_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_order_type"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_open_orders_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_open_orders_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves list of user's open orders.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_open_orders_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_open_orders_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_order_type"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_open_orders_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_open_orders_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves list of user's open orders within a given Instrument.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_open_orders_by_label": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_open_orders_by_label.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/order_label"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_open_orders_by_label.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_open_orders_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves list of user's open orders for given currency and label.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_order_history_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_order_history_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_orders"
          },
          {
            "$ref": "#/components/parameters/optional_include_unfilled_orders"
          },
          {
            "$ref": "#/components/parameters/with_continuation"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/historical"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_order_history_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_order_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves history of orders that have been partially or fully filled.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_order_history_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_order_history_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_orders"
          },
          {
            "$ref": "#/components/parameters/optional_include_unfilled_orders"
          },
          {
            "$ref": "#/components/parameters/with_continuation"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/historical"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_order_history_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_order_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves history of orders that have been partially or fully filled.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_order_margin_by_ids": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_order_margin_by_ids.request.json"
          }
        },
        "parameters": [
          {
            "description": "Ids of orders",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "items": {
                "example": "123456",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_order_margin_by_ids.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_order_margin_by_ids_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves initial margins of given orders",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_order_state": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_order_state.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_order_state.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_order_state_response"
                }
              }
            },
            "description": "ok response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the current state of an order.",
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/private/get_order_state_by_label": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_order_state_by_label.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/order_label"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_order_state_by_label.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_order_state_by_label_response"
                }
              }
            },
            "description": "ok response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the state of recent orders with a given label.",
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/private/get_pending_block_trades": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_pending_block_trades.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_pending_block_trades.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_pending_block_trades_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "**DEPRECATED**: This method is deprecated. Please use `private/get_block_trade_requests` instead.<br><br>Provides a list of pending block trade approvals. `timestamp` and `nonce` received in response can be used to approve or reject the pending block trade.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/get_pme_params": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_pme_params.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_pme_params.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_pme_params_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves restrictions for open orders for PM users.",
        "tags": [
          "account_management",
          "private",
          "internal"
        ]
      }
    },
    "/private/get_position": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_position.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_position.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_position_response"
                }
              }
            },
            "description": "When successful returns position"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "When some error occurs"
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve user position.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_positions": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_positions.request.json"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/types/currency_with_any"
            }
          },
          {
            "description": "Kind filter on positions",
            "in": "query",
            "name": "kind",
            "schema": {
              "$ref": "#/components/schemas/types/kind"
            }
          },
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "subaccount_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_positions.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_positions_response"
                }
              }
            },
            "description": "When successful returns array of positions"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "When some error occurs"
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve user positions. To retrieve subaccount positions, use `subaccount_id` parameter.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_security_key_activation_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_security_key_activation_data.request.json"
          }
        },
        "parameters": [
          {
            "description": "Type of new security key",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "u2f",
                "tfa"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/security_key_name"
          },
          {
            "description": "When `true` new secret for TFA or new U2F activation data is generated, when `false` only new `activation_challenge` is returned. Default: `true`",
            "in": "query",
            "name": "generate_new_secret",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_security_key_activation_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_security_key_activation_data_response"
                }
              }
            }
          }
        },
        "summary": "Returns data that is needed to activate security key, required `read_write' 'account' scope",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/private/get_security_keys_status": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_security_keys_status.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_security_keys_status.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_security_key_status_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Returns informations about Security Keys configuration",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/private/get_settlement_history_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_settlement_history_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_start_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_settlement_history_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_settlement_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves settlement, delivery and bankruptcy events that have affected your account.",
        "tags": [
          "trading",
          "private"
        ]
      },
      "x-order": 10200
    },
    "/private/get_settlement_history_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_settlement_history_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_start_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_settlement_history_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_settlement_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves public settlement, delivery and bankruptcy events filtered by instrument name",
        "tags": [
          "trading",
          "private"
        ]
      },
      "x-order": 10100
    },
    "/private/get_stats": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_stats.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_stats.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_stats_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves user volume and commissions statistics.",
        "tags": [
          "account_management",
          "private",
          "internal"
        ]
      }
    },
    "/private/get_subaccounts": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_subaccounts.request.json"
          }
        },
        "parameters": [
          {
            "description": "Portfolio flag: `true` for portfolio information, `false` for subaccount information only. `false` by default",
            "in": "query",
            "name": "with_portfolio",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_subaccounts.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_subaccounts_response"
                }
              }
            },
            "description": "ok response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "scopes": "`account:read`",
        "summary": "Get information about subaccounts. When called from subaccount, the response will include limited details for the main account and details for the subaccount initiating the request. The portfolio information will be included in the response only if the `with_portfolio` parameter is set to `true`.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_subaccounts_details": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_subaccounts_details.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "description": "Optional parameter to ask for open orders list, default: `false`",
            "in": "query",
            "name": "with_open_orders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_subaccounts_details.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_subaccounts_details_response"
                }
              }
            },
            "description": "ok response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "scopes": "`account:read`",
        "summary": "Get subaccounts positions",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_transaction_log": {
      "get": {
        "description": "Retrieve the latest user trades that have occurred for a specific instrument and within a given time range.\n\n**\ud83d\udcd6 Related Support Article:** [Transaction log](https://support.deribit.com/hc/en-us/articles/25944587269021-Transaction-log)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_transaction_log.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_query"
          },
          {
            "$ref": "#/components/parameters/optional_count100"
          },
          {
            "$ref": "#/components/parameters/optional_subbacount_id"
          },
          {
            "$ref": "#/components/parameters/continuation_as_integer"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_transaction_log.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_transaction_log_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieve the latest user trades that have occurred for a specific instrument and within a given time range.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_transfers": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_transfers.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_transfers.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_transfers_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Retrieve the user's transfers list",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_trigger_order_history": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_trigger_order_history.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "description": "Instrument name",
            "in": "query",
            "name": "instrument_name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/types/instrument_name"
            }
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_trigger_order_history.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_trigger_order_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieves detailed log of the user's trigger orders.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_user_locks": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_user_locks.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_user_locks.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_user_locks_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves information about locks on user account",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_user_trades_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_user_trades_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/optional_start_trade_id"
          },
          {
            "$ref": "#/components/parameters/optional_end_trade_id"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          },
          {
            "$ref": "#/components/parameters/historical"
          },
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "subaccount_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_user_trades_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_user_trades_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol. To read subaccount trades, use `subaccount_id` parameter.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_user_trades_by_currency_and_time": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_user_trades_by_currency_and_time.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          },
          {
            "$ref": "#/components/parameters/historical"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_user_trades_by_currency_and_time.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_user_trades_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol and within a given time range.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_user_trades_by_instrument": {
      "get": {
        "description": "Retrieve the latest user trades that have occurred for a specific instrument.\n\n**\ud83d\udcd6 Related Support Article:** [Accessing historical trades and orders using API](https://support.deribit.com/hc/en-us/articles/25973087226909-Accessing-historical-trades-and-orders-using-API)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_user_trades_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_start_seq"
          },
          {
            "$ref": "#/components/parameters/optional_end_seq"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/historical"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_user_trades_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_user_trades_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the latest user trades that have occurred for a specific instrument.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_user_trades_by_instrument_and_time": {
      "get": {
        "description": "Retrieve the latest user trades that have occurred for a specific instrument and within a given time range.\n\n**\ud83d\udcd6 Related Support Article:** [Accessing historical trades and orders using API](https://support.deribit.com/hc/en-us/articles/25973087226909-Accessing-historical-trades-and-orders-using-API)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_user_trades_by_instrument_and_time.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          },
          {
            "$ref": "#/components/parameters/historical"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_user_trades_by_instrument_and_time.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_user_trades_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the latest user trades that have occurred for a specific instrument and within a given time range.",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_user_trades_by_order": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_user_trades_by_order.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          },
          {
            "$ref": "#/components/parameters/historical"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_user_trades_by_order.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_user_trades_by_order_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the list of user trades that was created for given order",
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_withdrawal_policy_limits": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_withdrawal_policy_limits.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_withdrawal_policy_limits"
                }
              }
            }
          }
        },
        "summary": "Returns Withdrawal Policy Limits",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/get_withdrawal_policy_mode": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_withdrawal_policy_mode.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_withdrawal_policy_mode"
                }
              }
            }
          }
        },
        "summary": "Returns Global Withdrawal Policy for a currency",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/get_withdrawals": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/get_withdrawals.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/get_withdrawals.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_get_withdrawals_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Retrieve the latest users withdrawals",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/invalidate_block_trade_signature": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/invalidate_block_trade_signature.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_signature_to_invalidate"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/invalidate_block_trade_signature.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read_write`",
        "summary": "User at any time (before the private/execute_block_trade is called) can invalidate its own signature effectively cancelling block trade",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/list_address_beneficiaries": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/list_address_beneficiaries.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency_optional"
          },
          {
            "$ref": "#/components/parameters/currency_address_optional"
          },
          {
            "$ref": "#/components/parameters/address_tag"
          },
          {
            "$ref": "#/components/parameters/created_before"
          },
          {
            "$ref": "#/components/parameters/created_after"
          },
          {
            "$ref": "#/components/parameters/updated_before"
          },
          {
            "$ref": "#/components/parameters/updated_after"
          },
          {
            "$ref": "#/components/parameters/personal_wallet_optional"
          },
          {
            "$ref": "#/components/parameters/unhosted_wallet_optional"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_name_optional"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_did_optional"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_website"
          },
          {
            "$ref": "#/components/parameters/limit_optional"
          },
          {
            "$ref": "#/components/parameters/continuation"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/list_address_beneficiaries.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_list_address_beneficiaries_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read`",
        "summary": "Lists address beneficiaries with optional filtering and pagination",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/list_api_keys": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/list_api_keys.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/list_api_keys.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_list_api_keys_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Retrieves list of api keys. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/list_custody_accounts": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/list_custody_accounts.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/list_custody_accounts.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "items": {
                            "$ref": "#/components/schemas/custody_account"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Retrieves user custody accounts list.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/list_custody_logs": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/list_custody_logs.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_start_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/list_custody_logs.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "properties": {
                            "has_more": {
                              "type": "boolean"
                            },
                            "logs": {
                              "items": {
                                "$ref": "#/components/schemas/custody_log"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Retrieves user custody logs list.",
        "tags": [
          "account_management",
          "private",
          "internal"
        ]
      }
    },
    "/private/list_security_keys": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/list_security_keys.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/list_security_keys.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_list_security_keys_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves list of Security Keys",
        "tags": [
          "private",
          "internal"
        ]
      }
    },
    "/private/logout": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/invalidate_token"
          }
        ],
        "responses": {
          "200": {
            "description": "closes WS connection"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "summary": "Gracefully close websocket connection, when COD (Cancel On Disconnect) is enabled orders are not cancelled",
        "tags": [
          "websocket_only",
          "authentication",
          "private"
        ]
      }
    },
    "/private/mass_quote": {
      "get": {
        "description": "Place buy and/or sell orders on one or more instruments. Cancel-on-Disconnect must be enabled (see [private/enable_cancel_on_disconnect](https://docs.deribit.com/#private-enable_cancel_on_disconnect)), otherwise the request will return an error. This endpoint can only be used after approval from the administrators.\n\n**\ud83d\udcd6 Related Support Article:** [Mass Quotes Specifications](https://support.deribit.com/hc/en-us/articles/26302715576989-Mass-Quotes-Specifications)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/mass_quote.request.json"
          }
        },
        "parameters": [
          {
            "description": "If false, the response is sent immediately after the risk check. If true, the response is sent after the orders all go through the matching engine. Default - `true`.",
            "in": "query",
            "name": "wait_for_response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag to receive a list of all order changes and a list of errors, or to only receive a list of errors. Default - `false`.",
            "in": "query",
            "name": "detailed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Identifier of a mass quote message. Can be used to match trades to requests. We recommend using an incrementing counter.",
            "in": "query",
            "name": "quote_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the MMP group. An MMP group has to be used and only one quote can exist per instrument per side per MMP group.",
            "in": "query",
            "name": "mmp_group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/valid_until"
          },
          {
            "description": "List of quotes.",
            "in": "query",
            "name": "quotes",
            "required": true,
            "schema": {
              "items": {
                "type": "object",
                "properties": [
                  {
                    "description": "The name of the instrument.",
                    "in": "query",
                    "name": "instrument_name",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "description": "User-defined label that can be used for targeted cancels using private/cancel_quotes.",
                    "in": "query",
                    "name": "quote_set_id",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "description": "Order details for the ask. If not provided, `bid` must be present.",
                    "in": "query",
                    "name": "ask",
                    "required": false,
                    "schema": {
                      "properties": [
                        {
                          "description": "The price of this side of the quote. If no price is supplied, only the amount is amended.",
                          "in": "query",
                          "name": "price",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        },
                        {
                          "description": "The amount of this side of the quote. If no quantity is supplied, only the price is amended.",
                          "in": "query",
                          "name": "amount",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        },
                        {
                          "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread. Default - `false`",
                          "in": "query",
                          "name": "post_only",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        },
                        {
                          "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with \"post_only\" set to `true`. Default value - `false`",
                          "in": "query",
                          "name": "reject_post_only",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "description": "Order details for the bid. If not provided, `ask` must be present.",
                    "in": "query",
                    "name": "bid",
                    "required": false,
                    "schema": {
                      "properties": [
                        {
                          "description": "The price of this side of the quote. If no price is supplied, only the amount is amended.",
                          "in": "query",
                          "name": "price",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        },
                        {
                          "description": "The amount of this side of the quote. If no quantity is supplied, only the price is amended.",
                          "in": "query",
                          "name": "amount",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        },
                        {
                          "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread. Default - `false`",
                          "in": "query",
                          "name": "post_only",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        },
                        {
                          "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with \"post_only\" set to `true`. Default value - `false`",
                          "in": "query",
                          "name": "reject_post_only",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/mass_quote.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_mass_quote_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Place buy and/or sell orders on one or more instruments. Cancel-on-Disconnect must be enabled (see [private/enable_cancel_on_disconnect](https://docs.deribit.com/#private-enable_cancel_on_disconnect)), otherwise the request will return an error. This endpoint can only be used after approval from the administrators.",
        "tags": [
          "trading",
          "private",
          "matching_engine"
        ]
      }
    },
    "/private/move_positions": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/move_positions.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_currency"
          },
          {
            "$ref": "#/components/parameters/position_move_source_uid"
          },
          {
            "$ref": "#/components/parameters/position_move_target_uid"
          },
          {
            "$ref": "#/components/parameters/position_move_trades"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/move_positions.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_position_move_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Moves positions from source subaccount to target subaccount <p><b>Note:</b><br>In rare cases, the request may return an `internal_server_error`. This does not necessarily mean the operation failed entirely. Part or all of the position transfer might have still been processed successfully.</p>",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      }
    },
    "/private/pme/simulate": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/pme_simulate.request.json"
          }
        },
        "parameters": [
          {
            "description": "The currency for which the Extended Risk Matrix will be calculated. Use `CROSS` for Cross Collateral simulation.",
            "in": "query",
            "name": "currency",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/types/pme_currency"
            }
          },
          {
            "$ref": "#/components/parameters/add_positions"
          },
          {
            "$ref": "#/components/parameters/simulated_positions_map_base"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/pme_simulate.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_pme_simulate_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Calculates the Extended Risk Matrix and margin information for the selected currency or against the entire Cross-Collateral portfolio.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/reject_block_trade": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/reject_block_trade.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_timestamp"
          },
          {
            "$ref": "#/components/parameters/block_trade_nonce"
          },
          {
            "$ref": "#/components/parameters/block_trade_role"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/ok.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`block_trade:read_write`",
        "summary": "Used to reject a pending block trade. `nonce` and `timestamp` are used to identify the block trade while `role` should be opposite to the trading counterparty.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.",
        "tags": [
          "private",
          "block_trade"
        ]
      }
    },
    "/private/remove_api_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/remove_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/remove_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Removes api key. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/remove_from_address_book": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/remove_from_address_book.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          },
          {
            "$ref": "#/components/parameters/currency_address_from_address_book"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/remove_from_address_book.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_remove_from_address_book_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Removes address book entry",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/remove_subaccount": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/remove_subaccount.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "subaccount_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/remove_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Remove empty subaccount.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/reset_api_key": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/reset_api_key.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/reset_api_key.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_api_key_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Resets secret in api key. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/reset_mmp": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/reset_mmp.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name_derivative"
          },
          {
            "description": "Specifies the MMP group for which limits are being reset. If this parameter is omitted, the endpoint resets the traditional (no group) MMP limits",
            "in": "query",
            "name": "mmp_group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, resets MMP for Block RFQ. When set, requires `block_rfq` scope instead of `trade` scope. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
            "in": "query",
            "name": "block_rfq",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/ok.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`trade:read_write` or `block_rfq:read_write` (when `block_rfq` = `true`)",
        "summary": "Reset MMP",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      }
    },
    "/private/save_address_beneficiary": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/save_address_beneficiary.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/currency_address"
          },
          {
            "$ref": "#/components/parameters/address_tag"
          },
          {
            "$ref": "#/components/parameters/agree_to_share_with_3rd_party"
          },
          {
            "$ref": "#/components/parameters/personal_wallet"
          },
          {
            "$ref": "#/components/parameters/unhosted_wallet"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_did"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_website"
          },
          {
            "$ref": "#/components/parameters/beneficiary_first_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_last_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_company_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_address"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/save_address_beneficiary.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_save_address_beneficiary_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Saves address beneficiary information",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/sell": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/sell.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/order_contracts"
          },
          {
            "$ref": "#/components/parameters/order_type"
          },
          {
            "$ref": "#/components/parameters/order_label"
          },
          {
            "$ref": "#/components/parameters/order_price"
          },
          {
            "$ref": "#/components/parameters/time_in_force"
          },
          {
            "$ref": "#/components/parameters/display_amount"
          },
          {
            "$ref": "#/components/parameters/post_only_sell"
          },
          {
            "$ref": "#/components/parameters/reject_post_only"
          },
          {
            "$ref": "#/components/parameters/reduce_only"
          },
          {
            "$ref": "#/components/parameters/trigger_price"
          },
          {
            "$ref": "#/components/parameters/trigger_offset"
          },
          {
            "$ref": "#/components/parameters/trigger"
          },
          {
            "$ref": "#/components/parameters/advanced_order_type"
          },
          {
            "$ref": "#/components/parameters/mmp"
          },
          {
            "$ref": "#/components/parameters/valid_until"
          },
          {
            "$ref": "#/components/parameters/linked_order_type"
          },
          {
            "$ref": "#/components/parameters/trigger_fill_condition"
          },
          {
            "$ref": "#/components/parameters/otoco_config"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/sell.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_buy_and_sell_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Places a sell order for an instrument.",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      },
      "x-order": 200
    },
    "/private/send_rfq": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/send_rfq.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_amount"
          },
          {
            "$ref": "#/components/parameters/order_side"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/send_rfq.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`trade:read_write`",
        "summary": "Sends RFQ on a given instrument.",
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/private/set_announcement_as_read": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_announcement_as_read.request.json"
          }
        },
        "parameters": [
          {
            "description": "the ID of the announcement",
            "in": "query",
            "name": "announcement_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_announcement_as_read.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Marks an announcement as read, so it will not be shown in `get_new_announcements`.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/set_clearance_originator": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_clearance_originator.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/deposit_id"
          },
          {
            "$ref": "#/components/parameters/originator"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_clearance_originator.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/deposit"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Sets originator of the deposit",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/set_custody_auto_deposit": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_custody_auto_deposit.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/custody_name"
          },
          {
            "$ref": "#/components/parameters/boolean_value"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_custody_auto_deposit.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "summary": "Set custody 'auto_deposit' flag.",
        "tags": [
          "account_management",
          "private",
          "internal"
        ]
      }
    },
    "/private/set_custody_client_id": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_custody_client_id.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/custody_name"
          },
          {
            "$ref": "#/components/parameters/client_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_custody_client_id.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "summary": "Set custody 'client_id'.",
        "tags": [
          "account_management",
          "private",
          "internal"
        ]
      }
    },
    "/private/set_custody_withdrawal_address": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_custody_withdrawal_address.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/custody_name"
          },
          {
            "$ref": "#/components/parameters/currency_custody_address"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_custody_withdrawal_address.response.json"
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/responses/base_message"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/custody_account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Allows setting address for custody withdrawals, first address is set immediately, changing this might be delayed if withdrawal delay is set for account",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/set_disabled_trading_products": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_disabled_trading_products.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          },
          {
            "$ref": "#/components/parameters/trading_products"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/ok.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Configure disabled trading products for subaccounts. Only main accounts can modify this for subaccounts.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/set_email_for_subaccount": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_email_for_subaccount.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The email address for the subaccount",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "example": "subaccount_1@email.com",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_email_for_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Assign an email address to a subaccount. User will receive an email with a confirmation link.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/set_email_language": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_email_language.request.json"
          }
        },
        "parameters": [
          {
            "description": "The abbreviated language name. Valid values include `\"en\"`, `\"ko\"`, `\"zh\"`,  `\"ja\"`, `\"ru\"`",
            "in": "query",
            "name": "language",
            "required": true,
            "schema": {
              "example": "en",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_email_language.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Changes the language to be used for emails.",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/set_mmp_config": {
      "get": {
        "description": "Set config for MMP - triggers MMP reset\n\n**\ud83d\udcd6 Related Support Article:** [Market Maker Protection API Configuration](https://support.deribit.com/hc/en-us/articles/27308287203357-Market-Maker-Protection-API-Configuration)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_mmp_config.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name_derivative"
          },
          {
            "description": "MMP Interval in seconds, if set to 0 MMP is removed",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
            "in": "query",
            "name": "frozen_time",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Designates the MMP group for which the configuration is being set. If the specified group is already associated with a different index_name, an error is returned. This parameter enables distinct configurations for each MMP group, linked to particular index_name",
            "in": "query",
            "name": "mmp_group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Quantity limit, positive value",
            "in": "query",
            "name": "quantity_limit",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Delta limit, positive value",
            "in": "query",
            "name": "delta_limit",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Vega limit, positive value",
            "in": "query",
            "name": "vega_limit",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "If true, configures MMP for Block RFQ. When set, requires block_rfq scope instead of trade scope. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
            "in": "query",
            "name": "block_rfq",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "For Block RFQ only (`block_rfq` = `true`). Sets the maximum number of Block RFQ trades allowed in the lookback window. Each RFQ trade counts as `+1` towards the limit (not individual legs). Works across all currency pairs. When using this parameter, `index_name` must be set to `\"all\"`.",
            "in": "query",
            "name": "trade_count_limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_mmp_config.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_set_mmp_config_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`trade:read_write` or `block_rfq:read_write` (when `block_rfq` = `true`)",
        "summary": "Set config for MMP - triggers MMP reset",
        "tags": [
          "private",
          "trading",
          "matching_engine"
        ]
      }
    },
    "/private/set_password_for_subaccount": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_password_for_subaccount.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The password for the subaccount",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/set_password_for_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Set the password for the subaccount",
        "tags": [
          "private",
          "account_management",
          "internal"
        ]
      }
    },
    "/private/set_self_trading_config": {
      "get": {
        "description": "Configure self trading behavior\n\n**\ud83d\udcd6 Related Support Article:** [Account settings page](https://support.deribit.com/hc/en-us/articles/25944634289693-Account-settings-page#heading-4)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/set_self_trading_config.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/self_trading_mode"
          },
          {
            "$ref": "#/components/parameters/extended_to_subaccounts"
          },
          {
            "$ref": "#/components/parameters/block_rfq_self_match_prevention"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/ok.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Configure self trading behavior",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/set_withdrawal_policy_limits": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/withdrawal_policy_category"
          },
          {
            "$ref": "#/components/parameters/withdrawal_policy_amount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "summary": "Sets Global Withdrawal Policy Limits",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/set_withdrawal_policy_mode": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/withdrawal_policy_mode"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "summary": "Sets Global Withdrawal Policy for a currency",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/simulate_block_trade": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/simulate_block_trade.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_role_optional"
          },
          {
            "$ref": "#/components/parameters/block_trade_trades"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/simulate_block_trade.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_simulate_block_trade_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "Checks if a block trade can be executed",
        "tags": [
          "private",
          "block_trade",
          "matching_engine"
        ]
      }
    },
    "/private/simulate_portfolio": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/simulate_portfolio.request.json"
          }
        },
        "parameters": [
          {
            "description": "The currency symbol",
            "in": "query",
            "name": "currency",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/types/currency"
            }
          },
          {
            "$ref": "#/components/parameters/add_positions"
          },
          {
            "$ref": "#/components/parameters/simulated_positions_map"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/simulate_portfolio.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_simulate_portfolio_response"
                }
              }
            }
          }
        },
        "scopes": "`account:read`",
        "summary": "Calculates portfolio margin info for simulated position or current position of the user. This request has a special restricted rate limit (not more than once per a second).",
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/submit_transfer_between_subaccounts": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/submit_transfer_between_subaccounts.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_currency_amount"
          },
          {
            "$ref": "#/components/parameters/transfer_destination_for_subaccount"
          },
          {
            "$ref": "#/components/parameters/transfer_source_for_subaccount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/submit_transfer_between_subaccounts.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_submit_transfer_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`wallets:read_write`",
        "summary": "Transfer funds between two (sub)accounts.",
        "tags": [
          "private",
          "wallet"
        ]
      }
    },
    "/private/submit_transfer_to_subaccount": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/submit_transfer_to_subaccount.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_currency_amount"
          },
          {
            "$ref": "#/components/parameters/transfer_destination_for_subaccount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/submit_transfer_to_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_submit_transfer_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`wallets:read_write`",
        "summary": "Transfer funds to subaccount.",
        "tags": [
          "private",
          "wallet"
        ]
      }
    },
    "/private/submit_transfer_to_user": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/submit_transfer_to_user.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_currency_amount"
          },
          {
            "$ref": "#/components/parameters/transfer_destination_for_user"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/submit_transfer_to_user.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_submit_transfer_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write` and mainaccount",
        "summary": "Transfer funds to another user.",
        "tags": [
          "private",
          "wallet"
        ]
      }
    },
    "/private/subscribe": {
      "get": {
        "description": "Subscribe to one or more channels.\n\nThe name of the channel determines what information will be provided, and\nin what form.\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/subscribe.request.json"
          }
        },
        "parameters": [
          {
            "description": "A list of channels to subscribe to.",
            "in": "query",
            "name": "channels",
            "required": true,
            "schema": {
              "items": {
                "example": "deribit_price_index.btc_usd",
                "type": "string",
                "x-deribit-type": "channel"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional label which will be added to notifications of private channels (max 16 characters).",
            "in": "query",
            "name": "label",
            "required": false,
            "schema": {
              "example": "TestLabel1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/subscribe.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_subscribe_response"
                }
              }
            },
            "description": "ok response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "summary": "Subscribe to one or more channels.",
        "tags": [
          "private",
          "websocket_only",
          "subscription_management"
        ]
      }
    },
    "/private/toggle_deposit_address_creation": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/boolean_state"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "summary": "Enable or disable deposit address creation",
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/toggle_notifications_from_subaccount": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/toggle_notifications_from_subaccount.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "enable (`true`) or disable (`false`) notifications",
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/toggle_notifications_from_subaccount.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Enable or disable sending of notifications for the subaccount.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/toggle_subaccount_login": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/toggle_subaccount_login.request.json"
          }
        },
        "parameters": [
          {
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "enable or disable login.",
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "enum": [
                "enable",
                "disable"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/toggle_subaccount_login.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "scopes": "`account:read_write`",
        "summary": "Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.",
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/trade_block_rfq": {
      "get": {
        "deprecated": true,
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/trade_block_rfq.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_rfq_id"
          },
          {
            "$ref": "#/components/parameters/block_rfq_trade_price"
          },
          {
            "$ref": "#/components/parameters/block_rfq_amount"
          },
          {
            "$ref": "#/components/parameters/block_rfq_taker_direction"
          },
          {
            "$ref": "#/components/parameters/block_rfq_hedge_leg_trade"
          },
          {
            "$ref": "#/components/parameters/block_rfq_trade_legs"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/trade_block_rfq.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_trade_block_rfq_response"
                }
              }
            }
          }
        },
        "scopes": "`block_rfq:read_write`",
        "summary": "<b>Taker method</b> (Deprecated) <p><b>This method is deprecated and will be removed in the future. Please use `private/accept_block_rfq` instead.</b></p> <p>This method allows Block RFQ taker to trade with the response by sending a single crossing price. Please note that after Block RFQ creation, a grace period of 5 seconds begins, during which the taker cannot see quotes or trade the Block RFQ.</p>",
        "tags": [
          "private",
          "block_rfq"
        ]
      }
    },
    "/private/unsubscribe": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/unsubscribe.request.json"
          }
        },
        "parameters": [
          {
            "description": "A list of channels to unsubscribe from.",
            "in": "query",
            "name": "channels",
            "required": true,
            "schema": {
              "items": {
                "example": "deribit_price_index.btc_usd",
                "type": "string",
                "x-deribit-type": "channel"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/unsubscribe.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_subscribe_response"
                }
              }
            },
            "description": "ok response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "summary": "Unsubscribe from one or more channels.",
        "tags": [
          "private",
          "websocket_only",
          "subscription_management"
        ]
      }
    },
    "/private/unsubscribe_all": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/unsubscribe_all.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/unsubscribe_all.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Unsubscribe from all the channels subscribed so far.",
        "tags": [
          "websocket_only",
          "subscription_management",
          "private"
        ]
      }
    },
    "/private/update_in_address_book": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/update_in_address_book.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/wallet_currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          },
          {
            "$ref": "#/components/parameters/currency_address_from_address_book"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_did"
          },
          {
            "$ref": "#/components/parameters/beneficiary_vasp_website"
          },
          {
            "$ref": "#/components/parameters/beneficiary_first_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_last_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_company_name"
          },
          {
            "$ref": "#/components/parameters/beneficiary_address"
          },
          {
            "$ref": "#/components/parameters/agree_to_share_with_3rd_party"
          },
          {
            "$ref": "#/components/parameters/personal_wallet"
          },
          {
            "$ref": "#/components/parameters/address_label"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/update_in_address_book.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_update_in_address_book_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write`",
        "summary": "Allows to provide beneficiary information for the address",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/vasps": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "jsonObject": {
                    "externalValue": "examples/private/vasps.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/vasps_response"
                }
              }
            }
          }
        },
        "summary": "Returns a list of VASPs. Each VASP in our directory has a Decentralized Identifier (DID), which is used to identify them within the Notabene ecosystem. These DIDs are used when sending a travel rule transaction so that it arrives at the correct destination.",
        "tags": [
          "private",
          "internal"
        ]
      }
    },
    "/private/verify_block_trade": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/verify_block_trade.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/block_trade_timestamp"
          },
          {
            "$ref": "#/components/parameters/block_trade_nonce"
          },
          {
            "$ref": "#/components/parameters/block_trade_role"
          },
          {
            "$ref": "#/components/parameters/block_trade_trades"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/verify_block_trade.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_verify_block_trade_response"
                }
              }
            }
          }
        },
        "scopes": "`block_trade:read`",
        "summary": "Verifies and creates block trade signature<br><br><strong>Note:</strong> In the API, the `direction` field is always expressed from the maker's perspective. This means that when you accept a block trade as a taker, the direction shown in the API represents the opposite side of your trade. For example, if you are buying puts as a taker, the API will show the operation as a \"sell put\" (maker's perspective), and you will be verifying and accepting a \"sell put\" block trade.<br><br>**\ud83d\udcd6 Related Support Article:** [Block Trading](https://support.deribit.com/hc/en-us/articles/25944688627229-Block-Trading)",
        "tags": [
          "private",
          "block_trade",
          "matching_engine"
        ]
      }
    },
    "/private/withdraw": {
      "get": {
        "description": "Creates a new withdrawal request\n\n**\ud83d\udcd6 Related Support Article:** [Withdrawals](https://support.deribit.com/hc/en-us/articles/25944635205021-Withdrawals)\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/withdraw.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/currency_address_from_address_book"
          },
          {
            "$ref": "#/components/parameters/withdrawal_currency_amount"
          },
          {
            "$ref": "#/components/parameters/withdrawal_priority"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/withdraw.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_withdraw_response"
                }
              }
            }
          }
        },
        "scopes": "`wallet:read_write` and mainaccount",
        "summary": "Creates a new withdrawal request",
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/public/ask_for_password_reset": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/ask_for_password_reset.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/email"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/ask_for_password_reset.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Start process of password reset. Email with link to reset password is sent.",
        "tags": [
          "account_management",
          "internal"
        ]
      }
    },
    "/public/auth": {
      "get": {
        "description": "Retrieve an Oauth access token, to be used for authentication of 'private' requests.\n\nThree methods of authentication are supported:\n\n- <code>client_credentials</code> - using the client id and client secret that can be found on the API page on the website\n- <code>client_signature</code> - using the client id that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](#additional-authorization-method-signature-credentials-websocket-api)\n- <code>refresh_token</code> - using a refresh token that was received from an earlier invocation\n\nThe response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can\nbe used to get a new set of tokens.\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/auth.request.json"
          }
        },
        "parameters": [
          {
            "description": "Method of authentication",
            "in": "query",
            "name": "grant_type",
            "required": true,
            "schema": {
              "enum": [
                "client_credentials",
                "client_signature",
                "refresh_token"
              ],
              "type": "string"
            }
          },
          {
            "description": "Required for grant type `client_credentials` and `client_signature`",
            "in": "query",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Required for grant type `client_credentials`",
            "in": "query",
            "name": "client_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Required for grant type `refresh_token`",
            "in": "query",
            "name": "refresh_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Required for grant type `client_signature`, provides time when request has been generated (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "timestamp",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Required for grant type `client_signature`; it's a cryptographic signature calculated over provided fields using user **secret key**. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with `SHA256` hash algorithm",
            "in": "query",
            "name": "signature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional for grant type `client_signature`; delivers user generated initialization vector for the server token",
            "in": "query",
            "name": "nonce",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional for grant type `client_signature`; contains any user specific value",
            "in": "query",
            "name": "data",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Will be passed back in the response",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Describes type of the access for assigned token, possible values: `connection`, `session:name`, `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `expires:NUMBER`, `ip:ADDR`.</BR></BR> Details are elucidated in [Access scope](#access-scope)",
            "in": "query",
            "name": "scope",
            "schema": {
              "example": "connection",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/auth.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_auth_response"
                }
              }
            },
            "description": "ok response"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "over limit"
          }
        },
        "summary": "Authenticate",
        "tags": [
          "public",
          "authentication"
        ]
      }
    },
    "/public/cancel_security_keys_reset": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/cancel_security_keys_reset.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/security_key_reset_code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/cancel_security_keys_reset.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Used to cancel Security Key reset request",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/public/confirm_security_keys_reset": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/confirm_security_keys_reset.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/security_key_reset_code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/confirm_security_keys_reset.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Used to get confirm Security Key reset request",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/public/disable_heartbeat": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/disable_heartbeat.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/disable_heartbeat.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "summary": "Stop sending heartbeat messages.",
        "tags": [
          "websocket_only",
          "session_management",
          "public"
        ]
      }
    },
    "/public/exchange_token": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/exchange_token.request.json"
          }
        },
        "parameters": [
          {
            "description": "Refresh token",
            "in": "query",
            "name": "refresh_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New subject id",
            "in": "query",
            "name": "subject_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Optional scope override for the new session. Cannot exceed caller's permissions. Supports `session` scope for direct session creation during token exchange.",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/token.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_token_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Generates a token for a new subject id. This method can be used to switch between subaccounts.",
        "tags": [
          "public",
          "authentication"
        ]
      }
    },
    "/public/fork_token": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/fork_token.request.json"
          }
        },
        "parameters": [
          {
            "description": "Refresh token",
            "in": "query",
            "name": "refresh_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New session name",
            "in": "query",
            "name": "session_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/token.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_token_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Generates a token for a new named session. This method can be used only with session scoped tokens.",
        "tags": [
          "public",
          "authentication"
        ]
      }
    },
    "/public/get_announcements": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_announcements.request.json"
          }
        },
        "parameters": [
          {
            "description": "The most recent timestamp to return the results for (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "start_timestamp",
            "schema": {
              "$ref": "#/components/schemas/types/timestamp",
              "default": "Current time"
            }
          },
          {
            "description": "Maximum count of returned announcements",
            "in": "query",
            "name": "count",
            "schema": {
              "default": 5,
              "example": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_announcements.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_announcements_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves announcements. Default \"start_timestamp\" parameter value is current timestamp, \"count\" parameter value must be between 1 and 50, default is 5.",
        "tags": [
          "account_management",
          "public"
        ]
      }
    },
    "/public/get_apr_history": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_apr_history.request.json"
          }
        },
        "parameters": [
          {
            "description": "Currency for which to retrieve APR history",
            "in": "query",
            "name": "currency",
            "required": true,
            "schema": {
              "enum": [
                "usde",
                "steth"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of days to retrieve (default `365`, maximum `365`)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Used to receive APR history before given epoch day",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_apr_history.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_apr_history_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves historical APR data for specified currency. Only applicable to yield-generating tokens (`USDE`, `STETH`).",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_block_rfq_trades": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_block_rfq_trades.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/block_rfq_string_continuation"
          },
          {
            "$ref": "#/components/parameters/block_rfq_count"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_block_rfq_trades.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_block_rfq_trades_response"
                }
              }
            }
          }
        },
        "summary": "This method returns a list of recent Block RFQs trades. Can be optionally filtered by currency.",
        "tags": [
          "public",
          "block_rfq"
        ]
      }
    },
    "/public/get_book_summary_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_book_summary_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_book_summary_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_book_summary_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind).\n**Note** - For real-time updates, we recommend using the WebSocket subscription to `ticker.{instrument_name}.{interval}` instead of polling this endpoint.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_book_summary_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_book_summary_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_book_summary_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_book_summary_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_combo_details": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_combo_details.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/combo_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_combo_details.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_combo_details_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves information about a combo",
        "tags": [
          "combo_books",
          "public"
        ]
      }
    },
    "/public/get_combo_ids": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_combo_ids.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_combo_state"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_combo_ids.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_combo_ids_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves available combos. This method can be used to get the list of all combos, or only the list of combos in the given state.",
        "tags": [
          "combo_books",
          "public"
        ]
      }
    },
    "/public/get_combos": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_combos.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_combos.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_combos_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves information about active combos",
        "tags": [
          "combo_books",
          "public"
        ]
      }
    },
    "/public/get_contract_size": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/public_get_contract_size_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves contract size of provided instrument.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_currencies": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_currencies.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_currencies.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_currencies_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves all cryptocurrencies supported by the API.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_delivery_prices": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_delivery_prices.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_delivery_prices.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_delivery_prices_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves delivery prices for then given index",
        "tags": [
          "market_data"
        ]
      }
    },
    "/public/get_expirations": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_expirations.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/settlement_currency_with_any_and_grouped"
          },
          {
            "$ref": "#/components/parameters/kind_future_or_option_with_any"
          },
          {
            "$ref": "#/components/parameters/currency_pair_optional"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_expirations.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_expirations_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves expirations for instruments. This method can be used to see instruments's expirations.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_funding_chart_data": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/length_for_perpetual_chart"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/public_get_funding_chart_data_response"
                }
              }
            }
          }
        },
        "summary": "Retrieve the list of the latest PERPETUAL funding chart points within a given time period.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_funding_rate_history": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_funding_rate_history.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_funding_rate_history.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_funding_rate_history_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves hourly historical interest rate for requested PERPETUAL instrument.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_funding_rate_value": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_funding_rate_value.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_funding_rate_value.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_funding_rate_value_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves interest rate value for requested period. Applicable only for PERPETUAL instruments.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_historical_volatility": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_historical_volatility.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_historical_volatility.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_historical_volatility_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Provides information about historical volatility for given cryptocurrency.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_index": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/public_index_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the current index price for the instruments, for the selected currency.",
        "tags": [
          "market_data",
          "public",
          "deprecated"
        ]
      }
    },
    "/public/get_index_chart_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_index_chart_data.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          },
          {
            "$ref": "#/components/parameters/range"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_index_chart_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_placeholder_response"
                }
              }
            }
          }
        },
        "summary": "Price index chart data.",
        "tags": [
          "public",
          "market_data",
          "internal"
        ]
      }
    },
    "/public/get_index_price": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/public_get_index_price_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the current index price value for given index name.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_index_price_names": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_index_price_names.request.json"
          }
        },
        "parameters": [
          {
            "description": "When set to `true`, returns additional information including `future_combo_creation_enabled` and `option_combo_creation_enabled` for each index",
            "in": "query",
            "name": "extended",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_index_price_names.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_index_price_names_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the identifiers of all supported Price Indexes",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_instrument_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves information about instrument",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_instruments": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_instruments.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "description": "Set to true to show recently expired instruments instead of active ones.",
            "in": "query",
            "name": "expired",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_instruments.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_instruments_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have recently expired.\n**Note - This endpoint has distinct API rate limiting requirements:** 1 request per 10 seconds, with a burst of 5. To avoid rate limits, we recommend using either the REST requests for server-cached data or the WebSocket subscription to [instrument_state.{kind}.{currency}](https://docs.deribit.com/#instrument-state-kind-currency) for real-time updates. For more information, see [Rate Limits](https://support.deribit.com/hc/en-us/articles/25944617523357-Rate-Limits).",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_insurance_chart_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_insurance_chart_data.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_insurance_chart_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_placeholder_response"
                }
              }
            }
          }
        },
        "summary": "Insurance balance chart data.",
        "tags": [
          "public",
          "market_data",
          "internal"
        ]
      }
    },
    "/public/get_insurance_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_insurance_data.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_insurance_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_placeholder_response"
                }
              }
            }
          }
        },
        "summary": "Insurance balance and bankruptcies data.",
        "tags": [
          "public",
          "market_data",
          "internal"
        ]
      }
    },
    "/public/get_last_settlements_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_last_settlements_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_start_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_last_settlements_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_settlement_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within a given currency.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_last_settlements_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_last_settlements_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_start_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_last_settlements_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_settlement_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_last_trades_by_currency": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_last_trades_by_currency.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/optional_start_trade_id"
          },
          {
            "$ref": "#/components/parameters/optional_end_trade_id"
          },
          {
            "$ref": "#/components/parameters/optional_trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_last_trades_by_currency.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_trades_history_response"
                }
              }
            }
          }
        },
        "summary": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_last_trades_by_currency_and_time": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_last_trades_by_currency_and_time.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind_with_combo_all"
          },
          {
            "$ref": "#/components/parameters/trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_last_trades_by_currency_and_time.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_trades_history_response"
                }
              }
            }
          }
        },
        "scopes": "`trade:read`",
        "summary": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within a given time range.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_last_trades_by_instrument": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_last_trades_by_instrument.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_start_seq"
          },
          {
            "$ref": "#/components/parameters/optional_end_seq"
          },
          {
            "$ref": "#/components/parameters/optional_trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_last_trades_by_instrument.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_trades_history_response"
                }
              }
            }
          }
        },
        "summary": "Retrieve the latest trades that have occurred for a specific instrument.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_last_trades_by_instrument_and_time": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_last_trades_by_instrument_and_time.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/trade_start_timestamp"
          },
          {
            "$ref": "#/components/parameters/trade_end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_last_trades_by_instrument_and_time.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_trades_history_response"
                }
              }
            }
          }
        },
        "summary": "Retrieve the latest trades that have occurred for a specific instrument and within a given time range.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_mark_price_history": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_mark_price_history.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_mark_price_history.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_mark_price_history_response"
                }
              }
            }
          }
        },
        "summary": "Public request for 5min history of markprice values for the instrument. For now the markprice history is available only for a subset of options which take part in the volatility index calculations. All other instruments, futures and perpetuals will return an empty list.",
        "tags": [
          "public",
          "market_data",
          "markprice"
        ]
      }
    },
    "/public/get_order_book": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_order_book.request.json"
          }
        },
        "parameters": [
          {
            "description": "The instrument name for which to retrieve the order book, see [`public/get_instruments`](#public-get_instruments) to obtain instrument names.",
            "in": "query",
            "name": "instrument_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of entries to return for bids and asks.",
            "in": "query",
            "name": "depth",
            "required": false,
            "schema": {
              "enum": [
                1,
                5,
                10,
                20,
                50,
                100,
                1000,
                10000
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_order_book.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_order_book_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the order book, along with other market values for a given instrument.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_order_book_by_instrument_id": {
      "get": {
        "parameters": [
          {
            "description": "The instrument ID for which to retrieve the order book, see [`public/get_instruments`](#public-get_instruments) to obtain instrument IDs.",
            "in": "query",
            "name": "instrument_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of entries to return for bids and asks.",
            "in": "query",
            "name": "depth",
            "required": false,
            "schema": {
              "enum": [
                1,
                5,
                10,
                20,
                50,
                100,
                1000,
                10000
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_order_book.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_order_book_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the order book, along with other market values for a given instrument ID.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_rfqs": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_rfqs.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_rfqs.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_rfqs_response"
                }
              }
            }
          }
        },
        "summary": "Retrieve active RFQs for instruments in given currency.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_security_keys_reset_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_security_keys_reset_data.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/security_key_reset_code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_security_keys_reset_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_security_keys_reset_data_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Used to get information about Security Key reset request that is about to be confirmed",
        "tags": [
          "internal",
          "private"
        ]
      }
    },
    "/public/get_supported_index_names": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/type_of_supported_index"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_supported_index_names.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_index_price_names_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the identifiers of all supported Price Indexes",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_time": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_time.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_time.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_time_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.",
        "tags": [
          "supporting",
          "public"
        ]
      }
    },
    "/public/get_trade_volumes": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_trade_volumes.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/extended_volume_statistics"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_trade_volumes.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_trades_volumes_response"
                }
              }
            }
          }
        },
        "summary": "Retrieves aggregated 24h trade volumes for different instrument types and currencies.",
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_tradingview_chart_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_tradingview_chart_data.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/chart_resolution"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_tradingview_chart_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_tradingview_chart_data_response"
                }
              }
            }
          }
        },
        "summary": "Publicly available market data used to generate a TradingView candle chart.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_volatility_index_data": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/get_volatility_index_data.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/vix_resolution"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/get_volatility_index_data.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_get_volatility_index_data_response"
                }
              }
            }
          }
        },
        "summary": "Public market data request for volatility index candles.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/hello": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/hello.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/client_software_name"
          },
          {
            "$ref": "#/components/parameters/client_software_version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/hello.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_test_response"
                }
              }
            }
          }
        },
        "summary": "Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.",
        "tags": [
          "public",
          "supporting",
          "websocket_only"
        ]
      }
    },
    "/public/reset_password": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/reset_password.request.json"
          }
        },
        "parameters": [
          {
            "description": "New password",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "decription": "code from password reset link",
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/reset_password.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Resets users password. User is determined by the `code` value given in password reset link",
        "tags": [
          "account_management",
          "internal"
        ]
      }
    },
    "/public/set_heartbeat": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/set_heartbeat.request.json"
          }
        },
        "parameters": [
          {
            "description": "The heartbeat interval in seconds, but not less than 10",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "example": 60,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/set_heartbeat.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            }
          }
        },
        "summary": "Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections.\nWhen heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.",
        "tags": [
          "public",
          "session_management",
          "websocket_only"
        ]
      },
      "x-order": 100
    },
    "/public/status": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/status.request.json"
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/status.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_status_response"
                }
              }
            }
          }
        },
        "summary": "Method used to get information about locked currencies",
        "tags": [
          "public",
          "supporting"
        ]
      }
    },
    "/public/subscribe": {
      "get": {
        "description": "Subscribe to one or more channels.\n\nThis is the same method as [/private/subscribe](#private_subscribe), but it can only\nbe used for 'public' channels.\n",
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/subscribe.request.json"
          }
        },
        "parameters": [
          {
            "description": "A list of channels to subscribe to.",
            "in": "query",
            "name": "channels",
            "required": true,
            "schema": {
              "items": {
                "example": "deribit_price_index.btc_usd",
                "type": "string",
                "x-deribit-type": "channel"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/subscribe.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_subscribe_response"
                }
              }
            },
            "description": "ok response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "summary": "Subscribe to one or more channels.",
        "tags": [
          "public",
          "subscription_management",
          "websocket_only"
        ]
      }
    },
    "/public/test": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/test.request.json"
          }
        },
        "parameters": [
          {
            "description": "The value \"exception\" will trigger an error response. This may be useful for testing wrapper libraries.",
            "in": "query",
            "name": "expected_result",
            "required": false,
            "schema": {
              "enum": [
                "exception"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/test.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_test_response"
                }
              }
            }
          }
        },
        "summary": "Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.",
        "tags": [
          "public",
          "supporting"
        ]
      }
    },
    "/public/ticker": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/ticker.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/ticker.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_ticker_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Get ticker for an instrument.",
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/tickers_by_expiration": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/tickers_by_expiration.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/expiration"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/tickers_by_expiration.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/public_tickers_by_expiration_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Get tickers for instruments that expires at given time.",
        "tags": [
          "internal",
          "public",
          "market_data"
        ]
      }
    },
    "/public/unsubscribe": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/unsubscribe.request.json"
          }
        },
        "parameters": [
          {
            "description": "A list of channels to unsubscribe from.",
            "in": "query",
            "name": "channels",
            "required": true,
            "schema": {
              "items": {
                "example": "deribit_price_index.btc_usd",
                "type": "string",
                "x-deribit-type": "channel"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/unsubscribe.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_subscribe_response"
                }
              }
            },
            "description": "ok response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/responses/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "summary": "Unsubscribe from one or more channels.",
        "tags": [
          "public",
          "websocket_only",
          "subscription_management"
        ]
      }
    },
    "/public/unsubscribe_all": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/public/unsubscribe_all.request.json"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/public/unsubscribe_all.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/ok_response"
                }
              }
            },
            "description": "ok response"
          }
        },
        "summary": "Unsubscribe from all the channels subscribed so far.",
        "tags": [
          "websocket_only",
          "subscription_management",
          "public"
        ]
      }
    },
    "private/custody/initiate_settlement": {
      "get": {
        "examples": {
          "jsonObject": {
            "externalValue": "examples/private/initiate_settlement.request.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/custody_settlement_id"
          },
          {
            "$ref": "#/components/parameters/custody_settlement_initiate"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "jsonObject": {
                    "externalValue": "examples/private/initiate_settlement.response.json"
                  }
                },
                "schema": {
                  "$ref": "#/responses/private_custody_settlement_response"
                }
              }
            }
          }
        },
        "scopes": "`custody:read_write`",
        "summary": "Custodian requests to initiate settlement for the given currencies. For each currency exchange verifies the `custody_balance` then initiates a settlement with the given `id`.",
        "tags": [
          "private",
          "custody"
        ]
      }
    }
  },
  "responses": {
    "address_ownership": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/address_ownership_item"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "base_message": {
      "properties": {
        "id": {
          "description": "The id that was sent in the request",
          "type": "integer"
        },
        "jsonrpc": {
          "description": "The JSON-RPC version (2.0)",
          "enum": [
            "2.0"
          ],
          "type": "string"
        },
        "testnet": {
          "description": "false for production server, true for test server",
          "type": "boolean",
          "x-hide-in-docs": true
        },
        "usDiff": {
          "description": "Duration of the handling of the request, in microseconds",
          "type": "integer",
          "x-hide-in-docs": true
        },
        "usIn": {
          "description": "The timestamp (in microseconds) of receipt of the request",
          "type": "integer",
          "x-hide-in-docs": true
        },
        "usOut": {
          "description": "The timestamp (in microseconds) of sending of the response",
          "type": "integer",
          "x-hide-in-docs": true
        }
      },
      "required": [
        "jsonrpc",
        "testnet",
        "usIn",
        "usOut",
        "usDiff"
      ]
    },
    "error_message": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "error": {
              "type": "integer"
            },
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message",
            "error"
          ],
          "type": "object"
        }
      ]
    },
    "multicast_get_instrument_dictionary_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Dictionary that maps the names of active instruments into their corresponding integer id's",
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "multicast_get_packet_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "packet": {
                  "description": "The base64 encoded binary multicast packet",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "multicast_get_packets_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "packet": {
                    "description": "The base64 encoded binary multicast packet",
                    "type": "string"
                  },
                  "seq": {
                    "description": "The sequence number of the multicast packet",
                    "type": "integer"
                  }
                },
                "required": [
                  "seq",
                  "packet"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "ok_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Result of method execution. `ok` in case of success",
              "enum": [
                "ok"
              ],
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_accept_block_rfq_response": {
      "properties": {
        "block_trades": {
          "items": {
            "$ref": "#/components/schemas/block_trade"
          },
          "type": "array"
        },
        "trade_trigger": {
          "properties": {
            "direction": {
              "enum": [
                "buy",
                "sell"
              ],
              "type": "string"
            },
            "price": {
              "type": "number"
            },
            "state": {
              "enum": [
                "untriggered"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "trade_trigger",
        "block_trades"
      ],
      "type": "object"
    },
    "private_account_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "additional_reserve": {
                  "$ref": "#/components/schemas/types/additional_reserve"
                },
                "available_funds": {
                  "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                  "example": 2.2638913,
                  "type": "number"
                },
                "available_withdrawal_funds": {
                  "description": "The account's available to withdrawal funds",
                  "example": 2.26,
                  "type": "number"
                },
                "balance": {
                  "description": "The account's balance",
                  "example": 3.4906363,
                  "type": "number"
                },
                "creation_timestamp": {
                  "description": "Time at which the account was created (milliseconds since the Unix epoch; available when parameter `extended` = `true`)",
                  "example": 1542100802842,
                  "type": "integer"
                },
                "cross_collateral_enabled": {
                  "description": "When `true` cross collateral is enabled for user",
                  "example": true,
                  "type": "boolean"
                },
                "currency": {
                  "description": "The selected currency",
                  "example": "ETH",
                  "type": "string"
                },
                "delta_total": {
                  "$ref": "#/components/schemas/types/delta_total"
                },
                "deposit_address": {
                  "description": "The deposit address for the account (if available)",
                  "example": "14diAAyXL5UzhPTCKC998ch2GV7DMb7yDi",
                  "type": "string"
                },
                "email": {
                  "description": "User email (available when parameter `extended` = `true`)",
                  "example": "support@deribit.com",
                  "type": "string"
                },
                "equity": {
                  "description": "The account's current equity",
                  "example": 2.6437733,
                  "type": "number"
                },
                "estimated_liquidation_ratio": {
                  "$ref": "#/components/schemas/types/estimated_liquidation_ratio"
                },
                "fee_balance": {
                  "$ref": "#/components/schemas/types/fee_balance"
                },
                "fees": {
                  "description": "List of fee objects for all currency pairs and instrument types related to the currency (available when parameter `extended` = `true` and user has any discounts)",
                  "items": {
                    "properties": {
                      "index_name": {
                        "description": "The currency pair this fee applies to",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Type of the instruments the fee applies to - `future` for future instruments (excluding perpetual), `perpetual` for future perpetual instruments, `option` for options",
                        "type": "string"
                      },
                      "value": {
                        "properties": {
                          "block_trade": {
                            "description": "Block trade fee (if applicable)",
                            "type": "number"
                          },
                          "default": {
                            "properties": {
                              "maker": {
                                "description": "Maker fee",
                                "type": "number"
                              },
                              "taker": {
                                "description": "Taker fee",
                                "type": "number"
                              },
                              "type": {
                                "description": "Fee type - `relative` if fee is calculated as a fraction of base instrument fee, `fixed` if fee is calculated solely using user fee",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "settlement": {
                            "description": "Settlement fee",
                            "type": "number"
                          }
                        },
                        "required": [
                          "default"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "value",
                      "kind",
                      "index_name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "futures_pl": {
                  "description": "Futures profit and Loss",
                  "example": 0,
                  "type": "number"
                },
                "futures_session_rpl": {
                  "description": "Futures session realized profit and Loss",
                  "example": 0,
                  "type": "number"
                },
                "futures_session_upl": {
                  "description": "Futures session unrealized profit and Loss",
                  "example": 0,
                  "type": "number"
                },
                "has_non_block_chain_equity": {
                  "description": "Optional field returned with value `true` when user has non block chain equity that is excluded from proof of reserve calculations",
                  "type": "boolean"
                },
                "id": {
                  "description": "Account id (available when parameter `extended` = `true`)",
                  "example": 12354,
                  "type": "integer"
                },
                "initial_margin": {
                  "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                  "example": 0.379882,
                  "type": "number"
                },
                "interuser_transfers_enabled": {
                  "description": "`true` when the inter-user transfers are enabled for user (available when parameter `extended` = `true`)",
                  "example": false,
                  "type": "boolean"
                },
                "limits": {
                  "$ref": "#/components/schemas/types/api_limits"
                },
                "login_enabled": {
                  "description": "Whether account is loginable using email and password (available when parameter `extended` = `true` and account is a subaccount)",
                  "example": false,
                  "type": "boolean"
                },
                "maintenance_margin": {
                  "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                  "example": 0.1334519,
                  "type": "number"
                },
                "margin_balance": {
                  "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                  "example": 2.25,
                  "type": "number"
                },
                "margin_model": {
                  "description": "Name of user's currently enabled margin model",
                  "example": "segregated_sm",
                  "type": "string"
                },
                "mmp_enabled": {
                  "description": "Whether MMP is enabled (available when parameter `extended` = `true`)",
                  "example": false,
                  "type": "boolean"
                },
                "options_delta": {
                  "description": "Options summary delta",
                  "example": 0,
                  "type": "number"
                },
                "options_gamma": {
                  "description": "Options summary gamma",
                  "example": 0,
                  "type": "number"
                },
                "options_gamma_map": {
                  "description": "Map of options' gammas per index",
                  "type": "object"
                },
                "options_pl": {
                  "description": "Options profit and Loss",
                  "example": 0,
                  "type": "number"
                },
                "options_session_rpl": {
                  "description": "Options session realized profit and Loss",
                  "example": 0,
                  "type": "number"
                },
                "options_session_upl": {
                  "description": "Options session unrealized profit and Loss",
                  "example": 0,
                  "type": "number"
                },
                "options_theta": {
                  "description": "Options summary theta",
                  "example": 0,
                  "type": "number"
                },
                "options_theta_map": {
                  "description": "Map of options' thetas per index",
                  "type": "object"
                },
                "options_value": {
                  "description": "Options value",
                  "example": 0,
                  "type": "number"
                },
                "options_vega": {
                  "description": "Options summary vega",
                  "example": 0,
                  "type": "number"
                },
                "options_vega_map": {
                  "description": "Map of options' vegas per index",
                  "type": "object"
                },
                "portfolio_margining_enabled": {
                  "description": "`true` when portfolio margining is enabled for user",
                  "example": true,
                  "type": "boolean"
                },
                "projected_delta_total": {
                  "$ref": "#/components/schemas/types/projected_delta_total"
                },
                "projected_initial_margin": {
                  "$ref": "#/components/schemas/types/projected_initial_margin"
                },
                "projected_maintenance_margin": {
                  "$ref": "#/components/schemas/types/projected_maintenance_margin"
                },
                "referrer_id": {
                  "description": "Optional identifier of the referrer (of the affiliation program, and available when parameter `extended` = `true`), which link was used by this account at registration. It coincides with suffix of the affiliation link path after `/reg-`",
                  "example": "517.6035",
                  "type": "string"
                },
                "security_keys_enabled": {
                  "description": "Whether Security Key authentication is enabled (available when parameter `extended` = `true`)",
                  "example": false,
                  "type": "boolean"
                },
                "self_trading_extended_to_subaccounts": {
                  "description": "`true` if self trading rejection behavior is applied to trades between subaccounts (available when parameter `extended` = `true`)",
                  "type": "string"
                },
                "self_trading_reject_mode": {
                  "description": "Self trading rejection behavior - `reject_taker` or `cancel_maker` (available when parameter `extended` = `true`)",
                  "type": "string"
                },
                "session_rpl": {
                  "$ref": "#/components/schemas/types/rpl"
                },
                "session_upl": {
                  "$ref": "#/components/schemas/types/upl"
                },
                "spot_reserve": {
                  "description": "The account's balance reserved in active spot orders",
                  "example": 0.3,
                  "type": "number"
                },
                "system_name": {
                  "description": "System generated user nickname (available when parameter `extended` = `true`)",
                  "example": "myname",
                  "type": "string"
                },
                "total_delta_total_usd": {
                  "description": "Optional (only for users using cross margin). The account's total delta total in all cross collateral currencies, expressed in USD",
                  "example": 1.8,
                  "type": "number"
                },
                "total_equity_usd": {
                  "description": "Optional (only for users using cross margin). The account's total equity in all cross collateral currencies, expressed in USD",
                  "example": 2.6437733,
                  "type": "number"
                },
                "total_initial_margin_usd": {
                  "description": "Optional (only for users using cross margin). The account's total initial margin in all cross collateral currencies, expressed in USD",
                  "example": 0.379882,
                  "type": "number"
                },
                "total_maintenance_margin_usd": {
                  "description": "Optional (only for users using cross margin). The account's total maintenance margin in all cross collateral currencies, expressed in USD",
                  "example": 0.1334519,
                  "type": "number"
                },
                "total_margin_balance_usd": {
                  "description": "Optional (only for users using cross margin). The account's total margin balance in all cross collateral currencies, expressed in USD",
                  "example": 2.25,
                  "type": "number"
                },
                "total_pl": {
                  "description": "Profit and loss",
                  "example": 0.02032221,
                  "type": "number"
                },
                "type": {
                  "description": "Account type (available when parameter `extended` = `true`)",
                  "enum": [
                    "main",
                    "subaccount"
                  ],
                  "type": "string"
                },
                "username": {
                  "description": "Account name (given by user) (available when parameter `extended` = `true`)",
                  "example": "name",
                  "type": "string"
                }
              },
              "required": [
                "equity",
                "currency",
                "maintenance_margin",
                "initial_margin",
                "available_funds",
                "available_withdrawal_funds",
                "balance",
                "session_upl",
                "session_rpl",
                "total_pl",
                "options_pl",
                "options_session_upl",
                "options_session_rpl",
                "options_delta",
                "options_gamma",
                "options_vega",
                "options_value",
                "options_theta",
                "futures_pl",
                "options_gamma_map",
                "options_theta_map",
                "options_vega_map",
                "futures_session_upl",
                "futures_session_rpl",
                "projected_maintenance_margin",
                "delta_total",
                "projected_delta_total",
                "security_keys_enabled",
                "system_name",
                "username",
                "email",
                "type",
                "id"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_account_summaries_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "block_rfq_self_match_prevention": {
                  "description": "When Block RFQ Self Match Prevention is enabled, it ensures that RFQs cannot be executed between accounts that belong to the same legal entity. This setting is independent of the general self-match prevention settings and must be configured separately.",
                  "type": "string"
                },
                "creation_timestamp": {
                  "description": "Time at which the account was created (milliseconds since the Unix epoch; available when parameter `extended` = `true`)",
                  "example": 1542100802842,
                  "type": "integer"
                },
                "email": {
                  "description": "User email (available when parameter `extended` = `true`)",
                  "example": "support@deribit.com",
                  "type": "string"
                },
                "id": {
                  "description": "Account id (available when parameter `extended` = `true`)",
                  "example": 12354,
                  "type": "integer"
                },
                "interuser_transfers_enabled": {
                  "description": "`true` when the inter-user transfers are enabled for user (available when parameter `extended` = `true`)",
                  "example": false,
                  "type": "boolean"
                },
                "login_enabled": {
                  "description": "Whether account is loginable using email and password (available when parameter `extended` = `true` and account is a subaccount)",
                  "example": false,
                  "type": "boolean"
                },
                "mmp_enabled": {
                  "description": "Whether MMP is enabled (available when parameter `extended` = `true`)",
                  "example": false,
                  "type": "boolean"
                },
                "referrer_id": {
                  "description": "Optional identifier of the referrer (of the affiliation program, and available when parameter `extended` = `true`), which link was used by this account at registration. It coincides with suffix of the affiliation link path after `/reg-`",
                  "example": "517.6035",
                  "type": "string"
                },
                "security_keys_enabled": {
                  "description": "Whether Security Key authentication is enabled (available when parameter `extended` = `true`)",
                  "example": false,
                  "type": "boolean"
                },
                "self_trading_extended_to_subaccounts": {
                  "description": "`true` if self trading rejection behavior is applied to trades between subaccounts (available when parameter `extended` = `true`)",
                  "type": "string"
                },
                "self_trading_reject_mode": {
                  "description": "Self trading rejection behavior - `reject_taker` or `cancel_maker` (available when parameter `extended` = `true`)",
                  "type": "string"
                },
                "summaries": {
                  "description": "Aggregated list of per-currency account summaries",
                  "items": {
                    "properties": {
                      "additional_reserve": {
                        "$ref": "#/components/schemas/types/additional_reserve"
                      },
                      "available_funds": {
                        "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "example": 2.2638913,
                        "type": "number"
                      },
                      "available_withdrawal_funds": {
                        "description": "The account's available to withdrawal funds",
                        "example": 2.26,
                        "type": "number"
                      },
                      "balance": {
                        "description": "The account's balance",
                        "example": 3.4906363,
                        "type": "number"
                      },
                      "cross_collateral_enabled": {
                        "description": "When `true` cross collateral is enabled for user",
                        "example": true,
                        "type": "boolean"
                      },
                      "currency": {
                        "description": "Currency of the summary",
                        "example": "ETH",
                        "type": "string"
                      },
                      "delta_total": {
                        "$ref": "#/components/schemas/types/delta_total"
                      },
                      "deposit_address": {
                        "description": "The deposit address for the account (if available)",
                        "example": "14diAAyXL5UzhPTCKC998ch2GV7DMb7yDi",
                        "type": "string"
                      },
                      "equity": {
                        "description": "The account's current equity",
                        "example": 2.6437733,
                        "type": "number"
                      },
                      "estimated_liquidation_ratio": {
                        "$ref": "#/components/schemas/types/estimated_liquidation_ratio"
                      },
                      "fee_balance": {
                        "$ref": "#/components/schemas/types/fee_balance"
                      },
                      "fees": {
                        "description": "List of fee objects for all currency pairs and instrument types related to the currency (available when parameter `extended` = `true` and user has any discounts)",
                        "items": {
                          "properties": {
                            "index_name": {
                              "description": "The currency pair this fee applies to",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Instrument type (e.g., future, perpetual, option)",
                              "type": "string"
                            },
                            "value": {
                              "properties": {
                                "block_trade": {
                                  "description": "Block trade fee (if applicable)",
                                  "type": "number"
                                },
                                "default": {
                                  "properties": {
                                    "maker": {
                                      "description": "Maker fee",
                                      "type": "number"
                                    },
                                    "taker": {
                                      "description": "Taker fee",
                                      "type": "number"
                                    },
                                    "type": {
                                      "description": "Fee calculation type (e.g., fixed, relative)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "settlement": {
                                  "description": "Settlement fee",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "default"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "value",
                            "kind",
                            "index_name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "futures_pl": {
                        "description": "Futures profit and Loss",
                        "example": 0,
                        "type": "number"
                      },
                      "futures_session_rpl": {
                        "description": "Futures session realized profit and Loss",
                        "example": 0,
                        "type": "number"
                      },
                      "futures_session_upl": {
                        "description": "Futures session unrealized profit and Loss",
                        "example": 0,
                        "type": "number"
                      },
                      "has_non_block_chain_equity": {
                        "description": "Optional field returned with value `true` when user has non block chain equity that is excluded from proof of reserve calculations",
                        "type": "boolean"
                      },
                      "initial_margin": {
                        "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "example": 0.379882,
                        "type": "number"
                      },
                      "limits": {
                        "$ref": "#/components/schemas/types/api_limits"
                      },
                      "maintenance_margin": {
                        "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "example": 0.1334519,
                        "type": "number"
                      },
                      "margin_balance": {
                        "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "example": 2.25,
                        "type": "number"
                      },
                      "margin_model": {
                        "description": "Name of user's currently enabled margin model",
                        "example": "segregated_sm",
                        "type": "string"
                      },
                      "options_delta": {
                        "description": "Options summary delta",
                        "example": 0,
                        "type": "number"
                      },
                      "options_gamma": {
                        "description": "Options summary gamma",
                        "example": 0,
                        "type": "number"
                      },
                      "options_gamma_map": {
                        "description": "Map of options' gammas per index",
                        "type": "object"
                      },
                      "options_pl": {
                        "description": "Options profit and Loss",
                        "example": 0,
                        "type": "number"
                      },
                      "options_session_rpl": {
                        "description": "Options session realized profit and Loss",
                        "example": 0,
                        "type": "number"
                      },
                      "options_session_upl": {
                        "description": "Options session unrealized profit and Loss",
                        "example": 0,
                        "type": "number"
                      },
                      "options_theta": {
                        "description": "Options summary theta",
                        "example": 0,
                        "type": "number"
                      },
                      "options_theta_map": {
                        "description": "Map of options' thetas per index",
                        "type": "object"
                      },
                      "options_value": {
                        "description": "Options value",
                        "example": 0,
                        "type": "number"
                      },
                      "options_vega": {
                        "description": "Options summary vega",
                        "example": 0,
                        "type": "number"
                      },
                      "options_vega_map": {
                        "description": "Map of options' vegas per index",
                        "type": "object"
                      },
                      "portfolio_margining_enabled": {
                        "description": "`true` when portfolio margining is enabled for user",
                        "example": true,
                        "type": "boolean"
                      },
                      "projected_delta_total": {
                        "$ref": "#/components/schemas/types/projected_delta_total"
                      },
                      "projected_initial_margin": {
                        "$ref": "#/components/schemas/types/projected_initial_margin"
                      },
                      "projected_maintenance_margin": {
                        "$ref": "#/components/schemas/types/projected_maintenance_margin"
                      },
                      "session_rpl": {
                        "$ref": "#/components/schemas/types/rpl"
                      },
                      "session_upl": {
                        "$ref": "#/components/schemas/types/upl"
                      },
                      "spot_reserve": {
                        "description": "The account's balance reserved in active spot orders",
                        "example": 0.3,
                        "type": "number"
                      },
                      "total_delta_total_usd": {
                        "description": "Optional (only for users using cross margin). The account's total delta total in all cross collateral currencies, expressed in USD",
                        "example": 1.8,
                        "type": "number"
                      },
                      "total_equity_usd": {
                        "description": "Optional (only for users using cross margin). The account's total equity in all cross collateral currencies, expressed in USD",
                        "example": 2.6437733,
                        "type": "number"
                      },
                      "total_initial_margin_usd": {
                        "description": "Optional (only for users using cross margin). The account's total initial margin in all cross collateral currencies, expressed in USD",
                        "example": 0.379882,
                        "type": "number"
                      },
                      "total_maintenance_margin_usd": {
                        "description": "Optional (only for users using cross margin). The account's total maintenance margin in all cross collateral currencies, expressed in USD",
                        "example": 0.1334519,
                        "type": "number"
                      },
                      "total_margin_balance_usd": {
                        "description": "Optional (only for users using cross margin). The account's total margin balance in all cross collateral currencies, expressed in USD",
                        "example": 2.25,
                        "type": "number"
                      },
                      "total_pl": {
                        "description": "Profit and loss",
                        "example": 0.02032221,
                        "type": "number"
                      }
                    },
                    "required": [
                      "equity",
                      "currency",
                      "maintenance_margin",
                      "initial_margin",
                      "available_funds",
                      "available_withdrawal_funds",
                      "balance",
                      "session_upl",
                      "session_rpl",
                      "total_pl",
                      "options_pl",
                      "options_session_upl",
                      "options_session_rpl",
                      "options_delta",
                      "options_gamma",
                      "options_vega",
                      "options_value",
                      "options_theta",
                      "futures_pl",
                      "options_gamma_map",
                      "options_theta_map",
                      "options_vega_map",
                      "futures_session_upl",
                      "futures_session_rpl",
                      "projected_maintenance_margin",
                      "delta_total",
                      "projected_delta_total"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "system_name": {
                  "description": "System generated user nickname (available when parameter `extended` = `true`)",
                  "example": "myname",
                  "type": "string"
                },
                "type": {
                  "description": "Account type (available when parameter `extended` = `true`)",
                  "enum": [
                    "main",
                    "subaccount"
                  ],
                  "type": "string"
                },
                "username": {
                  "description": "Account name (given by user) (available when parameter `extended` = `true`)",
                  "example": "name",
                  "type": "string"
                }
              },
              "required": [
                "security_keys_enabled",
                "system_name",
                "username",
                "email",
                "type",
                "id"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_add_block_rfq_quote_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/types/block_rfq_quote"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_add_to_address_book_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/address_book_item"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_address_book_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/address_book_item"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_api_key_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/api_key"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_buy_and_sell_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "order": {
                  "$ref": "#/components/schemas/order"
                },
                "trades": {
                  "items": {
                    "$ref": "#/components/schemas/user_trade"
                  },
                  "type": "array"
                }
              },
              "required": [
                "order",
                "trades"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_cancel_all_block_rfq_quotes_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Total number of successfully cancelled quotes",
              "example": 7,
              "type": "number"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_cancel_all_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Total number of successfully cancelled orders",
              "example": 7,
              "type": "number"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_cancel_block_rfq_quote_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/types/block_rfq_quote"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_cancel_block_rfq_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/types/block_rfq"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_cancel_block_rfq_trigger_response": {
      "$ref": "#/components/schemas/types/block_rfq"
    },
    "private_cancel_quotes_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Total number of successfully cancelled quotes",
              "example": 3,
              "type": "number"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_cancel_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/order"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_change_margin_model_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "currency": {
                    "$ref": "#/components/schemas/types/currency"
                  },
                  "new_state": {
                    "description": "Represents portfolio state after change",
                    "properties": {
                      "available_balance": {
                        "description": "Available balance after change",
                        "type": "number"
                      },
                      "initial_margin_rate": {
                        "description": "Initial margin rate after change",
                        "type": "number"
                      },
                      "maintenance_margin_rate": {
                        "description": "Maintenance margin rate after change",
                        "type": "number"
                      }
                    },
                    "required": [
                      "maintenance_margin_rate",
                      "initial_margin_rate",
                      "available_balance"
                    ],
                    "type": "object"
                  },
                  "old_state": {
                    "description": "Represents portfolio state before change",
                    "properties": {
                      "available_balance": {
                        "description": "Available balance before change",
                        "type": "number"
                      },
                      "initial_margin_rate": {
                        "description": "Initial margin rate before change",
                        "type": "number"
                      },
                      "maintenance_margin_rate": {
                        "description": "Maintenance margin rate before change",
                        "type": "number"
                      }
                    },
                    "required": [
                      "maintenance_margin_rate",
                      "initial_margin_rate",
                      "available_balance"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "old_state",
                  "new_state",
                  "currency"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_change_password_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "access_token": {
                  "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7",
                  "type": "string"
                },
                "expires_in": {
                  "description": "Token lifetime in seconds",
                  "example": 315360000,
                  "type": "integer"
                },
                "refresh_token": {
                  "description": "Can be used to request a new token (with a new lifetime)",
                  "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91",
                  "type": "string"
                },
                "scope": {
                  "description": "Type of the access for assigned token",
                  "type": "string"
                },
                "token_type": {
                  "description": "Authorization type, allowed value - `bearer`",
                  "enum": [
                    "bearer"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "access_token",
                "token_type",
                "expires_in",
                "refresh_token",
                "scope"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_chat_get_account_summary": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "email": {
                  "example": "user12121@gmail.com",
                  "type": "string"
                },
                "nick": {
                  "example": "user12121212",
                  "type": "string"
                },
                "registered": {
                  "type": "boolean"
                },
                "system_name": {
                  "example": "user1212121",
                  "type": "string"
                }
              },
              "required": [
                "registered"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_chat_set_nick": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "jid_node": {
                  "example": "www.user12121",
                  "type": "string"
                },
                "nick": {
                  "example": "user12121212",
                  "type": "string"
                }
              },
              "required": [
                "nick",
                "jid_node"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_create_block_rfq_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/types/block_rfq"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_create_combo_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/combo"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_create_subaccount_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "email": {
                  "description": "User email",
                  "example": "user_ABC@deribit.com",
                  "type": "string"
                },
                "id": {
                  "description": "Subaccount identifier",
                  "type": "integer"
                },
                "is_password": {
                  "description": "`true` when password for the subaccount has been configured",
                  "type": "boolean"
                },
                "login_enabled": {
                  "description": "Informs whether login to the subaccount is enabled",
                  "type": "boolean"
                },
                "portfolio": {
                  "$ref": "#/components/schemas/portfolio"
                },
                "receive_notifications": {
                  "description": "When `true` - receive all notification emails on the main email",
                  "type": "boolean"
                },
                "security_keys_enabled": {
                  "description": "Whether the Security Keys authentication is enabled",
                  "type": "boolean"
                },
                "system_name": {
                  "description": "System generated user nickname",
                  "type": "string"
                },
                "type": {
                  "description": "Account type",
                  "enum": [
                    "subaccount"
                  ],
                  "type": "string"
                },
                "username": {
                  "description": "Account name (given by user)",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "type",
                "id",
                "login_enabled",
                "is_password",
                "receive_notifications",
                "system_name",
                "tfa_enabled",
                "email"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_custody_settlement_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/types/custody_settlement"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_delete_address_beneficiary_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "ok",
              "example": "ok",
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_deposit_address_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Object if address is created, null otherwise",
              "properties": {
                "address": {
                  "$ref": "#/components/schemas/types/currency_address"
                },
                "creation_timestamp": {
                  "$ref": "#/components/schemas/types/timestamp"
                },
                "currency": {
                  "$ref": "#/components/schemas/types/currency"
                },
                "type": {
                  "$ref": "#/components/schemas/types/wallet_address_type"
                }
              },
              "required": [
                "creation_timestamp",
                "currency",
                "address",
                "type"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_edit_block_rfq_quote_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/types/block_rfq_quote"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_edit_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "order": {
                  "$ref": "#/components/schemas/order"
                },
                "trades": {
                  "items": {
                    "$ref": "#/components/schemas/user_trade"
                  },
                  "type": "array"
                }
              },
              "required": [
                "order",
                "trades"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_access_log_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/access_log"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_address_beneficiary_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/address_beneficiary_item"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_affiliate_program_info_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "is_enabled": {
                  "description": "Status of affiliate program",
                  "type": "boolean"
                },
                "link": {
                  "description": "Affiliate link",
                  "type": "string"
                },
                "number_of_affiliates": {
                  "description": "Number of affiliates",
                  "type": "number"
                },
                "received": {
                  "properties": {
                    "btc": {
                      "description": "Total payout received in BTC",
                      "type": "number"
                    },
                    "eth": {
                      "description": "Total payout received in ETH",
                      "type": "number"
                    }
                  },
                  "required": [
                    "btc",
                    "eth"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "is_enabled"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_all_balances_snapshot_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "balances": {
                  "description": "User balance in a given currency",
                  "properties": {
                    "accounts": {
                      "description": "Represents portfolio of main-account and sub-accounts",
                      "properties": {
                        "available_funds": {
                          "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                          "type": "number"
                        },
                        "available_withdrawal_funds": {
                          "description": "The account's available to withdrawal funds",
                          "type": "number"
                        },
                        "balance": {
                          "description": "Balance of the (sub)account",
                          "type": "number"
                        },
                        "equity": {
                          "description": "The account's current equity",
                          "type": "number"
                        },
                        "initial_margin": {
                          "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                          "type": "number"
                        },
                        "main": {
                          "description": "Main account or subaccount",
                          "type": "boolean"
                        },
                        "maintenance_margin": {
                          "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                          "type": "number"
                        },
                        "margin_balance": {
                          "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                          "type": "number"
                        },
                        "snapshot_timestamp": {
                          "description": "Timestamp of the snapshot",
                          "type": "integer"
                        },
                        "user_id": {
                          "description": "Id of a (sub)account",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "available_withdrawal_funds",
                        "available_funds",
                        "initial_margin",
                        "maintenance_margin",
                        "equity",
                        "margin_balance",
                        "main",
                        "balance",
                        "user_id"
                      ],
                      "type": "object"
                    },
                    "currency": {
                      "$ref": "#/components/schemas/types/currency"
                    },
                    "custody": {
                      "description": "Custody balance",
                      "type": "number"
                    },
                    "pnl": {
                      "description": "Profit net loss of the user (total_equity - custody)",
                      "type": "number"
                    },
                    "total_equity": {
                      "description": "Equity of the main account + subaccounts. Takes into account external equity.",
                      "type": "number"
                    }
                  },
                  "type": "array"
                },
                "signature": {
                  "description": "The signature, encode as base64. Signature is generated using RSA SHA256 with 4096bit key. The signature can be verified using the signature_payload and Deribit's public key.",
                  "type": "string"
                },
                "signature_payload": {
                  "description": "Serialized JSON string of the result (without the `signature` and `signature_payload` fields). The JSON string is compressed using Gzip and encoded in Base64. To validate the process, the user should first decode the Base64-encoded `signature_payload` and then un-Gzip the decoded payload to retrieve the original JSON string. Next, the user should verify the `signature` by using the decoded JSON string along with the corresponding public key, ensuring that the signature was correctly generated.",
                  "type": "string"
                },
                "signed_at": {
                  "description": "Timestamp of the signature",
                  "type": "integer"
                }
              },
              "required": [
                "currency",
                "accounts",
                "total_equity",
                "custody",
                "pnl"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_balance_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/get_custody_balance"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_balance_snapshot_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "accounts": {
                  "description": "Represents portfolio of main-account and sub-accounts",
                  "properties": {
                    "available_funds": {
                      "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "type": "number"
                    },
                    "available_withdrawal_funds": {
                      "description": "The account's available to withdrawal funds",
                      "type": "number"
                    },
                    "balance": {
                      "description": "Balance of the (sub)account",
                      "type": "number"
                    },
                    "equity": {
                      "description": "The account's current equity",
                      "type": "number"
                    },
                    "initial_margin": {
                      "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "type": "number"
                    },
                    "main": {
                      "description": "Main account or subaccount",
                      "type": "boolean"
                    },
                    "maintenance_margin": {
                      "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "type": "number"
                    },
                    "margin_balance": {
                      "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "type": "number"
                    },
                    "snapshot_timestamp": {
                      "description": "Timestamp of the snapshot",
                      "type": "integer"
                    },
                    "user_id": {
                      "description": "Id of a (sub)account",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "available_withdrawal_funds",
                    "available_funds",
                    "initial_margin",
                    "maintenance_margin",
                    "equity",
                    "margin_balance",
                    "main",
                    "balance",
                    "user_id"
                  ],
                  "type": "object"
                },
                "currency": {
                  "$ref": "#/components/schemas/types/currency"
                },
                "custody": {
                  "description": "Custody balance",
                  "type": "number"
                },
                "pnl": {
                  "description": "Profit net loss of the user (total_equity - custody)",
                  "type": "number"
                },
                "signature": {
                  "description": "The signature, encode as base64. Signature is generated using RSA SHA256 with 4096bit key. The signature can be verified using the signature_payload and Deribit's public key.",
                  "type": "string"
                },
                "signature_payload": {
                  "description": "Serialized JSON string of the result (without the `signature` and `signature_payload` fields). The JSON string is compressed using Gzip and encoded in Base64. To validate the process, the user should first decode the Base64-encoded `signature_payload` and then un-Gzip the decoded payload to retrieve the original JSON string. Next, the user should verify the `signature` by using the decoded JSON string along with the corresponding public key, ensuring that the signature was correctly generated.",
                  "type": "string"
                },
                "signed_at": {
                  "description": "Timestamp of the signature",
                  "type": "integer"
                },
                "total_equity": {
                  "description": "Equity of the main account + subaccounts. Takes into account external equity.",
                  "type": "number"
                }
              },
              "required": [
                "currency",
                "accounts",
                "total_equity",
                "custody",
                "pnl"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_rfq_makers_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "A list of available makers.",
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_rfq_quotes_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/types/block_rfq_quote"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_rfq_user_info_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "parent": {
                  "description": "Parent Identity (group alias), representing the overall account group (main + subaccounts).",
                  "properties": {
                    "identity": {
                      "description": "Group-level alias identifying the account group as a whole.",
                      "type": "string"
                    },
                    "is_maker": {
                      "description": "Indicates whether the Parent Identity has maker scope.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "users": {
                  "items": {
                    "properties": {
                      "identity": {
                        "description": "Specific alias identifying this account individually.",
                        "type": "string"
                      },
                      "is_maker": {
                        "description": "Indicates whether this account has maker scope.",
                        "type": "boolean"
                      },
                      "taker_rating": {
                        "description": "Taker rating associated with this account, if available.",
                        "type": "number"
                      },
                      "user_id": {
                        "$ref": "#/components/schemas/types/user_id"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_rfqs_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "block_rfqs": {
                  "items": {
                    "$ref": "#/components/schemas/types/block_rfq"
                  },
                  "type": "array"
                },
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation"
                }
              }
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_trade_requests_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/types/pending_block_trade"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_trade_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/block_trade"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_block_trades_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/block_trade"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_broker_trade_requests_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "maker": {
                    "properties": {
                      "client_id": {
                        "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                        "type": "integer"
                      },
                      "client_link_id": {
                        "description": "ID assigned to a single user in a client; available to broker.",
                        "type": "integer"
                      },
                      "client_link_name": {
                        "description": "Name of the linked user within the client; available to broker.",
                        "type": "string"
                      },
                      "client_name": {
                        "description": "Name of the client; available to broker.",
                        "type": "string"
                      },
                      "state": {
                        "description": "State of the request from the maker side: `initial`, `approved`, or `rejected`.",
                        "type": "string"
                      },
                      "user_id": {
                        "description": "Obscured user id of the maker.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "nonce": {
                    "description": "Nonce for approving or rejecting the broker block trade request.",
                    "type": "string"
                  },
                  "state": {
                    "description": "State of the broker block trade request.",
                    "type": "string"
                  },
                  "taker": {
                    "properties": {
                      "client_id": {
                        "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                        "type": "integer"
                      },
                      "client_link_id": {
                        "description": "ID assigned to a single user in a client; available to broker.",
                        "type": "integer"
                      },
                      "client_link_name": {
                        "description": "Name of the linked user within the client; available to broker.",
                        "type": "string"
                      },
                      "client_name": {
                        "description": "Name of the client; available to broker.",
                        "type": "string"
                      },
                      "state": {
                        "description": "State of the request from the taker side: `initial`, `approved`, or `rejected`.",
                        "type": "string"
                      },
                      "user_id": {
                        "description": "Obscured user id of the taker.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "timestamp": {
                    "description": "Timestamp of the broker block trade request (milliseconds since the UNIX epoch).",
                    "type": "integer"
                  },
                  "trades": {
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Trade amount.",
                          "type": "number"
                        },
                        "direction": {
                          "description": "Trade direction (buy or sell).",
                          "type": "string"
                        },
                        "instrument_name": {
                          "description": "Name of the traded instrument.",
                          "type": "string"
                        },
                        "price": {
                          "description": "Trade price.",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_broker_trades_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "history": {
                  "items": {
                    "properties": {
                      "id": {
                        "description": "Unique identifier of the block trade history entry.",
                        "type": "string"
                      },
                      "maker": {
                        "properties": {
                          "client_id": {
                            "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                            "type": "integer"
                          },
                          "client_link_id": {
                            "description": "ID assigned to a single user in a client; available to broker.",
                            "type": "integer"
                          },
                          "client_link_name": {
                            "description": "Name of the linked user within the client; available to broker.",
                            "type": "string"
                          },
                          "client_name": {
                            "description": "Name of the client; available to broker.",
                            "type": "string"
                          },
                          "user_id": {
                            "description": "Obscured user id of the maker.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "taker": {
                        "properties": {
                          "client_id": {
                            "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                            "type": "integer"
                          },
                          "client_link_id": {
                            "description": "ID assigned to a single user in a client; available to broker.",
                            "type": "integer"
                          },
                          "client_link_name": {
                            "description": "Name of the linked user within the client; available to broker.",
                            "type": "string"
                          },
                          "client_name": {
                            "description": "Name of the client; available to broker.",
                            "type": "string"
                          },
                          "user_id": {
                            "description": "Obscured user id of the taker.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "timestamp": {
                        "description": "Timestamp of the block trade history entry (milliseconds since the UNIX epoch).",
                        "type": "integer"
                      },
                      "trades": {
                        "items": {
                          "$ref": "#/components/schemas/block_trade"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "next_start_id": {
                  "description": "The next start ID for pagination.",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_cancel_on_disconnect_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "enabled": {
                  "$ref": "#/components/schemas/types/enabled_field"
                },
                "scope": {
                  "$ref": "#/components/schemas/types/cod_scope"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_deposits_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "count": {
                  "$ref": "#/components/schemas/types/result_count"
                },
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/deposit"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data",
                "count"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_email_language_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "The abbreviation of the language",
              "example": "en",
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_leg_prices_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "amount": {
                  "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
                  "type": "number"
                },
                "legs": {
                  "$ref": "#/components/schemas/types/leg_structure"
                }
              }
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_margins_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "buy": {
                  "description": "Margin when buying",
                  "example": 0.01681367,
                  "type": "number"
                },
                "max_price": {
                  "$ref": "#/components/schemas/types/max_price"
                },
                "min_price": {
                  "$ref": "#/components/schemas/types/min_price"
                },
                "sell": {
                  "description": "Margin when selling",
                  "example": 0.01680479,
                  "type": "number"
                }
              },
              "required": [
                "buy",
                "sell",
                "min_price",
                "max_price"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_mmp_config_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "block_rfq": {
                    "description": "If true, indicates MMP configuration for Block RFQ. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
                    "type": "boolean"
                  },
                  "delta_limit": {
                    "description": "Delta limit",
                    "type": "number"
                  },
                  "frozen_time": {
                    "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
                    "type": "integer"
                  },
                  "index_name": {
                    "$ref": "#/components/schemas/types/index_name"
                  },
                  "interval": {
                    "description": "MMP Interval in seconds, if set to 0 MMP is disabled",
                    "type": "integer"
                  },
                  "mmp_group": {
                    "description": "Specified MMP Group",
                    "type": "string"
                  },
                  "quantity_limit": {
                    "description": "Quantity limit",
                    "type": "number"
                  },
                  "trade_count_limit": {
                    "description": "For Block RFQ only. The maximum number of Block RFQ trades allowed in the lookback window. Each RFQ trade counts as +1 towards the limit (not individual legs). Works across all currency pairs.",
                    "type": "integer"
                  },
                  "vega_limit": {
                    "description": "Vega limit",
                    "type": "number"
                  }
                },
                "required": [
                  "index_name",
                  "interval",
                  "frozen_time"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_mmp_status_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "block_rfq": {
                    "description": "If true, indicates that the MMP status is for Block RFQ. Block RFQ MMP status is completely separate from normal order/quote MMP status.",
                    "example": false,
                    "type": "boolean"
                  },
                  "frozen_until": {
                    "description": "Timestamp (milliseconds since the UNIX epoch) until the user will be frozen - 0 means that the user is frozen until manual reset.",
                    "type": "integer"
                  },
                  "index_name": {
                    "$ref": "#/components/schemas/types/index_name"
                  },
                  "mmp_group": {
                    "description": "Triggered mmp group, this parameter is optional (appears only for Mass Quote orders trigger)",
                    "example": "MassQuoteBot7",
                    "type": "string"
                  }
                },
                "required": [
                  "index_name",
                  "frozen_until",
                  "mmp_group"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_open_orders_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/order"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_order_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/order"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_order_margin_by_ids_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/order_id_initial_margin_pair"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_order_state_by_label_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/orders"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_order_state_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/order"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_pending_block_trades_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/types/pending_block_trade"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_position_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/position_with_elp"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_positions_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/position_with_elp"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_security_key_activation_data_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "account": {
                  "description": "Email address of current account",
                  "type": "string"
                },
                "activation_challenge": {
                  "description": "Activation challenge, needs to be send with activation request",
                  "type": "string"
                },
                "data": {
                  "description": "Data for U2F activation",
                  "type": "object"
                },
                "issuer": {
                  "description": "Domain name",
                  "type": "string"
                },
                "secret": {
                  "description": "TFA Secret (for tfa type only)",
                  "type": "string"
                },
                "type": {
                  "$ref": "#/components/schemas/types/security_key_type"
                }
              },
              "required": [
                "activation_challenge"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_security_key_status_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "assignments": {
                  "description": "List of assignments that has Security Key assigned, allowed values: `login`, `account`, `wallet`, `admin`",
                  "items": {
                    "description": "",
                    "enum": [
                      "login",
                      "account",
                      "wallet",
                      "admin"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "enabled": {
                  "description": "`true` if there is any assignment to any key made",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Current Security Keys management mode",
                  "enum": [
                    "basic",
                    "advanced"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "mode",
                "enabled",
                "assignments"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_subaccounts_details_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "open_orders": {
                    "items": {
                      "$ref": "#/components/schemas/order"
                    },
                    "type": "array"
                  },
                  "positions": {
                    "items": {
                      "$ref": "#/components/schemas/position"
                    },
                    "type": "array"
                  },
                  "uid": {
                    "description": "Account/Subaccount identifier",
                    "type": "integer"
                  }
                },
                "required": [
                  "uid",
                  "positions"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_subaccounts_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "email": {
                    "description": "User email",
                    "type": "string"
                  },
                  "id": {
                    "description": "Account/Subaccount identifier",
                    "type": "integer"
                  },
                  "is_password": {
                    "description": "`true` when password for the subaccount has been configured",
                    "type": "boolean"
                  },
                  "login_enabled": {
                    "description": "Informs whether login to the subaccount is enabled",
                    "type": "boolean"
                  },
                  "margin_model": {
                    "description": "Margin model",
                    "type": "string"
                  },
                  "not_confirmed_email": {
                    "description": "New email address that has not yet been confirmed. This field is only included if `with_portfolio` == `true`.",
                    "type": "string"
                  },
                  "portfolio": {
                    "$ref": "#/components/schemas/portfolio",
                    "description": "Only if with_portfolio == true"
                  },
                  "proof_id": {
                    "description": "hashed identifier used in the Proof Of Liability for the subaccount. This identifier allows you to find your entries in the Deribit Proof-Of-Reserves files. IMPORTANT: Keep it secret to not disclose your entries in the Proof-Of-Reserves.",
                    "type": "string"
                  },
                  "proof_id_signature": {
                    "description": "signature used as a base string for proof_id hash. IMPORTANT: Keep it secret to not disclose your entries in the Proof-Of-Reserves.",
                    "type": "string"
                  },
                  "receive_notifications": {
                    "description": "When `true` - receive all notification emails on the main email",
                    "type": "boolean"
                  },
                  "security_keys_assignments": {
                    "description": "Names of assignments with Security Keys assigned",
                    "type": "array"
                  },
                  "security_keys_enabled": {
                    "description": "Whether the Security Keys authentication is enabled",
                    "type": "boolean"
                  },
                  "system_name": {
                    "description": "System generated user nickname",
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "main",
                      "subaccount"
                    ],
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "email",
                  "type",
                  "tfa_enabled",
                  "receive_notifications",
                  "is_password",
                  "system_name",
                  "id"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_transaction_log_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation_with_null"
                },
                "logs": {
                  "items": {
                    "$ref": "#/components/schemas/transaction_log"
                  },
                  "type": "array"
                }
              },
              "required": [
                "continuation",
                "logs"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ]
        }
      ]
    },
    "private_get_transfers_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "count": {
                  "$ref": "#/components/schemas/types/result_count"
                },
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/transfer_item"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data",
                "count"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_trigger_order_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation"
                },
                "entries": {
                  "items": {
                    "$ref": "#/components/schemas/trigger_order_history_record"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_user_locks_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "currency": {
                    "$ref": "#/components/schemas/types/currency"
                  },
                  "enabled": {
                    "description": "Value is set to 'true' when user account is locked in currency",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Optional information for user why his account is locked",
                    "type": "text"
                  }
                },
                "required": [
                  "currency",
                  "enabled"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_user_trades_by_order_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "items": {
            "$ref": "#/components/schemas/user_trade"
          },
          "type": "array"
        }
      ]
    },
    "private_get_user_trades_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "trades": {
                  "items": {
                    "$ref": "#/components/schemas/user_trade"
                  },
                  "type": "array"
                }
              },
              "required": [
                "trades",
                "has_more"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_withdrawal_policy_limits": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/withdrawal_policy_limits"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_withdrawal_policy_mode": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/withdrawal_policy_mode"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_get_withdrawals_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "count": {
                  "$ref": "#/components/schemas/types/result_count"
                },
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/withdrawal"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data",
                "count"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_list_address_beneficiaries_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation"
                },
                "count": {
                  "description": "Total number of results available",
                  "example": 42,
                  "type": "integer"
                },
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/address_beneficiary_item"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_list_security_keys_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/security_key"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_mass_quote_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "errors": {
                  "description": "List of errors (present when `detailed` : `true`).",
                  "items": {
                    "properties": {
                      "code": {
                        "description": "Error code",
                        "type": "int"
                      },
                      "error": {
                        "description": "Error data.",
                        "type": "object"
                      },
                      "instrument_name": {
                        "description": "Instrument name.",
                        "type": "string"
                      },
                      "message": {
                        "description": "Error message.",
                        "type": "string"
                      },
                      "side": {
                        "description": "Quote side - `bid` or `ask`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "errors_count": {
                  "description": "Number of errors (present when `detailed` : `false`).",
                  "type": "int"
                },
                "orders": {
                  "items": {
                    "$ref": "#/components/schemas/order"
                  },
                  "type": "array"
                },
                "pending_requests": {
                  "description": "List of pending quotes (present when `wait_for_response`: `false` and `detailed` : `true`).",
                  "items": {
                    "properties": {
                      "instrument_name": {
                        "description": "Instrument name.",
                        "type": "string"
                      },
                      "side": {
                        "description": "Quote side - `bid` or `ask`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pending_requests_count": {
                  "description": "Number of pending quotes (present when `wait_for_response`: `false` and `detailed` : `false`).",
                  "type": "int"
                },
                "trades": {
                  "items": {
                    "$ref": "#/components/schemas/user_trade"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_pme_params_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "PM open order restrictions",
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_pme_simulate_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Simulation details",
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_position_move_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/position_move"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_put_balance_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "balance": {
                  "description": "Updated \"in custody\" balance of the user as seen by the exchange",
                  "type": "number"
                }
              },
              "required": [
                "balance"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_remove_from_address_book_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "ok",
              "example": "ok",
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_save_address_beneficiary_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/address_beneficiary_item"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_set_mmp_config_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "block_rfq": {
                    "description": "If true, indicates MMP configuration for Block RFQ. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
                    "type": "boolean"
                  },
                  "delta_limit": {
                    "description": "Delta limit",
                    "type": "number"
                  },
                  "frozen_time": {
                    "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
                    "type": "integer"
                  },
                  "index_name": {
                    "$ref": "#/components/schemas/types/index_name"
                  },
                  "interval": {
                    "description": "MMP Interval in seconds, if set to 0 MMP is disabled",
                    "type": "integer"
                  },
                  "mmp_group": {
                    "description": "Specified MMP Group",
                    "type": "string"
                  },
                  "quantity_limit": {
                    "description": "Quantity limit",
                    "type": "number"
                  },
                  "trade_count_limit": {
                    "description": "For Block RFQ only. The maximum number of Block RFQ trades allowed in the lookback window. Each RFQ trade counts as +1 towards the limit (not individual legs). Works across all currency pairs.",
                    "type": "integer"
                  },
                  "vega_limit": {
                    "description": "Vega limit",
                    "type": "number"
                  }
                },
                "required": [
                  "index_name",
                  "interval",
                  "frozen_time"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_settlement_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation"
                },
                "settlements": {
                  "items": {
                    "$ref": "#/components/schemas/settlement"
                  },
                  "type": "array"
                }
              },
              "required": [
                "continuation",
                "settlements"
              ],
              "type": "list"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_simulate_block_trade_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "`true` if block trade can be executed, `false` otherwise",
              "type": "boolean"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_simulate_portfolio_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Portfolio details",
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_stats_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "apps": {
                  "description": "Statistics of the applications owned by the user",
                  "type": "list"
                },
                "user": {
                  "description": "Statistics of the user",
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_submit_transfer_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/transfer_item"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_subscribe_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "A list of subscribed channels.",
              "items": {
                "example": "deribit_price_index.btc_usd",
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_trade_block_rfq_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/block_trade"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_update_in_address_book_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "ok",
              "example": "ok",
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_verify_block_trade_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "signature": {
                  "$ref": "#/components/schemas/types/block_trade_signature"
                }
              },
              "required": [
                "signature"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "private_withdraw_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/withdrawal"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_auth_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "access_token": {
                  "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7",
                  "type": "string"
                },
                "enabled_features": {
                  "$ref": "#/components/schemas/types/api_key_features"
                },
                "expires_in": {
                  "description": "Token lifetime in seconds",
                  "example": 315360000,
                  "type": "integer"
                },
                "google_login": {
                  "description": "The access token was acquired by logging in through Google.",
                  "type": "boolean"
                },
                "mandatory_tfa_status": {
                  "description": "2FA is required for privileged methods",
                  "example": "enabled",
                  "type": "string"
                },
                "refresh_token": {
                  "description": "Can be used to request a new token (with a new lifetime)",
                  "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91",
                  "type": "string"
                },
                "scope": {
                  "description": "Type of the access for assigned token",
                  "type": "string"
                },
                "sid": {
                  "description": "Optional Session id",
                  "type": "string"
                },
                "state": {
                  "description": "Copied from the input (if applicable)",
                  "type": "string"
                },
                "token_type": {
                  "description": "Authorization type, allowed value - `bearer`",
                  "enum": [
                    "bearer"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "access_token",
                "token_type",
                "expires_in",
                "refresh_token",
                "scope"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_announcements_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "body": {
                    "description": "The HTML body of the announcement",
                    "example": "An&nbsp;announcement",
                    "type": "string"
                  },
                  "confirmation": {
                    "description": "Whether the user confirmation is required for this announcement",
                    "example": false,
                    "type": "boolean"
                  },
                  "id": {
                    "description": "A unique identifier for the announcement",
                    "example": 19288317,
                    "type": "number"
                  },
                  "important": {
                    "description": "Whether the announcement is marked as important",
                    "example": false,
                    "type": "boolean"
                  },
                  "publication_timestamp": {
                    "description": "The timestamp (milliseconds since the Unix epoch) of announcement publication",
                    "example": 1527844253000,
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title of the announcement",
                    "example": "Example announcement",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "body",
                  "important",
                  "id",
                  "publication_timestamp"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_apr_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation"
                },
                "data": {
                  "items": {
                    "properties": {
                      "apr": {
                        "description": "The APR of the day",
                        "type": "number"
                      },
                      "day": {
                        "description": "The full epoch day",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_block_rfq_trades_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "block_rfqs": {
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
                        "type": "number"
                      },
                      "combo_id": {
                        "$ref": "#/components/schemas/types/combo_id"
                      },
                      "direction": {
                        "$ref": "#/components/schemas/types/direction",
                        "description": "Trade direction of the taker"
                      },
                      "hedge": {
                        "$ref": "#/components/schemas/types/block_rfq_hedge_leg"
                      },
                      "id": {
                        "description": "ID of the Block RFQ",
                        "type": "integer"
                      },
                      "index_prices": {
                        "description": "A map of index prices for the underlying instrument(s) at the time of trade execution, where keys are price index names and values are prices.",
                        "type": "object"
                      },
                      "legs": {
                        "$ref": "#/components/schemas/types/leg_structure"
                      },
                      "mark_price": {
                        "description": "Mark Price at the moment of trade",
                        "type": "number"
                      },
                      "timestamp": {
                        "$ref": "#/components/schemas/types/trade_timestamp"
                      },
                      "trades": {
                        "items": {
                          "properties": {
                            "amount": {
                              "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                              "type": "number"
                            },
                            "direction": {
                              "$ref": "#/components/schemas/types/direction"
                            },
                            "hedge_amount": {
                              "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                              "type": "number"
                            },
                            "price": {
                              "$ref": "#/components/schemas/types/price"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "continuation": {
                  "$ref": "#/components/schemas/types/block_rfq_trade_tape_continuation"
                }
              }
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_book_summary_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/book_summary"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_combo_details_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/combo"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_combo_ids_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/types/combo_id"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_combos_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/combo"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_contract_size_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "contract_size": {
                  "$ref": "#/components/schemas/types/contract_size"
                }
              },
              "required": [
                "contract_size"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_currencies_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/currency_with_apr"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_delivery_prices_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "date": {
                        "$ref": "#/components/schemas/types/date"
                      },
                      "delivery_price": {
                        "$ref": "#/components/schemas/types/delivery_price"
                      }
                    },
                    "required": [
                      "date",
                      "delivery_price"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "records_total": {
                  "description": "Available delivery prices",
                  "example": 120,
                  "type": "number"
                }
              },
              "required": [
                "records_total",
                "data"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_expirations_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/expirations"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_funding_chart_data_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "current_interest": {
                  "description": "Current interest",
                  "example": 0.005000670552845,
                  "type": "number"
                },
                "data": {
                  "items": {
                    "properties": {
                      "index_price": {
                        "$ref": "#/components/schemas/types/index_price"
                      },
                      "interest_8h": {
                        "description": "Historical interest 8h value",
                        "example": 0.004999511380756577,
                        "type": "number"
                      },
                      "timestamp": {
                        "$ref": "#/components/schemas/types/timestamp"
                      }
                    },
                    "required": [
                      "timestamp",
                      "index_price",
                      "interest_8h"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "interest_8h": {
                  "description": "Current interest 8h",
                  "example": 0.0040080896931,
                  "type": "number"
                }
              },
              "required": [
                "current_interest",
                "data",
                "interest_8h"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_funding_rate_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "index_price": {
                    "$ref": "#/components/schemas/types/price"
                  },
                  "interest_1h": {
                    "description": "1hour interest rate",
                    "type": "float"
                  },
                  "interest_8h": {
                    "description": "8hour interest rate",
                    "type": "float"
                  },
                  "prev_index_price": {
                    "$ref": "#/components/schemas/types/price"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/types/timestamp"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_funding_rate_value_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "type": "float"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_historical_volatility_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "type": "timestamp-value pair"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_index_price_names_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "properties": {
                  "future_combo_creation_enabled": {
                    "description": "Whether future combo creation is enabled for this index (only present when `extended`=`true`)",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "Index name",
                    "type": "string"
                  },
                  "option_combo_creation_enabled": {
                    "description": "Whether option combo creation is enabled for this index (only present when `extended`=`true`)",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_index_price_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "estimated_delivery_price": {
                  "description": "Estimated delivery price for the market. For more details, see Documentation > General > Expiration Price",
                  "example": 11628.81,
                  "type": "number"
                },
                "index_price": {
                  "description": "Value of requested index",
                  "example": 11628.81,
                  "type": "number"
                }
              },
              "required": [
                "index_price",
                "estimated_delivery_price"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_instrument_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/components/schemas/instrument"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_instruments_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/instrument"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_mark_price_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Markprice history values as an array of arrays with 2 values each. The inner values correspond to the timestamp in ms and the markprice itself.",
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_order_book_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/notifications/ticker_notification_with_bids_and_asks"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_rfqs_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/rfq"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_security_keys_reset_data_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "email": {
                  "description": "Email of account which Security Keys are about to reset",
                  "example": "support@deribit.com",
                  "type": "string"
                }
              },
              "required": [
                "email"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_time_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Current timestamp (milliseconds since the UNIX epoch)",
              "example": 1517329113791,
              "type": "integer"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_trades_volumes_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/trades_volumes"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_tradingview_chart_data_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "close": {
                  "description": "List of prices at close (one per candle)",
                  "items": {
                    "$ref": "#/components/schemas/types/quote_price"
                  },
                  "type": "array"
                },
                "cost": {
                  "description": "List of cost bars (volume in quote currency, one per candle)",
                  "items": {
                    "$ref": "#/components/schemas/types/chart_volume"
                  },
                  "type": "array"
                },
                "high": {
                  "description": "List of highest price levels (one per candle)",
                  "items": {
                    "$ref": "#/components/schemas/types/quote_price"
                  },
                  "type": "array"
                },
                "low": {
                  "description": "List of lowest price levels (one per candle)",
                  "items": {
                    "$ref": "#/components/schemas/types/quote_price"
                  },
                  "type": "array"
                },
                "open": {
                  "description": "List of prices at open (one per candle)",
                  "items": {
                    "$ref": "#/components/schemas/types/quote_price"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Status of the query: `ok` or `no_data`",
                  "enum": [
                    "ok",
                    "no_data"
                  ],
                  "type": "string"
                },
                "ticks": {
                  "description": "Values of the time axis given in milliseconds since UNIX epoch",
                  "items": {
                    "$ref": "#/components/schemas/types/timestamp"
                  },
                  "type": "array"
                },
                "volume": {
                  "description": "List of volume bars (in base currency, one per candle)",
                  "items": {
                    "$ref": "#/components/schemas/types/chart_volume"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_get_volatility_index_data_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "Volatility index candles.",
              "properties": {
                "continuation": {
                  "description": "Continuation - to be used as the `end_timestamp` parameter on the next request. `NULL` when no continuation.",
                  "type": "integer"
                },
                "data": {
                  "description": "Candles as an array of arrays with 5 values each. The inner values correspond to the timestamp in ms, open, high, low, and close values of the volatility index correspondingly.",
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_index_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "BTC": {
                  "description": "The current index price for BTC-USD (only for selected currency == BTC)",
                  "example": 11628.81,
                  "type": "number"
                },
                "ETH": {
                  "description": "The current index price for ETH-USD (only for selected currency == ETH)",
                  "example": 328.81,
                  "type": "number"
                },
                "edp": {
                  "description": "Estimated delivery price for the currency. For more details, see Documentation > General > Expiration Price",
                  "example": 11628.81,
                  "type": "number"
                }
              },
              "required": [
                "BTC",
                "edp"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_list_api_keys_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/api_key"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_placeholder_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "description": "See example.",
              "type": "any"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_settlement_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "continuation": {
                  "$ref": "#/components/schemas/types/continuation"
                },
                "settlements": {
                  "items": {
                    "$ref": "#/components/schemas/settlement"
                  },
                  "type": "array"
                }
              },
              "required": [
                "continuation",
                "settlements"
              ],
              "type": "list"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_status_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "locked": {
                  "description": "`true` when platform is locked in all currencies, `partial` when some currencies are locked, `false` - when there are not currencies locked",
                  "type": "string"
                },
                "locked_indices": {
                  "description": "List of currency indices locked platform-wise",
                  "type": "array"
                }
              },
              "required": [
                "locked"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_test_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "version": {
                  "description": "The API version",
                  "example": "2.1.26",
                  "type": "string"
                }
              },
              "required": [
                "version"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_ticker_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "$ref": "#/notifications/ticker_notification"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_tickers_by_expiration_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/notifications/ticker_notification"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_token_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "access_token": {
                  "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7",
                  "type": "string"
                },
                "expires_in": {
                  "description": "Token lifetime in seconds",
                  "example": 315360000,
                  "type": "integer"
                },
                "refresh_token": {
                  "description": "Can be used to request a new token (with a new lifetime)",
                  "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91",
                  "type": "string"
                },
                "scope": {
                  "description": "Type of the access for assigned token",
                  "type": "string"
                },
                "sid": {
                  "description": "Optional Session id",
                  "type": "string"
                },
                "token_type": {
                  "description": "Authorization type, allowed value - `bearer`",
                  "enum": [
                    "bearer"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "access_token",
                "token_type",
                "expires_in",
                "refresh_token",
                "scope"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "public_trades_history_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "trades": {
                  "items": {
                    "$ref": "#/components/schemas/public_trade"
                  },
                  "type": "array"
                }
              },
              "required": [
                "trades",
                "has_more"
              ],
              "type": "object"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    },
    "vasps_response": {
      "allOf": [
        {
          "$ref": "#/responses/base_message"
        },
        {
          "properties": {
            "result": {
              "items": {
                "$ref": "#/components/schemas/vasp_item"
              },
              "type": "array"
            }
          },
          "required": [
            "result"
          ],
          "type": "object"
        }
      ]
    }
  },
  "servers": [
    {
      "description": "local test server",
      "url": "http://localhost:8082/api/v2"
    },
    {
      "url": "https://test.deribit.com/api/v2"
    }
  ],
  "tags": [
    {
      "description": "Can only be used over websockets.",
      "name": "websocket_only"
    },
    {
      "description": "Public methods can be used without authentication.",
      "name": "public"
    },
    {
      "description": "<p>Private methods require authentication. All requests must include a valid OAuth2 token.</p>\n<p>A token can be requested using the <a href=\"#public-auth\">/public/auth</a> method.</p>\n<p>When using the websockets protocol, the token must be included as a parameter <code>access_token</code> in the message. When using REST (HTTP GET), the token may also be passed in the <code>Authorization</code> header.</p>",
      "name": "private"
    },
    {
      "description": "Not intended for public use; do not include in publicly available documentation.",
      "name": "internal"
    },
    {
      "name": "authentication"
    },
    {
      "name": "session_management"
    },
    {
      "description": "Subscription works as [notifications](#notifications), so users will automatically (after subscribing) receive messages from the server. Overview for each channel response format is described in [subscriptions](#subscriptions) section.",
      "name": "subscription_management"
    },
    {
      "name": "account_management"
    },
    {
      "name": "trading"
    },
    {
      "name": "market_data"
    },
    {
      "name": "wallet"
    },
    {
      "name": "chat"
    }
  ]
}